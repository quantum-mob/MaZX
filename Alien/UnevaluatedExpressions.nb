(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    411578,      11236]
NotebookOptionsPosition[    288475,       9131]
NotebookOutlinePosition[    333160,      10068]
CellTagsIndexPosition[    333117,      10065]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 StyleBox[
  RowBox[{"Working", " ", "with", " ", "Unevaluated", " ", "Expressions"}], 
  "Title"]], "Input",ExpressionUUID->"991451c9-66bf-4e3b-9ab7-e20e8820c206"],

Cell["\<\
Robby Villegas
Wolfram Research\
\>", "Author",
 FontSize->14,ExpressionUUID->"de87c8b1-40e8-48d2-9069-9da24dce453d"],

Cell[TextData[{
 "Abstract:\n\nMost experienced Mathematica programmers will eventually \
encounter tasks or applications in which they need to manipulate expressions \
without letting them evaluate. For instance, typesetting and interpretation \
rules, debugging programs, code analysis tools, and constructing code on the \
fly at run time are all areas of programming that require careful control of \
evaluation.  Since Mathematica automatically evaluates arguments and return \
values of functions, building up a result without exposing intermediate \
stages of work to the evaluator requires subtle techniques that even seasoned \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " programmers sometimes find elusive. In this tutorial, I will demonstrate \
situations in which evaluation control is important, pointing out common \
pitfalls and providing useful tools and techniques along the way."
}], "Abstract",
 FontSize->14,ExpressionUUID->"51ccd2c4-5dff-44d8-84d6-44196ea4edca"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Off", "[", 
   RowBox[{
    RowBox[{"General", "::", "spell"}], ",", " ", 
    RowBox[{"General", "::", "spell1"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"Get", "[", "\"\<init.m\>\"", "]"}]}], "Input",
 InitializationCell->
  True,ExpressionUUID->"41604f82-f27f-4bd1-82a5-a36c03fc395a"],

Cell[CellGroupData[{

Cell["An Introduction to demystify scary things", "Section",ExpressionUUID->"bb6e45b8-054e-4141-aa09-18b2b0bb166d"],

Cell[CellGroupData[{

Cell["The overarching evaluator", "Subsubsection",ExpressionUUID->"8b89d48c-4384-4d70-ba0a-d27337c818be"],

Cell[TextData[{
 "   ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is an interpreted language.  When ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " sees an input like this:\n\n",
 StyleBox["  f[1 + 2, 3^3, x + x + 0]", "Input",
  FontSize->12],
 "\n\nits standard procedure is to pre-evaluate the head f and the arguments \
ei before actually invoking the function f.  Thus, by the time the code for \
the function f is called, it sees this:\n\n",
 StyleBox["  f[3, 9, 2 x]", "Input",
  FontSize->12],
 "\n\nIt is the overarching ",
 StyleBox["evaluator",
  FontVariations->{"Underline"->True}],
 " that pre-processes the general form of expressions in this way."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"24b585b0-f15a-4d24-bcab-\
2349d79ce175"],

Cell[TextData[{
 "The reason ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " pre-evaluates is that it's usually what you want, in order to make \
interactive use or programming easier.  For instance, if you previously \
assigned a, b, and n values, you definitely want them substituted in before \
this the ",
 StyleBox["Expand", "Input",
  FontSize->12],
 " function is called here:"
}], "Text",ExpressionUUID->"63ad11b8-7b2e-4e9f-b0b1-ea9e44e85895"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"\"\<a\>\"", ",", " ", "\"\<b\>\"", ",", " ", "\"\<n\>\""}], "]"}],
   "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", " ", "b"}], "}"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", " ", "7"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"n", " ", "=", " ", "7"}], ";"}]}], "Input",ExpressionUUID->\
"a8326331-4a97-497d-9987-bcae87c1822b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"a", " ", "x"}], " ", "+", " ", 
     RowBox[{"b", " ", "y"}]}], ")"}], "^", "n"}], "]"}]], "Input",ExpressionU\
UID->"4cfcf8f5-b61e-46b4-b05b-bc18e82dfd5a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2187", " ", 
   SuperscriptBox["x", "7"]}], "+", 
  RowBox[{"35721", " ", 
   SuperscriptBox["x", "6"], " ", "y"}], "+", 
  RowBox[{"250047", " ", 
   SuperscriptBox["x", "5"], " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"972405", " ", 
   SuperscriptBox["x", "4"], " ", 
   SuperscriptBox["y", "3"]}], "+", 
  RowBox[{"2268945", " ", 
   SuperscriptBox["x", "3"], " ", 
   SuperscriptBox["y", "4"]}], "+", 
  RowBox[{"3176523", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "5"]}], "+", 
  RowBox[{"2470629", " ", "x", " ", 
   SuperscriptBox["y", "6"]}], "+", 
  RowBox[{"823543", " ", 
   SuperscriptBox["y", "7"]}]}]], "Output",ExpressionUUID->"17dedae5-ebdd-\
4316-a2fd-3941364c2328"]
}, Open  ]],

Cell[TextData[{
 "And in this example, you want the ",
 StyleBox["D", "Input",
  FontSize->12],
 " to compute the derivative expression before ",
 StyleBox["Simplify", "Input",
  FontSize->12],
 " goes to work, since before ",
 StyleBox["D", "Input",
  FontSize->12],
 " produces an expression, there's really nothing to simplify:"
}], "Text",ExpressionUUID->"b9fb7291-89e8-48aa-be6a-9935b645f73a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", " ", 
  RowBox[{"D", "[", 
   RowBox[{
    RowBox[{"ArcSin", "[", "x", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", "8"}], "}"}]}], "]"}], " ", "]"}]], "Input",Expres\
sionUUID->"b727c650-ca55-4259-9999-c32f120bf86c"],

Cell[BoxData[
 FractionBox[
  RowBox[{"315", " ", "x", " ", 
   RowBox[{"(", 
    RowBox[{"35", "+", 
     RowBox[{"210", " ", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"168", " ", 
      SuperscriptBox["x", "4"]}], "+", 
     RowBox[{"16", " ", 
      SuperscriptBox["x", "6"]}]}], ")"}]}], 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"1", "-", 
     SuperscriptBox["x", "2"]}], ")"}], 
   RowBox[{"15", "/", "2"}]]]], "Output",ExpressionUUID->"540f96dc-87d2-4619-\
8037-2fc86ea09c5b"]
}, Open  ]],

Cell[TextData[{
 "If Simplify acted on its literal argument, ",
 StyleBox["D[ArcSin[x], {x, 8}]", "Input",
  FontSize->12],
 ", what could it try to simplify?  ArcSin[x]?  x?  8??  That would not make \
sense, so the argument evaluates first, then the outer function is called."
}], "Text",ExpressionUUID->"29cacb3a-016f-4cfc-a9fc-5185edbe8fdb"],

Cell[TextData[{
 "So, in general, before f is actually called, there are ",
 StyleBox["two stages of your input",
  FontVariations->{"Underline"->True}],
 ".  Here they are using the generic form from earlier:\n\n(Before)",
 StyleBox["  f[1 + 2, 3^3, x + x + 0]\n  ", "Input",
  FontSize->12],
 "\n(After)",
 StyleBox["  f[3, 9, 2 x]", "Input",
  FontSize->12],
 "\n\nThe first stage is your original input before the evaluator gets its \
hands on it.\nThe second stage has the head and arguments evaluated.\n\nIt is \
the second that actually calls f, so f never sees the original arguments like \
1 + 2, only the reduced arguments like 3!"
}], "Text",
 CellDingbat->None,ExpressionUUID->"ad073865-e380-4266-94c0-ba81532025a1"],

Cell[TextData[{
 "I usually think of the evaluator's pre-processing as applying the \
\"evaluator function\", call it eval(), to all the parts.  I colored the head \
red and the arguments blue to emphasize them.\n\n",
 StyleBox["  ", "Input",
  FontSize->12],
 StyleBox["f", "Input",
  FontSize->12,
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["[", "Input",
  FontSize->12],
 StyleBox["e1", "Input",
  FontSize->12,
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[", ..., ", "Input",
  FontSize->12],
 StyleBox["en", "Input",
  FontSize->12,
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["]\n  \n     ", "Input",
  FontSize->12],
 Cell[BoxData[
  FormBox[
   StyleBox["\[DoubleLongRightArrow]",
    SpanMinSize->4,
    SpanMaxSize->4], TraditionalForm]],ExpressionUUID->
  "8bd2d7c5-d385-4447-b758-7dd666be8cc8"],
 StyleBox["\n     ", "Input",
  FontSize->12],
 "\n",
 StyleBox["  eval(", "Input",
  FontSize->12],
 StyleBox["f", "Input",
  FontSize->12,
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[") [ eval(", "Input",
  FontSize->12],
 StyleBox["e1", "Input",
  FontSize->12,
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["), ..., eval(", "Input",
  FontSize->12],
 StyleBox["en", "Input",
  FontSize->12,
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[") ]\n", "Input",
  FontSize->12],
 "\nFor those of you familiar with the evaluation sequence in Appendix \
\"A.4.1 The Standard Evaluation Sequence\" of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " book, I'm talking about steps 2 through 4, usually called \"standard \
argument evaluation\"."
}], "Text",
 CellDingbat->None,ExpressionUUID->"6af588ef-464c-4597-a160-f40216324887"],

Cell["\<\
   Here's a contrived example to show that simple arithmetic reduces the head \
and argument to sensible values.  Again, I've colored the head and argument, \
and made the function brackets large, to make it clear that this example is \
really of the simple form f[x], with f and x being sort of weird, complex \
things:\
\>", "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"e90a9735-626e-4f2f-9ae6-\
a8f4d64b40e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"(", 
    RowBox[{
     RowBox[{"1", "*", "FactorInteger"}], " ", "+", " ", "0"}], ")"}],
   FontColor->RGBColor[1, 0, 0]], "  ", 
  StyleBox["[",
   SpanMinSize->3,
   SpanMaxSize->3], " ", 
  StyleBox[
   RowBox[{
    RowBox[{"2", "^", "2"}], " ", "*", " ", 
    RowBox[{"3", "^", "3"}]}],
   FontColor->RGBColor[0, 0, 1]], " ", 
  StyleBox["]",
   SpanMinSize->3,
   SpanMaxSize->3]}]], "Input",ExpressionUUID->"e26f98f6-b428-4937-b6b4-\
5d93d89fed0c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"386082f6-a239-4999-9e0e-e0a8d09ad2c5"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Trace", "Input",
  FontSize->12],
 " seems like a scary function, but you can use it in this case to catch the \
evaluation of head and argument, and see that it results in a nice, simple ",
 StyleBox["FactorInteger[108]", "Input",
  FontSize->12],
 ", which is then evaluated.  I've taken the liberty of arranging the ",
 StyleBox["Trace", "Input",
  FontSize->12],
 " result in a column and coloring the head and argument evaluations just as \
above to make it clear what each evaluation chain is."
}], "Text",ExpressionUUID->"a4898d1c-f8ce-4905-8ded-4ae72dc633a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", " ", 
  RowBox[{
   StyleBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1", "*", "FactorInteger"}], " ", "+", " ", "0"}], ")"}],
    FontColor->RGBColor[1, 0, 0]], "  ", 
   StyleBox["[",
    SpanMinSize->3,
    SpanMaxSize->3], " ", 
   StyleBox[
    RowBox[{
     RowBox[{"2", "^", "2"}], " ", "*", " ", 
     RowBox[{"3", "^", "3"}]}],
    FontColor->RGBColor[0, 0, 1]], " ", 
   StyleBox["]",
    SpanMinSize->3,
    SpanMaxSize->3]}], 
  StyleBox[" ",
   SpanMinSize->3,
   SpanMaxSize->3], "]"}]], "Input",ExpressionUUID->"365bd9af-248c-493a-97cb-\
cd1d8841cbc4"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          TagBox[
           RowBox[{"1", " ", "FactorInteger"}],
           HoldForm], ",", 
          TagBox["FactorInteger",
           HoldForm]}], "}"}], ",", 
        TagBox[
         RowBox[{"FactorInteger", "+", "0"}],
         HoldForm], ",", 
        TagBox["FactorInteger",
         HoldForm]}], "}"}],
      FontWeight->"Bold",
      FontColor->RGBColor[1, 0, 0]]},
    {
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          TagBox[
           SuperscriptBox["2", "2"],
           HoldForm], ",", 
          TagBox["4",
           HoldForm]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          TagBox[
           SuperscriptBox["3", "3"],
           HoldForm], ",", 
          TagBox["27",
           HoldForm]}], "}"}], ",", 
        TagBox[
         RowBox[{"4", " ", "27"}],
         HoldForm], ",", 
        TagBox["108",
         HoldForm]}], "}"}],
      FontWeight->"Bold",
      FontColor->RGBColor[0, 0, 1]]},
    {
     TagBox[
      StyleBox[
       RowBox[{"FactorInteger", "[", "108", "]"}],
       FontWeight->"Bold"],
      HoldForm]},
    {
     TagBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "}"}],
      HoldForm]}
   },
   BaselinePosition->Top,
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[1.2]}, 
       Offset[0.2]}}],
  Grid]], "Output",
 CellEditDuplicate->False,
 GridBoxOptions->{
 GridBoxAlignment->{
  "Columns" -> {{Left}}, 
   "Rows" -> {{
     Baseline}}}},ExpressionUUID->"da83fae7-559d-4e53-b51a-997ec11cc9fe"]
}, Open  ]],

Cell[TextData[{
 StyleBox["\nThe point of this is to get you thinking of each input, and each \
statement in your programs, as having two stages:  the original stage that \
you typed (or constructed), and the reduced stage where arguments have been \
evaluated.  And to remember that the function isn't called until the second \
stage, so it ",
  FontVariations->{"Underline"->True}],
 StyleBox["doesn't know",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 StyleBox[" what the original form was.\n",
  FontVariations->{"Underline"->True}]
}], "Text",
 FontSize->16,
 FontWeight->"Bold",ExpressionUUID->"136eac25-851e-4354-a9cf-286b196d616d"],

Cell[TextData[{
 "   There are cases where you really want f to receive the arguments as \
given by the user or the programmer, not the pre-processed, i.e. evaluated, \
form.  Since the default behavior of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " language interpreter is to evaluate everything in sight until nothing more \
changes, you need to use non-default techniques to prevent evaluation.\n\n\
Sometimes you want to send an argument into the function unevaluated.  For \
instance, when typesetting, or analyzing some code, you might want to compute \
",
 StyleBox["Length", "Input",
  FontSize->12],
 " of the expression ",
 StyleBox["Print[1, 2, 3]", "Input",
  FontSize->12],
 ", or use ",
 StyleBox["Cases", "Input",
  FontSize->12],
 " to extract the numbers from the mixed sum ",
 StyleBox["1 + 3.5 + Pi + x + (3 - I)^2", "Input",
  FontSize->12],
 ".\n\nSometimes you want the return value of the function to remain \
unevaluated until you can do something else with it.\n\nThat is the subject \
of this talk."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"876478c3-f0c1-46ea-8e45-\
5ff78d64ca9d"],

Cell["\<\


\
\>", "Text",
 CellDingbat->None,ExpressionUUID->"66f9d8bd-2538-4d03-beb8-521cf5f57746"],

Cell[TextData[{
 "Advanced note:  As you may know, in addition to evaluating head and \
arguments, the evaluator does other pre-processing to the original input, \
such as flatten ",
 StyleBox["Sequence,", "Input",
  FontSize->12],
 " and invoke upvalues on arguments.  These things can all alter the original \
input before the main function ever gets called.  You might want to prevent \
some or all of these alterations."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"2f0debd7-7f71-4c6b-ae8a-\
023a65d87b5d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
An unevaluated expression is just an expression, a tree structure like \
anything else.\
\>", "Subsubsection",ExpressionUUID->"da457a7d-6e0c-4bc4-b98d-f7b7e0a7bb4f"],

Cell["\<\
Before we start, I want to mention that an \"unevaluated\" expression is just \
an expression.  It's a tree structure that you can draw and see with your \
eyes:\
\>", "Text",ExpressionUUID->"bd94091e-50c5-4759-99f4-a765e399057b"],

Cell[BoxData[
 RowBox[{"Plus", "[", 
  RowBox[{"3", ",", " ", "4", ",", " ", 
   RowBox[{"Times", "[", 
    RowBox[{"5", ",", " ", "6"}], "]"}], ",", " ", 
   RowBox[{"Power", "[", 
    RowBox[{"5", ",", " ", "2"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"81ee6f5b-3f97-464b-8ae5-7d1619b8d7ec"],

Cell[TextData[{
 "For a moment, let yourself forget that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " would yank this expression out of your hands and give you back the integer \
62.  Imagine that you can manipulate it as an ",
 StyleBox["abstract structure",
  FontSlant->"Italic"],
 " whose heads and elements are meaningless.  That's what you're going to \
learn to do in this talk.\n\nSince this expression is structurally the same \
as more stable ones like {3, 4, {5, 6}, {5, 2}}, programming commands that \
you are familiar with can operate on it, as long as you can see to it that \
the expression arrives unaltered at the code of the function.\n\nThere's \
nothing scary about operating on these; it's just a little harder to keep the \
evaluator's hands off them for a moment until you're ready for them to \
evaluate."
}], "Text",ExpressionUUID->"7046ef4c-c0ed-4ca0-bd80-28f3499a9f02"]
}, Closed]],

Cell[CellGroupData[{

Cell["Simple uses of Unevaluated", "Subsubsection",ExpressionUUID->"345f024f-84ff-4288-aaba-fde60a58d886"],

Cell[TextData[{
 "Let's look at some simple uses of ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"f08259f4-9481-4f2a-bbba-d7544ce729ae"],

Cell[TextData[{
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " is a wrapper on arguments that is simply a signal to the evaluator to \
avoid evaluating the argument."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"7150fe72-99b6-4a0d-8045-\
c8a1d676d122"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", " ", 
  RowBox[{"Unevaluated", "[", 
   RowBox[{"Plus", "[", 
    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "]"}], "]"}], " ", 
  "]"}]], "Input",ExpressionUUID->"36ca5f5f-2e2f-42ea-a7b1-c5ce7fb205c2"],

Cell[BoxData["Plus"], "Output",ExpressionUUID->"7c59333b-83b3-424d-ae43-11bc1e361d4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", " ", 
  RowBox[{"Unevaluated", "[", 
   RowBox[{"Print", "[", 
    RowBox[{"\"\<spam\>\"", ",", " ", "\"\<and\>\"", ",", "\"\<eggs\>\""}], 
    "]"}], "]"}], " ", "]"}]], "Input",ExpressionUUID->"58f1d76c-2cb8-4cd9-\
9e1d-cc2af58b5b46"],

Cell[BoxData["3"], "Output",ExpressionUUID->"53e414d5-52a5-41a6-ada4-8889a0a4064d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToString", "[", " ", 
  RowBox[{"Unevaluated", "[", 
   RowBox[{
    RowBox[{"2", "^", "2"}], " ", "*", " ", 
    RowBox[{"3", "^", "3"}], " ", "*", " ", 
    RowBox[{"5", "^", "5"}]}], "]"}], " ", "]"}]], "Input",ExpressionUUID->\
"711c2c0b-0caf-4124-8804-71882f72558f"],

Cell[BoxData["\<\" 2  3  5\\n2  3  5\"\>"], "Output",ExpressionUUID->"6288e067-fa65-42c0-953f-31a553363877"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", "+", "3.5", "+", "Pi", "+", "x", "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"3", "-", "I"}], ")"}], "^", "2"}]}], "]"}], ",", " ", 
   RowBox[{"_Integer", " ", "|", " ", "_Rational", " ", "|", " ", "_Real"}]}],
   "]"}]], "Input",ExpressionUUID->"cc31d225-49d3-4df4-ab20-9eb6976d3b9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3.5`"}], "}"}]], "Output",ExpressionUUID->"10c41073-d93b-4b9d-9426-246a5ef3519a"]
}, Open  ]],

Cell[TextData[{
 "It is ",
 StyleBox["transparent",
  FontSlant->"Italic"],
 " to the function receiving the argument.  You can think of it as a shuttle \
giving the argument safe transport to the function's code, keeping the \
evaluator away.  ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " vanishes before the argument is fed to the function, since its purpose is \
fulfilled."
}], "Text",ExpressionUUID->"734a0e78-cf5d-4772-b3c8-f8407d563d6c"],

Cell["Mapping a function across an unevaluated list of elements:", "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"b7bbec51-bdf8-434c-9192-\
b977c5af011a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"77", ",", " ", "88", ",", " ", "99"}], "}"}]}], ";"}]], "Input",E\
xpressionUUID->"3ab5a874-99fd-4590-bd1b-4ab3b010ff17"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Context", ",", " ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}], "]"}]}], " ", 
  "]"}]], "Input",ExpressionUUID->"c1a146fa-3869-4d2c-8adc-0c9dcb389a1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Global`\"\>", ",", "\<\"Global`\"\>", ",", "\<\"Global`\"\>"}],
   "}"}]], "Output",ExpressionUUID->"e82c0064-a8a2-47d6-b060-e02319565559"]
}, Open  ]],

Cell[TextData[{
 "Without the ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 ", the x, y, and z would become integers before ",
 StyleBox["Context", "Input",
  FontSize->12],
 " could act on them:"
}], "Text",
 CellDingbat->None,ExpressionUUID->"f42d843f-4310-4ca4-b000-9eb98d173544"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Context", ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}]}], " ", "]"}]], "Input",\
ExpressionUUID->"cb33366d-4abc-431b-bf2c-7e4e58ac043e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Context", "::", "\<\"ssle\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Symbol, string, or HoldPattern[symbol] expected at \
position \\!\\(1\\) in \\!\\(Context[77]\\).\"\>"}]], "Message",ExpressionUUID\
->"422b3eb7-f37b-4879-bc9c-98e98ba3e0cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Context", "::", "\<\"ssle\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Symbol, string, or HoldPattern[symbol] expected at \
position \\!\\(1\\) in \\!\\(Context[88]\\).\"\>"}]], "Message",ExpressionUUID\
->"b29e6e4e-ed97-415b-900e-8ee3336ac6dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Context", "::", "\<\"ssle\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Symbol, string, or HoldPattern[symbol] expected at \
position \\!\\(1\\) in \\!\\(Context[99]\\).\"\>"}]], "Message",ExpressionUUID\
->"c5759ffa-2300-43d7-b25e-791fde416cda"],

Cell[BoxData[
 RowBox[{
  RowBox[{"General", "::", "\<\"stop\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Further output of \\!\\(Context :: \\\"ssle\\\"\\) will be \
suppressed during this calculation.\"\>"}]], "Message",ExpressionUUID->\
"d92eefc6-9391-4f2a-aa22-2847b832e83b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Context", "[", "77", "]"}], ",", 
   RowBox[{"Context", "[", "88", "]"}], ",", 
   RowBox[{"Context", "[", "99", "]"}]}], "}"}]], "Output",ExpressionUUID->\
"dda9423f-5aa9-4a36-862e-9a5f29097f06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Scan", "[", 
  RowBox[{"Information", ",", " ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"{", 
     RowBox[{"$Version", ",", " ", "$RecursionLimit"}], "}"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"f2bd5098-f6be-4cbd-8265-17db057b3336"],

Cell[BoxData["\<\"$Version is a string that represents the version of \
Mathematica you are running.\"\>"], "Print",ExpressionUUID->"3a26cbc4-9785-\
4df3-94d9-bbd298f941af"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{
      RowBox[{"Attributes", "[", "$Version", "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"Locked", ",", "Protected"}], "}"}]}]},
    {" "},
    {GridBox[{
       {
        RowBox[{
        "$Version", "=", "\<\"4.0 for Linux (September 21, 1999)\"\>"}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[$Version],
  Editable->False]], "Print",ExpressionUUID->"98471eb0-45ef-42a4-9792-\
ec629145d7e4"],

Cell[BoxData["\<\"$RecursionLimit gives the current limit on the number of \
levels of recursion that Mathematica can use.\"\>"], "Print",ExpressionUUID->\
"b9158f38-5bcf-4cbe-bb26-d027add3b04a"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{"$RecursionLimit", "=", "1024"}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[$RecursionLimit],
  Editable->False]], "Print",ExpressionUUID->"150bc301-588c-439d-932b-\
d4ed4b357885"]
}, Open  ]],

Cell[TextData[{
 "If you've got a set of things inside ",
 StyleBox["Hold", "Input",
  FontSize->12],
 ", and you want to map a non-holding function such as ",
 StyleBox["Head", "Input",
  FontSize->12],
 " across them, then you can use the idiom:\n\n",
 StyleBox["   f /@ Unevaluated /@ Hold[e1, ..., en]", "Input",
  FontSize->12],
 "\n\nwhich will form this frozen expression, with the calls to f colored in \
blue:\n\n",
 StyleBox["   Hold[ ", "Input",
  FontSize->12],
 StyleBox["f[Unevaluated[e1]]", "Input",
  FontSize->12,
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[", ..., ", "Input",
  FontSize->12],
 StyleBox["f[Unevaluated[en]]", "Input",
  FontSize->12,
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" ]", "Input",
  FontSize->12],
 "\n\nNow it is safe to let the elements evaluate.  You could do this by \
changing the outer head to List.  Here is a small example:"
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"54df2cb3-173f-40b1-b70e-\
79732acdc238"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", " ", "@@", "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{"Head", ",", " ", 
    RowBox[{"Map", "[", 
     RowBox[{"Unevaluated", ",", "\[IndentingNewLine]", 
      RowBox[{"Hold", "[", 
       RowBox[{
        RowBox[{"Print", "[", "1", "]"}], ",", " ", 
        RowBox[{"2", " ", "+", " ", "3"}]}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}], "]"}]}]], "Input",ExpressionUUID->"a33ba315-09af-4594-8642-\
ecb7a7079195"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Print", ",", "Plus"}], "}"}]], "Output",ExpressionUUID->"6d284d30-\
afc1-46ba-bd38-ae1c74402157"]
}, Open  ]],

Cell[TextData[{
 "You can use the more complex structural and functional programming commands \
that you enjoy, too.  They don't care that the argument arrives unevaluated; \
it's just a structure to them.  Here's an example of ",
 StyleBox["Through", "Input",
  FontSize->12],
 ", to produce a list of all the kinds of assignments made to a symbol:"
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"7bc3ff62-d6d6-4e34-ab0d-\
c5ad17d998f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$ValueTypes", "=", 
   RowBox[{"{", 
    RowBox[{
    "Attributes", ",", "DefaultValues", ",", "DownValues", ",", 
     "FormatValues", ",", "Messages", ",", "NValues", ",", "OwnValues", ",", 
     "Options", ",", "SubValues", ",", "UpValues"}], "}"}]}], ";"}]], "Input",\
ExpressionUUID->"470467ab-228f-4bdd-bb1a-06a5f8439af0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", " ", "$Version"}]], "Input",ExpressionUUID->"98aa969b-3c13-4c0b-b584-4b8d07938732"],

Cell[BoxData["\<\"$Version is a string that represents the version of \
Mathematica you are running.\"\>"], "Print",ExpressionUUID->"fc9b406a-8e21-\
4627-97df-de7973b08458"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{
      RowBox[{"Attributes", "[", "$Version", "]"}], "=", 
      RowBox[{"{", 
       RowBox[{"Locked", ",", "Protected"}], "}"}]}]},
    {" "},
    {GridBox[{
       {
        RowBox[{
        "$Version", "=", "\<\"4.0 for Linux (September 21, 1999)\"\>"}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[$Version],
  Editable->False]], "Print",ExpressionUUID->"5318ed22-bab9-4652-b0c3-\
048405f41cd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", " ", 
  RowBox[{"$ValueTypes", "[", 
   RowBox[{"Unevaluated", "[", "$Version", "]"}], "]"}], " ", "]"}]], "Input",\
ExpressionUUID->"aaddb259-50d0-43eb-8c23-03b47325f935"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Locked", ",", "Protected"}], "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"HoldPattern", "[", 
      RowBox[{"$Version", "::", "\<\"usage\"\>"}], "]"}], 
     "\[RuleDelayed]", "\<\"$Version is a string that represents the version \
of Mathematica you are running.\"\>"}], "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"HoldPattern", "[", "$Version", "]"}], 
     "\[RuleDelayed]", "\<\"4.0 for Linux (September 21, 1999)\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",ExpressionUUID->"9cfef1ef-8106-4f4d-\
94bc-12cab867554d"]
}, Open  ]],

Cell["\<\
It's easier to read if we make a match-up and display it as a column:\
\>", "Text",ExpressionUUID->"0d8fe710-f85f-4513-a68d-ebbd26fc3697"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Thread", "[", 
   RowBox[{"$ValueTypes", " ", "\[Rule]", " ", 
    RowBox[{"Through", "[", 
     RowBox[{"$ValueTypes", " ", "@", " ", 
      RowBox[{"Unevaluated", "[", "$Version", "]"}]}], "]"}]}], "]"}], " ", "//",
   "ColumnForm"}]], "Input",ExpressionUUID->"2517efa6-4326-45d8-a81d-\
f8c1028c81b0"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{"Attributes", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Locked", ",", "Protected"}], "}"}]}]},
    {
     RowBox[{"DefaultValues", "\[Rule]", 
      RowBox[{"{", "}"}]}]},
    {
     RowBox[{"DownValues", "\[Rule]", 
      RowBox[{"{", "}"}]}]},
    {
     RowBox[{"FormatValues", "\[Rule]", 
      RowBox[{"{", "}"}]}]},
    {
     RowBox[{"Messages", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"$Version", "::", "\<\"usage\"\>"}], "]"}], 
        "\[RuleDelayed]", "\<\"$Version is a string that represents the \
version of Mathematica you are running.\"\>"}], "}"}]}]},
    {
     RowBox[{"NValues", "\[Rule]", 
      RowBox[{"{", "}"}]}]},
    {
     RowBox[{"OwnValues", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"HoldPattern", "[", "$Version", "]"}], 
        "\[RuleDelayed]", "\<\"4.0 for Linux (September 21, 1999)\"\>"}], 
       "}"}]}]},
    {
     RowBox[{"Options", "\[Rule]", 
      RowBox[{"{", "}"}]}]},
    {
     RowBox[{"SubValues", "\[Rule]", 
      RowBox[{"{", "}"}]}]},
    {
     RowBox[{"UpValues", "\[Rule]", 
      RowBox[{"{", "}"}]}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  ColumnForm[{
   Attributes -> {Locked, Protected}, DefaultValues -> {}, DownValues -> {}, 
    FormatValues -> {}, Messages -> {HoldPattern[
        MessageName[$Version, "usage"]] :> 
      "$Version is a string that represents the version of Mathematica you \
are running."}, NValues -> {}, 
    OwnValues -> {
     HoldPattern[$Version] :> "4.0 for Linux (September 21, 1999)"}, 
    Options -> {}, SubValues -> {}, UpValues -> {}}],
  Editable->False]], "Output",ExpressionUUID->"c311e382-102c-4e21-b8d9-\
c1b6cbe6ab42"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Unevaluated must be wrapper ",
 StyleBox["before argument evaluation",
  FontSlant->"Italic"],
 ", not after, else it isn't stripped"
}], "Subsubsection",ExpressionUUID->"b31d52a9-8301-48ca-8b7e-a1463dbcfcc0"],

Cell[TextData[{
 "Recall our discussion of the over-arching evaluator, and the fact that your \
inputs and commands have two stages:  their original form, and the reduced \
form with arguments all evaluated.\n\n",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " is not meant to be a function or stable data type.  It is to be used as a \
wrapper on an argument ",
 StyleBox["in stage 1",
  FontSlant->"Italic"],
 ", before argument evaluation.  It is a ",
 StyleBox["signal to the evaluator",
  FontSlant->"Italic"],
 " to suppress the usual evaluation of that argument.\n\n",
 StyleBox["   f[1, Unevaluated[2 + 2^2], 3]", "Input",
  FontSize->12],
 "\n\nOnce the evaluator has made a note not to evaluate that argument, ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 "'s purpose is fulfilled, so it vanishes before the argument is actually fed \
to f.  This is in contrast to ",
 StyleBox["Hold", "Input",
  FontSize->12],
 ", which is an actual data type, if you will, and persists as a head until \
you discard it (with ",
 StyleBox["ReleaseHold", "Input",
  FontSize->12],
 " or however you like)."
}], "Text",ExpressionUUID->"ff6d4703-c2bb-458d-b4ea-784e0b3297fe"],

Cell[TextData[{
 "For instance, I can extract the head of a sum and get ",
 StyleBox["Plus", "Input",
  FontSize->12],
 ", as I expect:"
}], "Text",ExpressionUUID->"7c60d6f5-4a50-4c41-b1b3-feda8c1e9910"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", " ", 
  RowBox[{"Unevaluated", "[", 
   RowBox[{"1", "+", "3.5", "+", "Pi", "+", "x", "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"3", "-", "I"}], ")"}], "^", "2"}]}], "]"}], " ", 
  "]"}]], "Input",ExpressionUUID->"a3d9e15a-a282-4e1a-b499-e42cf2afc323"],

Cell[BoxData["Plus"], "Output",ExpressionUUID->"d68778f3-7188-4cac-b173-73265ae15247"]
}, Open  ]],

Cell[TextData[{
 "But if I had used ",
 StyleBox["Hold", "Input",
  FontSize->12],
 " instead of ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 ", it would not have worked right:"
}], "Text",ExpressionUUID->"b0e228a1-d9b3-462f-ba01-e0b78f96e327"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", " ", 
  RowBox[{"Hold", "[", 
   RowBox[{"1", "+", "3.5", "+", "Pi", "+", "x", "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"3", "-", "I"}], ")"}], "^", "2"}]}], "]"}], " ", 
  "]"}]], "Input",ExpressionUUID->"7c493b7c-af3d-4f24-87fb-097295294bb8"],

Cell[BoxData["Hold"], "Output",ExpressionUUID->"a7906af3-c3c1-4fc9-88cc-0b12c4c18d8a"]
}, Open  ]],

Cell[TextData[{
 "Those of you who have experimented with ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " have found that in some situations it doesn't vanish.  This makes it seem \
confusing and inconsistent, like ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 ".\n\nThe least confusing situation where ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " persists is when it is the outermost head in the output.  This is not too \
surprising, since it's not an argument of anything."
}], "Text",ExpressionUUID->"7aa53ab3-fbf4-4a14-bd97-f9fc9441a1c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Unevaluated", "[", " ", 
  RowBox[{
   RowBox[{"Print", "[", "1", "]"}], " ", "/", " ", 
   RowBox[{"2", "^", "3"}]}], " ", "]"}]], "Input",ExpressionUUID->"d96e4300-\
12fa-4a43-b75d-01b1553db091"],

Cell[BoxData[
 RowBox[{"Unevaluated", "[", 
  FractionBox[
   RowBox[{"Print", "[", "1", "]"}], 
   SuperscriptBox["2", "3"]], "]"}]], "Output",ExpressionUUID->"73171013-fc7f-\
4cae-96c1-8221f807de77"]
}, Open  ]],

Cell[TextData[{
 "Another case where ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " is when it's an argument of a head that does nothing.  List is an example \
of an inert data type that performs no action:"
}], "Text",ExpressionUUID->"5b38cf79-ac39-4cfc-8273-f924646cd33f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", " ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"2", "^", "2"}], "]"}]}], "}"}]], "Input",ExpressionUUID->\
"a7d77ef8-05c5-49c0-af6b-33a463aaa697"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"Unevaluated", "[", 
    SuperscriptBox["2", "2"], "]"}]}], "}"}]], "Output",ExpressionUUID->\
"7245c1e2-58ff-412a-91cd-1d708eeac2f6"]
}, Open  ]],

Cell["So is an arbitrary symbol with no definitions:", "Text",ExpressionUUID->"8a3d7202-e3da-4b08-9c48-e032cadea9a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", " ", "+", " ", "0"}], "]"}], ",", " ", "2"}], "]"}]], "Input",\
ExpressionUUID->"8ac96c4e-0cd0-4efa-82c6-0ce517bf8296"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", "+", "0"}], "]"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"224a6026-301a-40fd-bd2d-0e470a442a29"]
}, Open  ]],

Cell[TextData[{
 "When no code is invoked to \"use it up\", ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " just sits there unused."
}], "Text",ExpressionUUID->"a91b99b3-1639-4102-b88a-39ac3ad69cc0"],

Cell[TextData[{
 "\nThe subtle and confusing situation where ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " persists is when an argument did not originally have a head of ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 ", but became ",
 StyleBox["Unevaluated[whatever]", "Input",
  FontSize->12],
 " after argument evaluation finished.  In terms of the two stages of each \
input:\n\nstage 1 (original input):  ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " vanishes, nicely.\n\nstage 2 (after arg evaluation):  ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " persists, annoyingly."
}], "Text",ExpressionUUID->"f74026f2-0d7a-48d8-bc1e-8eabd2d74f40"],

Cell[TextData[{
 "In this example, the original argument of ",
 StyleBox["Print", "Input",
  FontSize->12],
 " has head ",
 StyleBox["ToExpression", "Input",
  FontSize->12],
 ".  ",
 StyleBox["ToExpression", "Input",
  FontSize->12],
 " yields ",
 StyleBox["Unevaluated[1 + 2]", "Input",
  FontSize->12],
 " after evaluation, but that's too late:"
}], "Text",ExpressionUUID->"66621435-b95d-4171-b5c3-39bdc48704ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Print", "[", " ", 
  RowBox[{"ToExpression", "[", "\"\<Unevaluated[1 + 2]\>\"", "]"}], " ", 
  "]"}]], "Input",ExpressionUUID->"28ca6e1e-e9b8-4435-8652-fabcb4450994"],

Cell[BoxData[
 RowBox[{"Unevaluated", "[", 
  RowBox[{"1", "+", "2"}], "]"}]], "Print",ExpressionUUID->"f11f29ff-451e-\
4071-ab32-71b393258a60"]
}, Open  ]],

Cell["\<\
In this example, the argument's original head is a complex Function[...] \
expression, not even a symbol.  It yields Unevaluated[77 + 99^2], but again\
\>", "Text",ExpressionUUID->"395b336c-06d0-453b-b213-faa3e11c98f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", " ", 
  StyleBox[
   RowBox[{
    RowBox[{
     RowBox[{"Unevaluated", "[", 
      RowBox[{"#1", " ", "+", " ", 
       RowBox[{"#2", "^", "2"}]}], "]"}], "&"}], " ", "[", 
    RowBox[{"77", ",", " ", "99"}], "]"}], "Input",
   FontSize->12], 
  StyleBox[" ", "Input",
   FontSize->12], 
  StyleBox["]", "Input",
   FontSize->12]}]], "Input",ExpressionUUID->"620434c3-0b19-4505-a4f8-\
b4b60db2d0d5"],

Cell[BoxData["Unevaluated"], "Output",ExpressionUUID->"4d827fe0-c0a7-473b-b034-14c70f831f05"]
}, Open  ]],

Cell[TextData[{
 "If I give an argument which, ",
 StyleBox["after evaluation",
  FontSlant->"Italic"],
 ", will become something whose head is ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " - ",
 StyleBox["Unevaluated[arg]", "Input",
  FontSize->12],
 " - and it won't work.\n\nThis subtle distinction of stages of your input \
has tripped up almost every ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " programmer I know, no matter how advanced."
}], "Text",ExpressionUUID->"bdbeec7d-a948-41d8-a290-1443fe92df6b"],

Cell[TextData[{
 "Since in real programs, you often have to construct the arguments from \
pieces, and can't just write them out in final form in the function call, \
we'll have to learn methods of making sure the ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " is literally present as a wrapper in the function call."
}], "Text",ExpressionUUID->"231520c6-d01c-40e1-ad19-8e434da094fd"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Several specific techniques", "Section",ExpressionUUID->"a04cba3f-84d9-4542-9b3f-fa0046854e02"],

Cell[CellGroupData[{

Cell["Manipulations", "Subsection",ExpressionUUID->"6054bafb-cc12-4c1c-8d35-623c944d2f4e"],

Cell[CellGroupData[{

Cell["\<\
Use Function[] to make a temporary holding version of a function\
\>", "Subsubsection",ExpressionUUID->"b68b17d6-790c-46c7-84a7-ce129151e0ef"],

Cell[TextData[{
 "Most built-in and user-defined functions let their arguments evaluate by \
default.  Suppose for a particular line of code, you need a version of ",
 StyleBox["Head", "Input",
  FontSize->12],
 " that doesn't evaluate its arguments.  One way, of course, would be to \
temporarily give ",
 StyleBox["Head", "Input",
  FontSize->12],
 " the ",
 StyleBox["HoldFirst", "Input",
  FontSize->12],
 " attribute, but it's usually unsafe to change the definition of basic \
built-in functions.  Fortunately, the language enables you to give pure \
functions the same attributes you would give to symbols.  Here is the \
template for constructing a temporary holding version:\n\n",
 StyleBox["  ", "Input",
  FontSize->12],
 Cell[BoxData[
  RowBox[{"MyHead", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{"e", ",", " ", 
     RowBox[{"Head", "[", " ", 
      RowBox[{"Unevaluated", "[", "e", "]"}], " ", "]"}], ",", " ", 
     "HoldFirst"}], "]"}]}]], "Input",
  FontSize->12,ExpressionUUID->"314e3d6d-eb07-439f-966b-e56a38323e54"],
 "\n\nThis is essentially the same as the more familiar, simpler pure \
function\n\n",
 StyleBox["  MyHead = Head[#]&", "Input",
  FontSize->12],
 "\n\nbut it has to use the 3-argument form of ",
 StyleBox["Function", "Input",
  FontSize->12],
 " with a named variable in order to give it the ",
 StyleBox["HoldFirst", "Input",
  FontSize->12],
 " attribute."
}], "Text",ExpressionUUID->"f64ea6f1-083c-4661-ae5d-7aecbdc7c213"],

Cell[TextData[{
 "Now you can use ",
 StyleBox["MyHead", "Input",
  FontSize->12],
 " just like you would use ",
 StyleBox["Head", "Input",
  FontSize->12],
 ".  If the argument comes in unevaluated, it will remain that way.  For \
instance:"
}], "Text",ExpressionUUID->"0d8875b3-5e71-43c6-afd7-26a08ad7e7e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MyHead", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{"e", ",", " ", 
     RowBox[{"Head", "[", " ", 
      RowBox[{"Unevaluated", "[", "e", "]"}], " ", "]"}], ",", " ", 
     "HoldFirst"}], "]"}]}], ";"}]], "Input",ExpressionUUID->"b4a32a5e-47ce-\
4cfc-bf0e-dcaa045ccd86"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MyHead", " ", "/@", " ", 
  RowBox[{"Unevaluated", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Print", "[", "1", "]"}], ",", " ", 
     RowBox[{"2", " ", "+", " ", 
      RowBox[{"2", "^", "2"}]}], ",", " ", 
     RowBox[{"x", " ", "=", " ", "3"}]}], "}"}], "]"}]}]], "Input",ExpressionU\
UID->"4d5db8e5-8cd4-4578-911a-f1407874b851"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Print", ",", "Plus", ",", "Set"}], "}"}]], "Output",ExpressionUUID->\
"475ca23c-6950-46fd-9e13-8b619c613a47"]
}, Open  ]],

Cell[TextData[{
 "There's no need to give the function a name; I just did that to make the \
example more concise.  Usually you use ",
 StyleBox["Function[]", "Input",
  FontSize->12],
 " because you want to construct one-shot operators on the fly, to use in a \
single line of code."
}], "Text",ExpressionUUID->"2f99c7f2-9e93-4fa7-8ec8-2090716273dc"],

Cell["Here's an example of a held list of elements:", "Text",ExpressionUUID->"e24cd9fe-6f0e-4b43-9e48-5c1e751bf475"],

Cell[BoxData[
 RowBox[{
  RowBox[{"heldElems", " ", "=", " ", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"Print", "[", "1", "]"}], ",", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"2", " ", "+", " ", "3"}], "]"}], ",", " ", 
     RowBox[{"0", " ", "+", " ", "1"}], ",", " ", 
     RowBox[{"1", " ", "+", " ", "2"}], ",", " ", 
     RowBox[{"2", " ", "+", " ", "3"}], ",", " ", 
     RowBox[{"0", "*", "1"}], ",", " ", 
     RowBox[{"1", "*", "2", "*", "3"}], ",", " ", 
     RowBox[{"4", "^", "4"}]}], "]"}]}], ";"}]], "Input",ExpressionUUID->\
"aee37c16-66ab-411a-81f2-57e7c7e1a320"],

Cell[TextData[{
 "We want to group consecutive elements if they have the same head, i.e.\n\n\
",
 StyleBox["  ", "Input",
  FontSize->12],
 StyleBox["Head[#1] === Head[#2] &", "Input",
  FontSize->12],
 "\n\nBut this ordinary form of pure function will evaluate #1 and #2, which \
will destroy the structure in things like ",
 StyleBox["Print[1]", "Input",
  FontSize->12],
 " and ",
 StyleBox["0 + 1", "Input",
  FontSize->12],
 ", so we have to prevent that.  We do it by converting that function to the \
longer form:\n\n",
 StyleBox["  Function[{e1, e2}, Head[Unevaluated[e1]] === \
Head[Unevaluated[e2]], HoldAll]\n", "Input",
  FontSize->12],
 "\nAgain, it's essentially the same as the more familiar form, but it gives \
this construct the ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " attribute.  Here is the result in action:"
}], "Text",ExpressionUUID->"ef4803e2-5575-4ee4-ac37-01dbf467a960"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Split", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"Print", "[", "1", "]"}], ",", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"2", " ", "+", " ", "3"}], "]"}], ",", " ", 
     RowBox[{"0", " ", "+", " ", "1"}], ",", " ", 
     RowBox[{"1", " ", "+", " ", "2"}], ",", " ", 
     RowBox[{"2", " ", "+", " ", "3"}], ",", " ", 
     RowBox[{"0", "*", "1"}], ",", " ", 
     RowBox[{"1", "*", "2", "*", "3"}], ",", " ", 
     RowBox[{"4", "^", "4"}]}], "]"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"e1", ",", " ", "e2"}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"Head", "[", 
       RowBox[{"Unevaluated", "[", "e1", "]"}], "]"}], " ", "===", " ", 
      RowBox[{"Head", "[", 
       RowBox[{"Unevaluated", "[", "e2", "]"}], "]"}]}], ",", " ", 
     "HoldAll"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"575112eb-b2f9-4590-98f4-5cd7404363ed"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"Print", "[", "1", "]"}], ",", 
     RowBox[{"Print", "[", 
      RowBox[{"2", "+", "3"}], "]"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"0", "+", "1"}], ",", 
     RowBox[{"1", "+", "2"}], ",", 
     RowBox[{"2", "+", "3"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"0", " ", "1"}], ",", 
     RowBox[{"2", " ", "3"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    SuperscriptBox["4", "4"], "]"}]}], "]"}]], "Output",ExpressionUUID->\
"497bdb55-c438-4f9d-9c2e-fed65cbb6e74"]
}, Open  ]],

Cell["\<\
And here is an example where you want to test unevaluated products to see if \
they contain spurious zeros:\
\>", "Text",ExpressionUUID->"2d94cd4f-505f-4c8c-bbb0-e16e9bf6b575"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"e", ",", " ", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Unevaluated", "[", "e", "]"}], ",", " ", "0"}], "]"}], ",", 
     " ", "HoldFirst"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", " ", "*", " ", "y"}], ",", " ", 
      RowBox[{"u", " ", "*", " ", "0", " ", "*", " ", "v"}], ",", " ", 
      RowBox[{"1", " ", "*", " ", "2", " ", "*", " ", "0"}]}], "}"}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"cec3d519-f01d-4675-\
bf00-a0669d493557"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "True", ",", "True"}], "}"}]], "Output",ExpressionUUID\
->"b092c57f-47e6-4532-83a9-0644cdd61909"]
}, Open  ]],

Cell[TextData[{
 "If you want to delete the zeros so that the products don't evaluate to \
zero, you can make a holding ",
 StyleBox["DeleteCases", "Input",
  FontSize->12],
 ":"
}], "Text",ExpressionUUID->"c8f1d3b0-e628-446a-b14a-17360f2d9400"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"e", ",", " ", 
     RowBox[{"DeleteCases", "[", 
      RowBox[{
       RowBox[{"Unevaluated", "[", "e", "]"}], ",", " ", "0"}], "]"}], ",", 
     " ", "HoldFirst"}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", " ", "*", " ", "y"}], ",", " ", 
      RowBox[{"u", " ", "*", " ", "0", " ", "*", " ", "v"}], ",", " ", 
      RowBox[{"1", " ", "*", " ", "2", " ", "*", " ", "0"}]}], "}"}], "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"a27a3ea1-51ba-4932-\
b401-98c2d87d108b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", " ", "y"}], ",", 
   RowBox[{"u", " ", "v"}], ",", "2"}], "}"}]], "Output",ExpressionUUID->\
"fbadcaa4-2724-4db7-a4c5-f1a03851abf8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Replace is one of these easiest methods for transforming a structure, and \
it's sort of \"visual programming\", making it very clear to the reader what \
is happening.\
\>", "Subsubsection",ExpressionUUID->"673ef000-0908-4f7f-a9f0-504e8ec21e0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Replace", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"1", " ", "+", " ", "2"}], ",", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"3", ",", " ", "4"}], "]"}], ",", " ", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"x", "^", "2"}], ",", " ", "x"}], "]"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"h_", "[", "elems___", "]"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"{", 
     RowBox[{"h", ",", " ", "elems"}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", "1", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input",Expressio\
nUUID->"671790c4-7195-4f2a-9d37-e4ee304104a4"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Plus", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Print", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"D", ",", 
     SuperscriptBox["x", "2"], ",", "x"}], "}"}]}], "]"}]], "Output",Expressio\
nUUID->"7aeb534e-eee5-43e6-b7ed-d5fde835b737"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"patts", " ", "=", " ", 
  RowBox[{"Replace", "[", 
   RowBox[{
    RowBox[{"Unevaluated", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", " ", "+", " ", "2"}], ",", " ", 
       RowBox[{"Print", "[", 
        RowBox[{"3", ",", " ", "4"}], "]"}], ",", " ", 
       RowBox[{"D", "[", 
        RowBox[{
         RowBox[{"x", "^", "2"}], ",", " ", "x"}], "]"}]}], "}"}], "]"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"h_", "[", "___", "]"}], " ", "\[RuleDelayed]", " ", 
     RowBox[{"Blank", "[", "h", "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "1", "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",Expres\
sionUUID->"ed77f6bf-6e2f-4702-9f09-b35a357b7780"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"_Plus", ",", "_Print", ",", "_D"}], "}"}]], "Output",ExpressionUUID\
->"8448358d-cdf2-4329-928d-93aeefec1bd8"]
}, Open  ]],

Cell[TextData[{
 "Suppose I want to take the factored form of an integer and typeset it \
nicely as a product of prime powers.  Obviously, I can't let things like  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["3", "3"], " ", 
    SuperscriptBox["5", "5"]}], TraditionalForm]],ExpressionUUID->
  "4f99102b-4e6e-4ba5-93e9-4a7f76a609db"],
 " evaluate before I feed it to the typesetting function, since then it would \
become some integer and I'd lose the decomposed form."
}], "Text",ExpressionUUID->"672fee72-bd88-448f-92cc-2a9a4d2d1f23"],

Cell[BoxData[
 RowBox[{
  RowBox[{"n", " ", "=", " ", "79301169838123235887500"}], ";"}]], "Input",Exp\
ressionUUID->"260bd783-4c8d-4440-92e0-eb24d6605182"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factored", " ", "=", " ", 
  RowBox[{"FactorInteger", "[", "n", "]"}]}]], "Input",ExpressionUUID->\
"47f78c76-6199-4704-b056-70d7dbfccc98"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "11"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"972fce68-4dfa-4371-b1d3-18b7cef75984"]
}, Open  ]],

Cell[TextData[{
 "We're going to convert the inner lists to ",
 StyleBox["Power", "Input",
  FontSize->12],
 " and the outer list to ",
 StyleBox["Times", "Input",
  FontSize->12],
 ", so we need to have the ",
 StyleBox["Hold", "Input",
  FontSize->12],
 " wrapper in place before we start:"
}], "Text",ExpressionUUID->"636090fb-32e9-4f72-bb64-2e6d782337c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"held", " ", "=", " ", 
  RowBox[{"Hold", "[", " ", 
   RowBox[{"Evaluate", "[", "factored", "]"}], " ", "]"}]}]], "Input",Expressi\
onUUID->"b23c1c75-88ad-456f-9304-3a4bf2b82998"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "7"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"11", ",", "11"}], "}"}]}], "}"}], "]"}]], "Output",ExpressionUUI\
D->"dde092c1-e9ee-4f02-a860-f268664bfc8b"]
}, Open  ]],

Cell[TextData[{
 "First, I convert each ordered pair {p, a} to the prime power that it \
represents:  ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["p", "a"], TraditionalForm]],ExpressionUUID->
  "a8a7ab23-b6ff-4949-9281-7623318195a5"],
 "."
}], "Text",ExpressionUUID->"f57a638f-53c9-4569-887d-c29156d7250b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Replace", "[", 
  RowBox[{"held", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p_", ",", " ", "a_"}], "}"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"p", "^", "a"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]], "Input",Expressio\
nUUID->"3f7f96a9-b2ac-48b3-b9f1-5be7148e1377"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    SuperscriptBox["2", "2"], ",", 
    SuperscriptBox["3", "3"], ",", 
    SuperscriptBox["5", "5"], ",", 
    SuperscriptBox["7", "7"], ",", 
    SuperscriptBox["11", "11"]}], "}"}], "]"}]], "Output",ExpressionUUID->\
"736969d1-f8de-49d8-bc33-5c487146d6e2"]
}, Open  ]],

Cell[TextData[{
 "Now I change the list to a product and wrap a call to ",
 StyleBox["MakeBoxes", "Input",
  FontSize->12],
 " around it:"
}], "Text",ExpressionUUID->"d39b6919-70d1-4e1d-aaa4-5929100f38b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Replace", "[", 
  RowBox[{"%", ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Hold", "[", 
     RowBox[{"{", "elems___", "}"}], "]"}], " ", "\[RuleDelayed]", " ", 
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"Times", "[", "elems", "]"}], ",", " ", "TraditionalForm"}], 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->\
"b401bbae-255d-460e-998e-f8e039523380"],

Cell[BoxData[
 RowBox[{"RowBox", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"SuperscriptBox", "[", 
     RowBox[{"\<\"2\"\>", ",", "\<\"2\"\>"}], "]"}], ",", "\<\" \"\>", ",", 
    RowBox[{"SuperscriptBox", "[", 
     RowBox[{"\<\"3\"\>", ",", "\<\"3\"\>"}], "]"}], ",", "\<\" \"\>", ",", 
    RowBox[{"SuperscriptBox", "[", 
     RowBox[{"\<\"5\"\>", ",", "\<\"5\"\>"}], "]"}], ",", "\<\" \"\>", ",", 
    RowBox[{"SuperscriptBox", "[", 
     RowBox[{"\<\"7\"\>", ",", "\<\"7\"\>"}], "]"}], ",", "\<\" \"\>", ",", 
    RowBox[{"SuperscriptBox", "[", 
     RowBox[{"\<\"11\"\>", ",", "\<\"11\"\>"}], "]"}]}], "}"}], 
  "]"}]], "Output",ExpressionUUID->"1c78afe2-fe10-42ff-91b0-f2281d83e9c3"]
}, Open  ]],

Cell[TextData[{
 "Once you've constructed a typeset box expression, you can use ",
 StyleBox["DisplayForm", "Input",
  FontSize->12],
 " to see how it would display if you sent it to a front end output cell:"
}], "Text",ExpressionUUID->"34daebf3-a73a-4297-9e11-e2f6b3d00989"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DisplayForm", "[", "%", "]"}]], "Input",ExpressionUUID->"f1c598f3-e4e2-4e45-9a92-97414bebbf95"],

Cell[BoxData[
 TagBox[
  RowBox[{
   SuperscriptBox["2", "2"], " ", 
   SuperscriptBox["3", "3"], " ", 
   SuperscriptBox["5", "5"], " ", 
   SuperscriptBox["7", "7"], " ", 
   SuperscriptBox["11", "11"]}],
  DisplayForm]], "Output",ExpressionUUID->"e2ef4a8a-ba7b-4fbc-a870-\
0b5f2e938be2"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Function and With can stuff values into any expression, including held ones.\
\>", "Subsubsection",ExpressionUUID->"737bff85-7904-4837-8cb7-06413610d897"],

Cell[TextData[{
 "Both ",
 StyleBox["With", "Input",
  FontSize->12],
 " and ",
 StyleBox["Function", "Input",
  FontSize->12],
 " do direct substitution into the body, and for the most part they're \
equivalent ways of \"filling in a template\", the body being the template:"
}], "Text",ExpressionUUID->"b9059ae7-2005-4f0a-baf4-568f2a1c1aeb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"p", " ", "=", " ", "2"}], ",", " ", 
     RowBox[{"a", " ", "=", " ", "2"}], ",", " ", 
     RowBox[{"q", " ", "=", " ", "5"}], ",", " ", 
     RowBox[{"b", " ", "=", " ", "5"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"p", "^", "a"}], " ", "*", " ", 
      RowBox[{"q", "^", "b"}]}], "]"}], " ", "//", "DisplayForm"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"9309891b-670c-4bad-\
a508-05a7c076d390"],

Cell[BoxData[
 TagBox[
  RowBox[{
   SuperscriptBox["2", "2"], " ", 
   SuperscriptBox["5", "5"]}],
  DisplayForm]], "Output",ExpressionUUID->"6aa08da5-a3af-4c1e-9bf6-\
dcfbd1bbb9db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p", ",", " ", "a", ",", " ", "q", ",", " ", "b"}], "}"}], ",", 
    " ", 
    RowBox[{
     RowBox[{"MakeBoxes", "[", 
      RowBox[{
       RowBox[{"p", "^", "a"}], " ", "*", " ", 
       RowBox[{"q", "^", "b"}]}], "]"}], " ", "//", "DisplayForm"}]}], "]"}], 
  " ", "[", 
  RowBox[{"2", ",", " ", "2", ",", " ", "5", ",", " ", "5"}], "]"}]], "Input",\
ExpressionUUID->"a40866d9-8c45-4c4c-9fb1-1276e5eff12e"],

Cell[BoxData[
 TagBox[
  RowBox[{
   SuperscriptBox["2", "2"], " ", 
   SuperscriptBox["5", "5"]}],
  DisplayForm]], "Output",ExpressionUUID->"b5b8e35a-ec52-4bcd-9460-\
7680076fa558"]
}, Open  ]],

Cell[TextData[{
 "Why would you use ",
 StyleBox["With", "Input",
  FontSize->12],
 " or ",
 StyleBox["Function", "Input",
  FontSize->12],
 " to substitute in 2 and 5 when you could just type this?\n\n",
 StyleBox["  MakeBoxes[2^2 5^5]", "Input",
  FontSize->12],
 "\n\nAnswer:  p, a, q, and b are probably variables in a program you're \
writing, and you need to put their ",
 StyleBox["values",
  FontSlant->"Italic"],
 ", not their literal names, into the ",
 StyleBox["MakeBoxes", "Input",
  FontSize->12],
 " command.  You can't use ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 ", like this\n\n",
 StyleBox["  MakeBoxes[ Evaluate[p^a q^b] ]    (* does NOT work *)", "Input",
  FontSize->12],
 "\n\nbecause then the argument would collapse to an integer (besides, ",
 StyleBox["MakeBoxes", "Input",
  FontSize->12],
 " is ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " and doesn't respect ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 ").  You can't use ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " in deep subexpressions of a held argument, you can use it only on the \
whole argument\n\n",
 StyleBox["  MakeBoxes[ Evaluate[p]^Evaluate[a] * Evaluate[q]^Evaluate[b] ]  \
(* No *)", "Input",
  FontSize->12],
 "\n\nIn this situation, ",
 StyleBox["With", "Input",
  FontSize->12],
 " and ",
 StyleBox["Function", "Input",
  FontSize->12],
 " can jam those values in for you.  Since the initial values are probably \
those of variables in your program, here's an example of how you'd really use \
them in a program."
}], "Text",ExpressionUUID->"c96826e5-6848-4859-96f4-1797d881b923"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", " ", "=", " ", "a"}], ",", " ", 
     RowBox[{"b", " ", "=", " ", "b"}], ",", " ", 
     RowBox[{"c", " ", "=", " ", "c"}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MakeBoxes", "[", 
     RowBox[{
      RowBox[{"a", "^", "b"}], " ", "+", " ", 
      RowBox[{"c", "*", "a"}]}], "]"}], " ", "//", "DisplayForm"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",ExpressionUUID->"4dea7681-f660-4187-\
ab14-1fc2adee5bf4"],

Cell[BoxData[
 TagBox[
  RowBox[{
   SuperscriptBox["1", "2"], "+", 
   RowBox[{"3", " ", "1"}]}],
  DisplayForm]], "Output",ExpressionUUID->"a03c99e3-ee39-4dd3-8b18-\
02777c6c22bb"]
}, Open  ]],

Cell[TextData[{
 "Later, I'll show techniques for tagging arbitrary subexpressions for \
evaluation, in a function called ",
 StyleBox["EvaluateAt", "Input",
  FontSize->12],
 " (based on another new one called ",
 StyleBox["ReplaceAt", "Input",
  FontSize->12],
 ")."
}], "Text",ExpressionUUID->"5856d893-35f1-446a-b2e4-da1f795a7225"],

Cell["\<\

\
\>", "Text",ExpressionUUID->"acb91725-3f43-4b80-b279-0332403ee987"],

Cell[TextData[{
 "Something that you may not know is that ",
 StyleBox["With", "Input",
  FontSize->12],
 " initializations can use ':=' as well as '=', to cause the initialization \
not to evaluate.  For instance:"
}], "Text",ExpressionUUID->"03525342-4e60-484a-8993-1dd845bdf81d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"expr", " ", ":=", " ", 
     RowBox[{"a", " ", "+", " ", "b", " ", "+", " ", "c"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"expr", ",", " ", 
     RowBox[{"Length", "[", 
      RowBox[{"Unevaluated", "[", "expr", "]"}], "]"}]}], "}"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",ExpressionUUID->"1f81685d-7921-42a1-\
a79e-0b59d67910c9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6", ",", "3"}], "}"}]], "Output",ExpressionUUID->"fe54af95-a58a-4263-80ab-a076b1d56312"]
}, Open  ]],

Cell["\<\
It's true that if the local value of 'expr' is an unevaluated expression, \
then you could simply use that literal expression everywhere you need it \
instead of a local 'expr', but maybe it makes the code clearer if many places \
in a region of code all use exactly the same expression.  Some of them may \
need it unevaluated, some may be happy to let it evaluate.\
\>", "Text",ExpressionUUID->"d7c6bcd5-46d6-48bd-82b0-1e89662a3eb8"],

Cell["\<\

\
\>", "Text",ExpressionUUID->"a4b0c6b8-d812-455d-ac72-949d849897cf"],

Cell[TextData[{
 StyleBox["Advanced note\n",
  FontVariations->{"Underline"->True}],
 "The initializations in scoping constructs ",
 StyleBox["Module", "Input",
  FontSize->12],
 " and ",
 StyleBox["With", "Input",
  FontSize->12],
 " are not ",
 StyleBox["evaluated as calls",
  FontSlant->"Italic"],
 " to the ",
 StyleBox["Set", "Input",
  FontSize->12],
 " or ",
 StyleBox["SetDelayed", "Input",
  FontSize->12],
 " functions.  You can see this by either attaching a top-level trap to ",
 StyleBox["Set", "Input",
  FontSize->12],
 ", or by using ",
 StyleBox["Block", "Input",
  FontSize->12],
 " to temporarily disable ",
 StyleBox["Set", "Input",
  FontSize->12],
 ".  Either way, you'll see that ",
 StyleBox["Module", "Input",
  FontSize->12],
 " and ",
 StyleBox["With", "Input",
  FontSize->12],
 " accomplish initializations in a magical internal way, not by calling the \
top-level ",
 StyleBox["Set", "Input",
  FontSize->12],
 " function.\n\nStrangely, if you ask ",
 StyleBox["Trace", "Input",
  FontSize->12],
 " to report ",
 StyleBox["Set", "Input",
  FontSize->12],
 " evaluation chains, it ",
 "will report",
 " local variable initializations!  My best guess is that since we specify \
initializations with something that is ",
 StyleBox["syntactically",
  FontSlant->"Italic"],
 " ",
 StyleBox["Set[var, value]", "Input",
  FontSize->12],
 ", the evaluation chain for initialization is considered to begin with the \
expression ",
 StyleBox["Set[var, value]", "Input",
  FontSize->12],
 ", and this is good enough to convince ",
 StyleBox["Trace", "Input",
  FontSize->12],
 " that it is a call to ",
 StyleBox["Set", "Input",
  FontSize->12],
 ", even though technically some internal magic intervenes and performs \
assignments instead of letting ",
 StyleBox["Set", "Input",
  FontSize->12],
 " do it.\n\nI was tempted to consider this a bug, but one advantage - a \
significant one for kernel hackers - is that you can actually trap ",
 StyleBox["Set", "Input",
  FontSize->12],
 " with the familiar idiom for trapping internal functions, and not get \
yourself into infinite recursion trouble when you do ",
 StyleBox["Block[{$TrapSet = False}, ...]", "Input",
  FontSize->12],
 ".  But it is an odd inconsistency in the language that you use the ",
 StyleBox["syntax",
  FontSlant->"Italic"],
 " ",
 StyleBox["Set[var, value]", "Input",
  FontSize->12],
 " to specify an action that will not be carried out by ",
 StyleBox["Set", "Input",
  FontSize->12],
 ", but by inaccessible internal magic."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"2cf24acc-568e-4313-81c7-\
1ae98aa318e5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Unprotect", "[", "Set", "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$TrapSet", " ", "=", " ", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"assign_Set", " ", "/;", " ", "$TrapSet"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$TrapSet", " ", "=", " ", "False"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", " ", "@", " ", 
      RowBox[{"Unevaluated", "[", "assign", "]"}]}], ";", 
     "\[IndentingNewLine]", "assign"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"07470e79-05fd-4872-ba33-87b20906d2a0"],

Cell[BoxData[
 RowBox[{"$Line", "=", "85"}]], "Print",ExpressionUUID->"f4ed4dad-9857-4cc6-a432-a40e20e36a36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", " ", "=", " ", "3"}], "}"}], ",", " ", 
   RowBox[{"x", "^", "2"}]}], "]"}]], "Input",ExpressionUUID->"b8368dd7-5fa5-\
408e-8f24-3070f9944730"],

Cell[BoxData["9"], "Output",ExpressionUUID->"39469507-d6d2-45cc-a83e-47f1e7a7a0e3"],

Cell[BoxData[
 RowBox[{"$Line", "=", "86"}]], "Print",ExpressionUUID->"f11c75cd-0be5-42d1-a7a1-8629d7422d7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", " ", "=", " ", "3"}], "}"}], ",", " ", "x"}], "]"}]], "Input",\
ExpressionUUID->"482d5fed-f5a7-4a92-b390-86124494b24e"],

Cell[BoxData["3"], "Output",ExpressionUUID->"c3fc671e-98f5-4f4e-8fad-d3d273f20c0a"],

Cell[BoxData[
 RowBox[{"$Line", "=", "87"}]], "Print",ExpressionUUID->"07371c0b-d76e-4a37-84d0-f015194ff7ca"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"assign_Set", " ", "/;", " ", "$TrapSet"}], " ", "=."}]], "Input",Ex\
pressionUUID->"8502158c-f81b-46c1-8f84-68cd1a951d04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Set", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", " ", "=", " ", "3"}], "}"}], ",", " ", 
     RowBox[{
      RowBox[{"u", " ", "=", " ", "1"}], ";", " ", 
      RowBox[{"x", "^", "2"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"5c89108d-2973-421c-9f9d-bd7dbf4fa16e"],

Cell[BoxData["9"], "Output",ExpressionUUID->"db764dcc-d17c-47c1-87a5-6e2a7d5a08b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", " ", "u"}]], "Input",ExpressionUUID->"a11c7d1d-ebaf-47ba-b302-2a5bb28552a5"],

Cell[BoxData["\<\"Global`u\"\>"], "Print",ExpressionUUID->"ccc2c99a-822d-4ba1-b994-7c28c80322da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Trace", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", " ", "=", " ", "3"}], "}"}], ",", 
     RowBox[{"x", "^", "2"}]}], "]"}], ",", "Set", ",", 
   RowBox[{"TraceInternal", "\[Rule]", "True"}]}], "]"}]], "Input",ExpressionU\
UID->"085fca0f-32ba-4d61-93cd-d144f6e0f1a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    TagBox[
     RowBox[{"x$33", "=", "3"}],
     HoldForm], ",", 
    TagBox["3",
     HoldForm]}], "}"}], "}"}]], "Output",ExpressionUUID->"73bd6bec-b5ba-4559-\
a019-61247e52fa75"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Build up the arguments inside of Hold, then apply the function at the end\
\>", "Subsubsection",ExpressionUUID->"90d337a1-af5d-4754-ad73-bac774f5a698"],

Cell[TextData[{
 "Sometimes it takes several steps to go from the original input to the final \
arguments you want to pass to a function.  In this case, it's usually good to \
wrap the inputs in Hold at the beginning and work with them, then replace \
Hold with f at the end.  We saw this in the last section using Replace to \
make the result look more and more like what we want.  The final step is \
often one of these:\n\n",
 StyleBox["   f @@ Hold[e1, ..., en]\n   \n   ReleaseHold @ Hold[f[e1, ..., \
en]]", "Input",
  FontSize->12],
 "\n\nHere's an example where my function is given an integrand and the \
ranges of the variables.  A typical call will look like this:\n\n",
 StyleBox["  f[x + y + z, {x, -1, 1}, {y, -1, 1}, {z, -1, 1}]", "Input",
  FontSize->12],
 "\n\nBut I would like global values of the variables, if they should exist, \
not to interfere with computing this integral.  To prevent outside \
interference, you of course wrap the integral in Block with {x, y, z} local.  \
So I want to take the above and construct this expression:\n\n",
 StyleBox["  Block[{x, y, z},\n    Integrate[x + y + z, {x, -1, 1}, {y, -1, \
1}, {z, -1, 1}]\n  ]", "Input",
  FontSize->12],
 StyleBox["\n",
  FontSize->12],
 "\nThat looks awfully easy since I'm just wrapping a Block around the \
desired Integrate expression.\n\nBut remember that I don't know in advance \
what the variables are or how many there will be!  Here is the template for \
my function:\n\n",
 StyleBox["Attributes[f] = HoldAll;\n\nf[iterand_, iterSpecs:{_Symbol, \
__}...] := ...\n", "Input",
  FontSize->12],
 StyleBox["\n",
  FontSize->12],
 "Let's look at the steps in constructing the Block from the input, and not \
evaluating it until it's all assembled.  We'll give {x, y, z} values at the \
beginning, so that if we make a mistake and expose anything to the evaluator \
too early, we'll know."
}], "Text",ExpressionUUID->"7c698f05-bb95-4755-b9c7-90241a474ede"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"77", ",", " ", "88", ",", " ", "99"}], "}"}]}], ";"}]], "Input",E\
xpressionUUID->"25bec8d3-4591-4eab-81ba-8d57796eccce"],

Cell["\<\
First wrap the iterSpecs in Hold so we can safely extract the variable names.\
\
\>", "Text",ExpressionUUID->"973923ea-1897-4181-8aa4-5c4b7822a3b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heldIterSpecs", " ", "=", " ", 
  RowBox[{"Hold", "[", 
   StyleBox[
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"y", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"z", ",", " ", 
       RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "Input",
    FontSize->12], 
   StyleBox["]", "Input",
    FontSize->12]}]}]], "Input",ExpressionUUID->"b068fbcc-3469-46eb-bc56-\
45b2632b238c"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Output",ExpressionUUID->\
"26ffb4e0-8aef-43c1-bbf1-15c89a2276f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heldVars", " ", "=", " ", 
  RowBox[{"Replace", "[", 
   RowBox[{"heldIterSpecs", ",", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s_Symbol", ",", " ", "___"}], "}"}], " ", "\[RuleDelayed]", 
     " ", "s"}], ",", " ", 
    RowBox[{"{", "1", "}"}]}], "]"}]}]], "Input",ExpressionUUID->"bd881e92-\
2ec4-44f1-85b6-a0c24eabd75d"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"x", ",", "y", ",", "z"}], "]"}]], "Output",ExpressionUUID->\
"d508ddc5-dddd-4215-b5b8-c843edb5a592"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heldVarList", " ", "=", " ", 
  RowBox[{"Replace", "[", 
   RowBox[{"heldVars", ",", " ", 
    RowBox[{
     RowBox[{"Hold", "[", "elems___", "]"}], " ", "\[RuleDelayed]", " ", 
     RowBox[{"Hold", "[", 
      RowBox[{"{", "elems", "}"}], "]"}]}]}], "]"}]}]], "Input",ExpressionUUID\
->"e67ff924-2312-467a-aef6-ec434801c83e"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{"x", ",", "y", ",", "z"}], "}"}], "]"}]], "Output",ExpressionUUID->\
"c0373494-45e0-44a5-a9c4-925ef55fc35c"]
}, Open  ]],

Cell["\<\
This gives us argument 1 of Block, the local variable declaration.  Now we \
just need to append the body.  The body is simply Integrate[iterand, \
iterSpecs].  Those were the names of the pattern variables in f, so they'll \
get substituted directly in.  I write them out in my next input, since I'm in \
an interactive session, not inside my function body.\
\>", "Text",ExpressionUUID->"12625c6c-094e-4556-81af-fe424a534306"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{"heldVarList", ",", " ", 
   RowBox[{"Unevaluated", "[", "\[IndentingNewLine]", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{"x", " ", "+", " ", "y", " ", "+", " ", "z"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"x", ",", " ", 
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"y", ",", " ", 
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"z", ",", " ", 
        RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}], 
    "\[IndentingNewLine]", "]"}]}], "]"}]], "Input",ExpressionUUID->"2116f8b5-\
ee57-4061-b40a-5e7fa1c254cd"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "1"}], "1"], 
    RowBox[{
     SubsuperscriptBox["\[Integral]", 
      RowBox[{"-", "1"}], "1"], 
     RowBox[{
      SubsuperscriptBox["\[Integral]", 
       RowBox[{"-", "1"}], "1"], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"x", "+", "y", "+", "z"}], ")"}], 
       RowBox[{"\[DifferentialD]", "z"}], 
       RowBox[{"\[DifferentialD]", "y"}], 
       RowBox[{"\[DifferentialD]", "x"}]}]}]}]}]}], "]"}]], "Output",Expressio\
nUUID->"081337d3-a8f0-4aa0-82e6-c2ed2c783e33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", " ", "@@", " ", "%"}]], "Input",ExpressionUUID->"7a85e18e-82bd-4f61-8181-d75c23f1c2c9"],

Cell[BoxData["0"], "Output",ExpressionUUID->"f8cd8215-14e7-438f-93cb-0d5b0f6ba1c6"]
}, Open  ]],

Cell["\<\
Great, it works!  And we can see that it would have failed without our \
careful construction of Block:\
\>", "Text",ExpressionUUID->"2a1aa000-cbaa-4716-bbe0-d3c1a4b539a5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"x", " ", "+", " ", "y", " ", "+", " ", "z"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"y", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"z", ",", " ", 
     RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], "]"}]], "Input",ExpressionU\
UID->"39d6de43-c121-4907-a80b-7dd73662e030"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Integrate", "::", "\<\"ilim\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Invalid integration variable or limit(s) in \\!\\({77, \\(\
\\(-1\\)\\), 1}\\) .\"\>"}]], "Message",ExpressionUUID->"7c339177-34f3-460d-\
935b-d4b00e34fd5b"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", 
   RowBox[{"-", "1"}], "1"], 
  RowBox[{
   SubsuperscriptBox["\[Integral]", 
    RowBox[{"-", "1"}], "1"], 
   RowBox[{
    SubsuperscriptBox["\[Integral]", 
     RowBox[{"-", "1"}], "1"], 
    RowBox[{"264", 
     RowBox[{"\[DifferentialD]", "99"}], 
     RowBox[{"\[DifferentialD]", "88"}], 
     RowBox[{"\[DifferentialD]", "77"}]}]}]}]}]], "Output",ExpressionUUID->\
"2adffc63-be57-4428-a552-b67cb027e4f1"]
}, Open  ]],

Cell["Here it is all put together into a function:", "Text",ExpressionUUID->"48bfe184-46ea-4516-9e06-7d0d7a713f23"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", "HoldAll"}], ";"}],
    "\n"}], "Input",
  FontSize->12], "\n", 
 RowBox[{
  StyleBox[
   RowBox[{"f", "[", 
    RowBox[{"iterand_", ",", " ", 
     RowBox[{"iterSpecs", ":", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_Symbol", ",", " ", "__"}], "}"}], "..."}]}]}], "]"}], 
   "Input",
   FontSize->12], 
  StyleBox[" ", "Input",
   FontSize->12], 
  StyleBox[":=", "Input",
   FontSize->12], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"heldIterSpecs", ",", " ", "heldVars", ",", " ", "heldVarList"}],
      "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"heldIterSpecs", " ", "=", " ", 
      RowBox[{"Hold", "[", "iterSpecs", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"heldVars", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{"heldIterSpecs", ",", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s_Symbol", ",", " ", "___"}], "}"}], " ", "\[RuleDelayed]",
          " ", "s"}], ",", " ", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"heldVarList", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{"heldVars", ",", " ", 
        RowBox[{
         RowBox[{"Hold", "[", "elems___", "]"}], " ", "\[RuleDelayed]", " ", 
         RowBox[{"Hold", "[", 
          RowBox[{"{", "elems", "}"}], "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Block", " ", "@@", " ", 
      RowBox[{"Append", "[", 
       RowBox[{"heldVarList", ",", " ", 
        RowBox[{"Unevaluated", "[", "\[IndentingNewLine]", 
         RowBox[{"Integrate", "[", 
          RowBox[{"iterand", ",", " ", "iterSpecs"}], "]"}], 
         "\[IndentingNewLine]", "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",ExpressionUUID->"d2b7b0c4-f152-47f5-95bd-a57d70b50609"],

Cell["\<\
Here are some annoying assignments that will surely tell us if we evaluate \
anything:\
\>", "Text",ExpressionUUID->"8bd3bdb8-12b3-4553-b77f-3ec5966b89bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"x", ",", " ", "y", ",", " ", "z"}], "}"}], " ", ":=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Print", "[", "1", "]"}], ",", " ", 
    RowBox[{"Print", "[", "2", "]"}], ",", " ", 
    RowBox[{"Print", "[", "3", "]"}]}], "}"}]}]], "Input",ExpressionUUID->\
"39e1efed-1fc3-4c7c-af64-dd04b1b6c579"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Null", ",", "Null", ",", "Null"}], "}"}]], "Output",ExpressionUUID->\
"d3e7524c-6ffd-41d2-aade-0033f40b72b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["f", "Input",
   FontSize->12], 
  StyleBox["[", "Input",
   FontSize->12], 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], " ", "+", " ", 
    RowBox[{"y", "^", "2"}], " ", "+", " ", 
    RowBox[{"y", "^", "2"}]}], 
   StyleBox[",", "Input",
    FontSize->12], 
   StyleBox[" ", "Input",
    FontSize->12], 
   StyleBox[
    RowBox[{"{", 
     RowBox[{"x", ",", " ", 
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], "Input",
    FontSize->12], 
   StyleBox[",", "Input",
    FontSize->12], 
   StyleBox[" ", "Input",
    FontSize->12], 
   StyleBox[
    RowBox[{"{", 
     RowBox[{"y", ",", " ", 
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], "Input",
    FontSize->12], 
   StyleBox[",", "Input",
    FontSize->12], 
   StyleBox[" ", "Input",
    FontSize->12], 
   StyleBox[
    RowBox[{"{", 
     RowBox[{"z", ",", " ", 
      RowBox[{"-", "1"}], ",", " ", "1"}], "}"}], "Input",
    FontSize->12]}], 
  StyleBox["]", "Input",
   FontSize->12]}]], "Input",ExpressionUUID->"76cdf1d5-96a8-46c6-b757-\
b05c3389ac76"],

Cell[BoxData["8"], "Output",ExpressionUUID->"af4e6dc5-d07c-4a48-9c92-384046cec0ad"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", 
  RowBox[{"\"\<x\>\"", ",", " ", "\"\<y\>\"", ",", " ", "\"\<z\>\""}], 
  "]"}]], "Input",ExpressionUUID->"e440340a-dc2e-412c-8062-727edbfd7092"]
}, Closed]],

Cell[CellGroupData[{

Cell["Construct a held result from parts", "Subsubsection",ExpressionUUID->"4fea30fb-2461-4bfc-9687-dde1e97eb100"],

Cell["\<\
Sometimes it's fine for the inputs to evaluate, but the expression you \
construct from them must not evaluate.  When it's okay to evaluate the parts \
but not the whole, plain old pure functions are often quick and easy:\
\>", "Text",ExpressionUUID->"0ec0958a-8a52-41af-af37-9c90d7ac8789"],

Cell[TextData[{
 "An assignment, on standby, waiting for ",
 StyleBox["ReleaseHold", "Input",
  FontSize->12],
 ", or to be typeset and used as the limit of a ",
 StyleBox["Sum", "Input",
  FontSize->12],
 ", or whatever:"
}], "Text",ExpressionUUID->"68e9338b-b044-4d8f-b807-acac185fd5a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"Set", "[", 
     RowBox[{"x", ",", " ", "#"}], "]"}], "]"}], "&"}], " ", "[", "77", 
  "]"}]], "Input",ExpressionUUID->"50164a2e-683c-4b06-939d-3351fec65ee2"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"x", "=", "77"}], "]"}]], "Output",ExpressionUUID->"4bbd3570-cd55-\
4824-945c-4ed28f28486c"]
}, Open  ]],

Cell["A sum of numbers:", "Text",ExpressionUUID->"7db13a79-bb06-4194-a70d-d30d07af4fe4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"Plus", "[", "##", "]"}], "]"}], "&"}], " ", "@@", " ", 
  RowBox[{"{", 
   RowBox[{"6", ",", " ", "7.5", ",", " ", 
    RowBox[{"8", " ", "-", " ", 
     RowBox[{"3", " ", "I"}]}], ",", " ", 
    RowBox[{"4", "/", "5"}]}], "}"}]}]], "Input",ExpressionUUID->"b307d96d-\
cc90-472b-966b-97256ee58bce"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"6", "+", 
   RowBox[{"7.5`", "\[InvisibleSpace]"}], "+", 
   RowBox[{"(", 
    RowBox[{"8", "-", 
     RowBox[{"3", " ", "\[ImaginaryI]"}]}], ")"}], "+", 
   FractionBox["4", "5"]}], "]"}]], "Output",ExpressionUUID->"110289ad-a490-\
429a-9b81-928b9a8602e4"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Composition", "Input",
  FontSize->12],
 " is another form of anonymous function, too, but without #n and ##n \
variables:"
}], "Text",ExpressionUUID->"953b0f76-f9cb-4691-9844-bcbcaa291840"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Composition", "[", 
   RowBox[{"HoldForm", ",", " ", "Plus"}], "]"}], " ", "@@", " ", 
  RowBox[{"{", 
   RowBox[{"6", ",", " ", "7.5", ",", " ", 
    RowBox[{"8", " ", "-", " ", 
     RowBox[{"3", " ", "I"}]}], ",", " ", 
    RowBox[{"4", "/", "5"}]}], "}"}]}]], "Input",ExpressionUUID->"a3c6b543-\
7b30-49fe-a6f5-f85b9106356f"],

Cell[BoxData[
 TagBox[
  RowBox[{"6", "+", 
   RowBox[{"7.5`", "\[InvisibleSpace]"}], "+", 
   RowBox[{"(", 
    RowBox[{"8", "-", 
     RowBox[{"3", " ", "\[ImaginaryI]"}]}], ")"}], "+", 
   FractionBox["4", "5"]}],
  HoldForm]], "Output",ExpressionUUID->"b5f8ff20-0a4f-44f9-a7cb-d5999e2429c4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Wrap everything in a holding wrapper, do your manipulations, then finish with \
ReleaseHold.\
\>", "Subsubsection",ExpressionUUID->"55464ecf-6d46-490e-8cac-45843ccf4b41"],

Cell["\<\
Here I'll introduce HoldForm, which is cute because it holds just as Hold \
does, but it doesn't display itself.  Thus, you can see the essentials, \
instead of having the display crowded with Hold.  Of course, since you can't \
see HoldForm, you have to remember where you put it, so it can be deceptive.  \
You can use InputForm to reveal the HoldForm's, reminding yourself where they \
are.\
\>", "Text",ExpressionUUID->"2c07a196-d98a-49cd-823f-b09494c93c26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"atomsHeld", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"HoldForm", ",", " ", 
    RowBox[{"Unevaluated", "[", 
     RowBox[{
      RowBox[{"2", "^", "1"}], " ", "*", " ", 
      RowBox[{"3", "^", "2"}], " ", "*", " ", 
      RowBox[{"5", "^", "3"}]}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"-", "1"}], "}"}], ",", " ", 
    RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]], "Input",ExpressionUUID->\
"6a314458-0aae-4ba4-acf2-9bf80e9fbe15"],

Cell[BoxData[
 RowBox[{
  TagBox["Times",
   HoldForm], "[", 
  RowBox[{
   RowBox[{
    TagBox["Power",
     HoldForm], "[", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox["1",
      HoldForm]}], "]"}], ",", 
   RowBox[{
    TagBox["Power",
     HoldForm], "[", 
    RowBox[{
     TagBox["3",
      HoldForm], ",", 
     TagBox["2",
      HoldForm]}], "]"}], ",", 
   RowBox[{
    TagBox["Power",
     HoldForm], "[", 
    RowBox[{
     TagBox["5",
      HoldForm], ",", 
     TagBox["3",
      HoldForm]}], "]"}]}], "]"}]], "Output",ExpressionUUID->"5e3f7b68-0269-\
4abb-932e-3c627ac2b69a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"atomsHeld", ",", " ", 
   RowBox[{"HoldForm", "[", "Power", "]"}]}], "]"}]], "Input",ExpressionUUID->\
"b84f9873-7f61-4090-9ba4-3ac544156f2b"],

Cell[BoxData[
 RowBox[{
  TagBox["Power",
   HoldForm], "[", 
  RowBox[{
   RowBox[{
    TagBox["Times",
     HoldForm], "[", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox["3",
      HoldForm], ",", 
     TagBox["5",
      HoldForm]}], "]"}], ",", 
   RowBox[{
    TagBox["Times",
     HoldForm], "[", 
    RowBox[{
     TagBox["1",
      HoldForm], ",", 
     TagBox["2",
      HoldForm], ",", 
     TagBox["3",
      HoldForm]}], "]"}]}], "]"}]], "Output",ExpressionUUID->"87f890cf-da7c-\
4e3b-86e3-c212f8017193"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "/.", " ", 
  RowBox[{
   RowBox[{"HoldForm", "[", "Power", "]"}], " ", "\[Rule]", " ", 
   RowBox[{"HoldForm", "[", "Plus", "]"}]}]}]], "Input",ExpressionUUID->\
"c624b493-3afb-4106-bf5d-d3f36b62e115"],

Cell[BoxData[
 RowBox[{
  TagBox["Plus",
   HoldForm], "[", 
  RowBox[{
   RowBox[{
    TagBox["Times",
     HoldForm], "[", 
    RowBox[{
     TagBox["2",
      HoldForm], ",", 
     TagBox["3",
      HoldForm], ",", 
     TagBox["5",
      HoldForm]}], "]"}], ",", 
   RowBox[{
    TagBox["Times",
     HoldForm], "[", 
    RowBox[{
     TagBox["1",
      HoldForm], ",", 
     TagBox["2",
      HoldForm], ",", 
     TagBox["3",
      HoldForm]}], "]"}]}], "]"}]], "Output",ExpressionUUID->"41ed1f46-e19e-\
4109-b6d5-9fa71f25fc3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReleaseHold", "[", "%", "]"}]], "Input",ExpressionUUID->"76be655d-d592-4d44-9fe1-4bb446768837"],

Cell[BoxData["36"], "Output",ExpressionUUID->"395d475f-c60d-4bda-b6d9-525ca7f42e35"]
}, Open  ]],

Cell["\<\
A nice alternative in a typesetting front end is to define yourself a wrapper \
that holds, just like Hold and HoldForm do, but which prints as a framebox or \
a colored background around its argument.  That way, it's not obtrusive, and \
yet it's visible so you don't forget it's there.  The typesetting rule is \
just two lines:\
\>", "Text",ExpressionUUID->"3e0100ff-12a7-4fd1-ab3c-554c774a169f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<HoldFormFrame\>\"", "]"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "HoldFormFrame", "]"}], " ", "=", " ", 
    "HoldAll"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"HoldFormFrame", " ", "/:", " ", 
   RowBox[{"MakeBoxes", "[", 
    RowBox[{
     RowBox[{"HoldFormFrame", "[", "expr_", "]"}], ",", " ", "fmt_"}], "]"}], 
   " ", ":=", "\[IndentingNewLine]", 
   RowBox[{"TagBox", "[", 
    RowBox[{
     RowBox[{"FrameBox", " ", "@", " ", 
      RowBox[{"MakeBoxes", "[", 
       RowBox[{"expr", ",", " ", "fmt"}], "]"}]}], ",", " ", 
     "HoldFormFrame"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{"HoldFormFrame", " ", "/:", " ", 
  RowBox[{"MakeBoxes", "[", 
   RowBox[{
    RowBox[{"HoldFormFrame", "[", "expr_", "]"}], ",", " ", "fmt_"}], "]"}], 
  " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"TagBox", "[", 
   RowBox[{
    RowBox[{"FrameBox", " ", "@", " ", 
     RowBox[{"MakeBoxes", "[", 
      RowBox[{"expr", ",", " ", "fmt"}], "]"}]}], ",", " ", "HoldFormFrame"}],
    "]"}]}]}], "Input",ExpressionUUID->"b96e15f4-86e2-4654-9517-a821d8872c91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"atomsHeld", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"HoldFormFrame", ",", " ", 
    RowBox[{"Unevaluated", "[", 
     RowBox[{
      RowBox[{"2", "^", "1"}], " ", "*", " ", 
      RowBox[{"3", "^", "2"}], " ", "*", " ", 
      RowBox[{"5", "^", "3"}]}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"-", "1"}], "}"}], ",", " ", 
    RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]], "Input",ExpressionUUID->\
"b9b2d69b-2119-4d6d-a78f-7c9f86ffb65a"],

Cell[BoxData[
 RowBox[{
  TagBox[
   FrameBox["Times"],
   HoldFormFrame], "[", 
  RowBox[{
   RowBox[{
    TagBox[
     FrameBox["Power"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["2"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["1"],
      HoldFormFrame]}], "]"}], ",", 
   RowBox[{
    TagBox[
     FrameBox["Power"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["3"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["2"],
      HoldFormFrame]}], "]"}], ",", 
   RowBox[{
    TagBox[
     FrameBox["Power"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["5"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["3"],
      HoldFormFrame]}], "]"}]}], "]"}]], "Output",ExpressionUUID->"65024c15-\
0158-4a0c-8c69-dffe9588eb00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"atomsHeld", ",", " ", 
   RowBox[{"HoldFormFrame", "[", "Power", "]"}]}], "]"}]], "Input",ExpressionU\
UID->"f6174c39-e07e-4889-9685-456b608265d9"],

Cell[BoxData[
 RowBox[{
  TagBox[
   FrameBox["Power"],
   HoldFormFrame], "[", 
  RowBox[{
   RowBox[{
    TagBox[
     FrameBox["Times"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["2"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["3"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["5"],
      HoldFormFrame]}], "]"}], ",", 
   RowBox[{
    TagBox[
     FrameBox["Times"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["1"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["2"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["3"],
      HoldFormFrame]}], "]"}]}], "]"}]], "Output",ExpressionUUID->"707676f6-\
1eb3-4fb7-8d71-747b1857a6eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "/.", " ", 
  RowBox[{
   RowBox[{"HoldFormFrame", "[", "Power", "]"}], " ", "\[Rule]", " ", 
   RowBox[{"HoldFormFrame", "[", "Plus", "]"}]}]}]], "Input",ExpressionUUID->\
"ee9eb726-ca78-477f-8218-edcba68f60e6"],

Cell[BoxData[
 RowBox[{
  TagBox[
   FrameBox["Plus"],
   HoldFormFrame], "[", 
  RowBox[{
   RowBox[{
    TagBox[
     FrameBox["Times"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["2"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["3"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["5"],
      HoldFormFrame]}], "]"}], ",", 
   RowBox[{
    TagBox[
     FrameBox["Times"],
     HoldFormFrame], "[", 
    RowBox[{
     TagBox[
      FrameBox["1"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["2"],
      HoldFormFrame], ",", 
     TagBox[
      FrameBox["3"],
      HoldFormFrame]}], "]"}]}], "]"}]], "Output",ExpressionUUID->"0412bf0b-\
ac5a-4445-b947-a1b16ea88ce1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"%", ",", " ", "HoldFormFrame", ",", " ", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}], ",", " ", 
   RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]], "Input",ExpressionUUID->\
"197de956-af9c-4691-b8a8-c4973062356f"],

Cell[BoxData["36"], "Output",ExpressionUUID->"aa364313-8ad4-48d3-ace9-5d31efbef179"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Replace function names with temporary dummy symbols", "Subsubsection",ExpressionUUID->"9268360e-54cd-44d2-b8b3-1f23b355d0e7"],

Cell["\<\
In this technique, you replace \"active\" built-in functions with inert \
symbols of your own choosing.  This gives you a meaningless data structure \
that you can perform structural transformations on.  When you achieve the \
structure you want, you restore the original built-in functions.\
\>", "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"fc1e2c11-4596-4a79-a276-\
cfc4ae15bc61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"atomsHeld", " ", "=", " ", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{
     RowBox[{"2", "^", "1"}], " ", "*", " ", 
     RowBox[{"3", "^", "2"}], " ", "*", " ", 
     RowBox[{"5", "^", "3"}]}], "]"}], " ", "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Times", " ", "\[Rule]", " ", "MyTimes"}], ",", " ", 
     RowBox[{"Power", " ", "\[Rule]", " ", "MyPower"}]}], "}"}]}]}]], "Input",\
ExpressionUUID->"021f01dc-c6b9-4b50-8d45-7abd6e4f06fd"],

Cell[BoxData[
 RowBox[{"MyTimes", "[", 
  RowBox[{
   RowBox[{"MyPower", "[", 
    RowBox[{"2", ",", "1"}], "]"}], ",", 
   RowBox[{"MyPower", "[", 
    RowBox[{"3", ",", "2"}], "]"}], ",", 
   RowBox[{"MyPower", "[", 
    RowBox[{"5", ",", "3"}], "]"}]}], "]"}]], "Output",ExpressionUUID->\
"2157f76f-1b7c-467f-8359-b9ff74ca9093"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"atomsHeld", ",", " ", "MyPower"}], "]"}]], "Input",ExpressionUUID->\
"80da0330-eaf7-4aed-87e4-e3ab76ba7e53"],

Cell[BoxData[
 RowBox[{"MyPower", "[", 
  RowBox[{
   RowBox[{"MyTimes", "[", 
    RowBox[{"2", ",", "3", ",", "5"}], "]"}], ",", 
   RowBox[{"MyTimes", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], "]"}]], "Output",ExpressionUUI\
D->"751b2cfb-2df3-4d00-9d0d-9f1f7a5a8305"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "/.", " ", 
  RowBox[{"MyPower", " ", "\[Rule]", " ", "MyPlus"}]}]], "Input",ExpressionUUI\
D->"b6e12b43-8a00-406d-8fff-ac71bbb33df8"],

Cell[BoxData[
 RowBox[{"MyPlus", "[", 
  RowBox[{
   RowBox[{"MyTimes", "[", 
    RowBox[{"2", ",", "3", ",", "5"}], "]"}], ",", 
   RowBox[{"MyTimes", "[", 
    RowBox[{"1", ",", "2", ",", "3"}], "]"}]}], "]"}]], "Output",ExpressionUUI\
D->"ee7ab15b-d280-40e2-9bcb-8a460aeae079"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "/.", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"MyPlus", " ", "\[Rule]", " ", "Plus"}], ",", " ", 
    RowBox[{"MyTimes", " ", "\[Rule]", " ", "Times"}]}], "}"}]}]], "Input",Exp\
ressionUUID->"d9b679ac-4479-49e6-8378-91384f71f00c"],

Cell[BoxData["36"], "Output",ExpressionUUID->"feff3264-27ce-4e78-af0f-e81e705074f8"]
}, Open  ]],

Cell["\<\
This is very similar to the previous technique of turning every atom into \
Hold[a], in that you preserve the original structure but replace \"active\" \
parts with inactive things, and then undo it at the end.  This one replaces \
only the vital heads, though, not all the atoms.\
\>", "Text",ExpressionUUID->"d21101f4-ca30-4d96-a408-d7273eb7278f"],

Cell[TextData[{
 "A more subtle way to do the same thing is to make ",
 StyleBox["Module", "Input",
  FontSize->12],
 " do the work for you.  You have to undo the change at the end, e.g. ",
 StyleBox["Plus$n -> Plus", "Input",
  FontSize->12],
 ", but that's easily done with this type of rule:\n\n",
 StyleBox["  Plus -> Symbol[\"Plus\"]", "Input",
  FontSize->12],
 StyleBox["\n",
  FontSize->12]
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"90b9709b-c7ca-4c81-8ab7-\
4b0fc322f926"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"atomsHeld", " ", "=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Times", ",", " ", "Power", ",", " ", "Plus", ",", " ", "expr"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"expr", " ", "=", " ", 
      RowBox[{
       RowBox[{"2", "^", "1"}], " ", "*", " ", 
       RowBox[{"3", "^", "2"}], " ", "*", " ", 
       RowBox[{"5", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"thread", " ", "=", " ", 
      RowBox[{"Thread", "[", 
       RowBox[{"expr", ",", " ", "Power"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plus", " ", "=", " ", 
      RowBox[{"thread", " ", "/.", " ", 
       RowBox[{"Power", " ", "\[Rule]", " ", "Plus"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plus", " ", "/.", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Plus", " ", "\[Rule]", " ", 
         RowBox[{"Symbol", "[", "\"\<Plus\>\"", "]"}]}], ",", " ", 
        RowBox[{"Times", " ", "\[Rule]", " ", 
         RowBox[{"Symbol", "[", "\"\<Times\>\"", "]"}]}]}], "}"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",ExpressionUUID->"00754b24-6ea3-\
4ec0-9206-e6dd424add47"],

Cell[BoxData["36"], "Output",ExpressionUUID->"aec2140a-bda6-482a-aade-c175efdee550"]
}, Open  ]],

Cell["\<\

\
\>", "Text",ExpressionUUID->"a1303df7-70f3-4fe8-b822-9ad7610a115f"],

Cell[TextData[{
 StyleBox["Advanced note",
  FontVariations->{"Underline"->True}],
 ":\nIf you like the ",
 StyleBox["Module", "Input",
  FontSize->12],
 " technique and are too lazy to write out the ",
 StyleBox["s -> Symbol[\"s\"]", "Input",
  FontSize->12],
 " rules, or if you're using generated code and must compute those rules \
rather than type them in, here is a way to automate the ",
 StyleBox["x$n -> x", "Input",
  FontSize->12],
 " rules.  It uses a slight hack:  you declare an extra local variable in the \
",
 StyleBox["Module", "Input"],
 ", which remains unused except for being passed to the function that creates \
the ",
 StyleBox["x$n -> x", "Input"],
 " rules.  The reason it is so passed is to provide the value of n.  You \
can't use assume that ",
 StyleBox["$ModuleNumber", "Input"],
 " will have the value you want at the end of the main ",
 StyleBox["Module", "Input"],
 ", since functions called during execution of the ",
 StyleBox["Module", "Input"],
 "'s body may have had module's themselves, hence increasing ",
 StyleBox["$ModuleNumber", "Input"],
 " beyond its original value."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"5ba313a2-cf4a-4f24-9b4c-\
151d8b82511b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"UndoModuloLocals", "[", "sampleSym_Symbol", "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sampleName", ",", " ", "suffix", 
      StyleBox[",",
       FontWeight->"Plain"], 
      StyleBox[" ",
       FontWeight->"Plain"], "suffixLen", ",", " ", "nameForm"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sampleName", " ", "=", " ", 
      RowBox[{"SymbolName", " ", "@", " ", 
       RowBox[{"Unevaluated", "[", "sampleSym", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"suffix", " ", "=", " ", 
      RowBox[{"StringTake", "[", 
       RowBox[{"sampleName", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPosition", "[", 
            RowBox[{"sampleName", ",", " ", "\"\<$\>\""}], "]"}], "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"-", "1"}], ",", " ", "1"}], "]"}], "]"}], ",", " ", 
          RowBox[{"-", "1"}]}], "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"suffixLen", " ", "=", " ", 
      RowBox[{"StringLength", "[", "suffix", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nameForm", " ", "=", " ", 
      RowBox[{"\"\<*\>\"", " ", "<>", " ", "suffix"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"s_Symbol", " ", "\[RuleDelayed]", " ", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"str", " ", "=", " ", 
          RowBox[{"SymbolName", " ", "@", " ", 
           RowBox[{"Unevaluated", "[", "s", "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Symbol", " ", "@", " ", 
          RowBox[{"StringDrop", "[", 
           RowBox[{"str", ",", " ", 
            RowBox[{"-", "suffixLen"}]}], "]"}]}], " ", "/;", " ", 
         RowBox[{"StringMatchQ", "[", 
          RowBox[{"str", ",", " ", "nameForm"}], "]"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"a7a5d0a7-6f25-4bcd-977c-7315353eb9de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "Times", ",", " ", "Power", ",", " ", "Plus", ",", " ", "expr", ",", " ", 
     "sampleSym"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"expr", " ", "=", " ", 
     RowBox[{
      RowBox[{"2", "^", "1"}], " ", "*", " ", 
      RowBox[{"3", "^", "2"}], " ", "*", " ", 
      RowBox[{"5", "^", "3"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"thread", " ", "=", " ", 
     RowBox[{"Thread", "[", 
      RowBox[{"expr", ",", " ", "Power"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"plus", " ", "=", " ", 
     RowBox[{"thread", " ", "/.", " ", 
      RowBox[{"Power", " ", "\[Rule]", " ", "Plus"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"plus", " ", "/.", " ", 
     RowBox[{"UndoModuloLocals", "[", "sampleSym", "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"13940c9d-bce6-4483-\
aea8-7daa11febf89"],

Cell[BoxData["36"], "Output",ExpressionUUID->"c52375d9-52c1-40b6-8ffa-de3658772777"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Use Block to temporarily nullify built-in or user-defined functions\
\>", "Subsubsection",ExpressionUUID->"0abdacc8-4bac-479b-9a05-f2245ae03067"],

Cell[TextData[{
 "One of my favorite techniques is to use ",
 StyleBox["Block", "Input",
  FontSize->12],
 " to deactivate built-in functions for a while so I can safely work with \
expressions as meaningless structures.\n\nI don't do much mathematics myself, \
but one question at the Chicago 1998 conference was how to prevent a \
mathematical function, perhaps it was ",
 StyleBox["Integrate", "Input",
  FontSize->12],
 ", from acting until he had done some expanding, factoring, or other algebra \
on the arguments."
}], "Text",ExpressionUUID->"30ada782-5f09-483f-be04-728f1fa10cb8"],

Cell["Suppose I have this integral:", "Text",ExpressionUUID->"bf380607-1ba3-4f10-a453-ceb39d4795cc"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"x", ",", " ", "y"}], "]"}]], "Input",ExpressionUUID->"3cec13df-\
785c-4c63-ae9b-b69f9eb1feb7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", " ", "+", " ", "y"}], ")"}], "^", "3"}], ",", " ", "x"}], 
  "]"}]], "Input",ExpressionUUID->"afa9ba30-31a7-44a0-bb03-a7a26e6259f7"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"x", "+", "y"}], ")"}], "4"]}]], "Output",ExpressionUUID->\
"98c0cc36-8b97-48aa-81a8-0b7ff95a7064"]
}, Open  ]],

Cell["\<\
Now I decide I want to integrate the expanded form instead.  I can do it \
interactively in the front end by using the \"Evaluate In Place\" feature:\
\>", "Text",ExpressionUUID->"0a0f1bc7-92be-4546-af99-c65c9845782e"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   StyleBox[
    RowBox[{"Expand", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", " ", "+", " ", "y"}], ")"}], "^", "3"}], "]"}],
    FontColor->RGBColor[0, 0, 1],
    Background->None], ",", " ", "x"}], "]"}]], "Input",ExpressionUUID->\
"20710b93-d460-4871-bfc9-99d76b6cb1e0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "3"], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "2"], " ", "y"}], "+", 
    RowBox[{"3", " ", "x", " ", 
     SuperscriptBox["y", "2"]}], "+", 
    SuperscriptBox["y", "3"]}], ",", " ", "x"}], "]"}]], "Input",ExpressionUUI\
D->"0f3d9439-1322-4be7-8b37-70d36e1fbe87"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["x", "4"], "4"], "+", 
  RowBox[{
   SuperscriptBox["x", "3"], " ", "y"}], "+", 
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["x", "2"], " ", 
    SuperscriptBox["y", "2"]}], "2"], "+", 
  RowBox[{"x", " ", 
   SuperscriptBox["y", "3"]}]}]], "Output",ExpressionUUID->"32872074-e800-\
43ca-beae-766a2951950e"]
}, Open  ]],

Cell[TextData[{
 "One way to do it programmatically is to deactive ",
 StyleBox["Integrate", "Input",
  FontSize->12],
 " long enough to apply transformations:"
}], "Text",ExpressionUUID->"e44e72c5-2eab-421c-af34-cf65252f02b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Integrate", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"int", " ", "=", " ", 
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", " ", "+", " ", "y"}], ")"}], "^", "3"}], ",", " ", 
       "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"exp", " ", "=", " ", 
     RowBox[{"MapAt", "[", 
      RowBox[{"Expand", ",", " ", "int", ",", " ", "1"}], "]"}]}], ";", 
    "\[IndentingNewLine]", "exp"}]}], "\[IndentingNewLine]", "]"}]], "Input",E\
xpressionUUID->"baac8e4e-6e2c-42bf-9380-9f446250308d"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["x", "4"], "4"], "+", 
  RowBox[{
   SuperscriptBox["x", "3"], " ", "y"}], "+", 
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["x", "2"], " ", 
    SuperscriptBox["y", "2"]}], "2"], "+", 
  RowBox[{"x", " ", 
   SuperscriptBox["y", "3"]}]}]], "Output",ExpressionUUID->"c56ccb3d-519f-\
4f5e-9e36-218e2e34af47"]
}, Open  ]],

Cell[TextData[{
 "From the final form, it's obvious that it worked.  We could verify it by \
printing the intermediate expression while still in the ",
 StyleBox["Block", "Input",
  FontSize->12],
 ":"
}], "Text",ExpressionUUID->"52c8dda9-2c33-4a8f-a732-899622d2d5e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Integrate", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"int", " ", "=", " ", 
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"x", " ", "+", " ", "y"}], ")"}], "^", "3"}], ",", " ", 
       "x"}], "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"exp", " ", "=", " ", 
     RowBox[{"MapAt", "[", 
      RowBox[{"Expand", ",", " ", "int", ",", " ", "1"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"\"\<exp = \>\"", ",", " ", "exp"}], "]"}], ";", 
    "\[IndentingNewLine]", "exp"}]}], "\[IndentingNewLine]", "]"}]], "Input",E\
xpressionUUID->"fe86e4ec-43c3-4b6c-abf9-2e66a85998a9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"exp = \"\>", "\[InvisibleSpace]", 
   RowBox[{"Integrate", "[", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "3"], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["x", "2"], " ", "y"}], "+", 
      RowBox[{"3", " ", "x", " ", 
       SuperscriptBox["y", "2"]}], "+", 
      SuperscriptBox["y", "3"]}], ",", "x"}], "]"}]}],
  SequenceForm["exp = ", 
   Integrate[x^3 + 3 x^2 y + 3 x y^2 + y^3, x]],
  Editable->False]], "Print",ExpressionUUID->"9f27ceb6-cd98-41ab-98d6-\
7d9f6f086054"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   SuperscriptBox["x", "4"], "4"], "+", 
  RowBox[{
   SuperscriptBox["x", "3"], " ", "y"}], "+", 
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["x", "2"], " ", 
    SuperscriptBox["y", "2"]}], "2"], "+", 
  RowBox[{"x", " ", 
   SuperscriptBox["y", "3"]}]}]], "Output",ExpressionUUID->"049e3709-6295-\
4455-9d45-f33f70e66be8"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assistants in figuring things out", "Subsection",ExpressionUUID->"2739c6df-4e90-4f62-9bc2-b6dc00a31e19"],

Cell[CellGroupData[{

Cell["\<\
An assistant to understanding:  MapAt or ReplaceAll a Button to prominently \
display what targets are hit by your operation.\
\>", "Subsubsection",ExpressionUUID->"e1574946-32c5-4db6-a192-da4efca056f9"],

Cell[TextData[{
 "In the last section, toward the end I suggested a ",
 StyleBox["Hold", "Input",
  FontSize->12],
 "-like wrapper that would display itself as a frame, which is less obtrusive \
visually than ",
 StyleBox["Hold[...]", "Input",
  FontSize->12],
 " wrapped around everything in the expression.\n\nIn that vein, here is a \
technique that sometimes helps in debugging.  Use ",
 StyleBox["Map", "Input",
  FontSize->12],
 " or ",
 StyleBox["ReplaceAll", "Input",
  FontSize->12],
 " or other operations to wrap ",
 StyleBox["Button", "Input",
  FontSize->12],
 ", or some other prominently visible markup, around certain targets, \
especially if you're not sure what the targets will be."
}], "Text",ExpressionUUID->"a6503062-63fb-4fcc-827e-fa4217beaff7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Button", ",", " ", 
   RowBox[{"ToExpression", "[", 
    RowBox[{
    "\"\<2 + 4 I - 5/7\>\"", ",", " ", "InputForm", ",", " ", "HoldForm"}], 
    "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID->"22973568-\
d4c1-41de-9d8a-307e993e57fe"],

Cell[BoxData[
 TagBox[
  RowBox[{
   ButtonBox["2"], "+", 
   RowBox[{
    ButtonBox["4"], " ", 
    ButtonBox["\[ImaginaryI]"]}], "+", 
   RowBox[{
    ButtonBox[
     RowBox[{"-", "1"}]], " ", 
    ButtonBox["5"], " ", 
    SuperscriptBox[
     ButtonBox["7"], 
     ButtonBox[
      RowBox[{"-", "1"}]]]}]}],
  HoldForm]], "Output",ExpressionUUID->"682d4b93-8b43-43dd-98ef-a4ec4eb3e8af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Button", ",", " ", 
   RowBox[{"ToExpression", "[", 
    RowBox[{
    "\"\<2 + 4 I - 5/7\>\"", ",", " ", "InputForm", ",", " ", "HoldForm"}], 
    "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}], ",", " ", 
   RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]], "Input",ExpressionUUID->\
"dde0c2a0-1c84-44f5-9570-137ce60d33d3"],

Cell[BoxData[
 RowBox[{
  ButtonBox["HoldForm"], "[", 
  RowBox[{
   ButtonBox["Plus"], "[", 
   RowBox[{
    ButtonBox["2"], ",", 
    RowBox[{
     ButtonBox["Times"], "[", 
     RowBox[{
      ButtonBox["4"], ",", 
      ButtonBox["\[ImaginaryI]"]}], "]"}], ",", 
    RowBox[{
     ButtonBox["Times"], "[", 
     RowBox[{
      ButtonBox[
       RowBox[{"-", "1"}]], ",", 
      ButtonBox["5"], ",", 
      RowBox[{
       ButtonBox["Power"], "[", 
       RowBox[{
        ButtonBox["7"], ",", 
        ButtonBox[
         RowBox[{"-", "1"}]]}], "]"}]}], "]"}]}], "]"}], "]"}]], "Output",Expr\
essionUUID->"46c4bf6b-6262-4d7d-b761-25c119275bb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Replace", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ToExpression", "[", 
    RowBox[{
    "\"\<2 + 4 I - 5/7\>\"", ",", " ", "InputForm", ",", " ", "HoldForm"}], 
    "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"num_", " ", "/;", " ", 
     RowBox[{"NumberQ", " ", "@", " ", 
      RowBox[{"Unevaluated", "[", "num", "]"}]}]}], " ", "\[RuleDelayed]", 
    " ", 
    RowBox[{"Button", "[", "num", "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "\[IndentingNewLine]", "]"}]], "Input",Expres\
sionUUID->"6936f1de-0b06-4f40-a79a-2dbcb3f0e240"],

Cell[BoxData[
 TagBox[
  RowBox[{
   ButtonBox["2"], "+", 
   RowBox[{
    ButtonBox["4"], " ", "\[ImaginaryI]"}], "+", 
   RowBox[{
    ButtonBox[
     RowBox[{"-", "1"}]], " ", 
    ButtonBox["5"], " ", 
    SuperscriptBox[
     ButtonBox["7"], 
     ButtonBox[
      RowBox[{"-", "1"}]]]}]}],
  HoldForm]], "Output",ExpressionUUID->"f98134ec-5a02-43d7-87e9-7108d98e46bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NumberQ", " ", "@", " ", 
  RowBox[{"Unevaluated", "[", "I", "]"}]}]], "Input",ExpressionUUID->\
"ccd0888a-43d8-4720-aec8-dde78f98ea18"],

Cell[BoxData["False"], "Output",ExpressionUUID->"d115db7b-065c-46ed-af8c-75ca51aa473c"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Another assistant:  ParsedForm to show how input parses, before it begins to \
evaluate\
\>", "Subsubsection",ExpressionUUID->"b1328295-e5c1-4205-87fc-d3ddc2b7df41"],

Cell[TextData[{
 "When I'm writing typesetting rules, or analyzing code, I often need to \
search for patterns in unevaluated input or code.  Sometimes the actual \
structure in the unevaluated form isn't what I deduce from its displayed form \
or my past playing with ",
 StyleBox["FullForm", "Input",
  FontSize->12],
 " of ",
 StyleBox["evaluated",
  FontSlant->"Italic"],
 " things.\n\nHere's a wrapper I've used for many years to show me how things \
parse, before they begin evaluating."
}], "Text",ExpressionUUID->"fe81cd8a-34f9-418e-b9f0-c383cc0176f3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "ParsedForm", "]"}], " ", "=", " ", 
    "HoldAll"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{"ParsedForm", "[", "expr_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"HoldForm", "[", 
   RowBox[{"FullForm", "[", "expr", "]"}], "]"}]}]}], "Input",ExpressionUUID->\
"99ae6ce8-39f2-4102-9091-d92f454d4772"],

Cell["\<\
It reveals the parsed form of differences, fractions, and \"complex\" numbers.\
\>", "Text",ExpressionUUID->"15e0a0ef-a3df-4a6c-80b7-509a923eedb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParsedForm", "[", 
  RowBox[{"x", " ", "-", " ", "y"}], "]"}]], "Input",ExpressionUUID->\
"56a1b20d-98b8-4ec4-88ad-d6c859af61f9"],

Cell[BoxData[
 TagBox[
  TagBox[
   StyleBox[
    RowBox[{"Plus", "[", 
     RowBox[{"x", ",", 
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "y"}], "]"}]}], "]"}],
    ShowSpecialCharacters->False,
    ShowStringCharacters->True,
    NumberMarks->True],
   FullForm],
  HoldForm]], "Output",ExpressionUUID->"c2a786e1-4a9a-4a29-863e-0c9fce80f691"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParsedForm", "[", 
  RowBox[{"1", "/", "5"}], "]"}]], "Input",ExpressionUUID->"97337969-ef71-\
4b0a-8d6a-da5ac86cf94d"],

Cell[BoxData[
 TagBox[
  TagBox[
   StyleBox[
    RowBox[{"Times", "[", 
     RowBox[{"1", ",", 
      RowBox[{"Power", "[", 
       RowBox[{"5", ",", 
        RowBox[{"-", "1"}]}], "]"}]}], "]"}],
    ShowSpecialCharacters->False,
    ShowStringCharacters->True,
    NumberMarks->True],
   FullForm],
  HoldForm]], "Output",ExpressionUUID->"48748c21-5d27-4119-8c24-e7b74ae55bb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ParsedForm", "[", 
  RowBox[{"2", " ", "-", " ", 
   RowBox[{"5", " ", "I"}]}], "]"}]], "Input",ExpressionUUID->"6ae8342f-9038-\
43a2-b2e0-ddf823800ed6"],

Cell[BoxData[
 TagBox[
  TagBox[
   StyleBox[
    RowBox[{"Plus", "[", 
     RowBox[{"2", ",", 
      RowBox[{"Times", "[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"Times", "[", 
         RowBox[{"5", ",", "\\[ImaginaryI]"}], "]"}]}], "]"}]}], "]"}],
    ShowSpecialCharacters->False,
    ShowStringCharacters->True,
    NumberMarks->True],
   FullForm],
  HoldForm]], "Output",ExpressionUUID->"dc884104-aa3b-43e5-8630-4cdddc0b3329"]
}, Open  ]],

Cell[TextData[{
 "This makes it obvious that these things aren't the same as you think if you \
call ",
 StyleBox["FullForm", "Input",
  FontSize->12],
 " on the ",
 StyleBox["evaluated",
  FontSlant->"Italic"],
 " forms a lot."
}], "Text",ExpressionUUID->"3b7ff5cd-2797-4db9-92f6-c2439968d4a5"]
}, Closed]],

Cell[CellGroupData[{

Cell["Using HoldForm to what it looked like before evaluation", \
"Subsubsection",ExpressionUUID->"9c689c08-64fd-4ac0-88fd-42bbd33506b9"],

Cell[TextData[{
 "A lot of people get confused by nested scoping constructs, in particular, \
the automatic renaming of the inner construct's local variables, e.g. ",
 StyleBox["x -> x$", "Input",
  FontSize->12],
 ".  Using ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 ", you capture on film what the outer construct did to the inner construct, \
before the inner construct even begins evaluating:"
}], "Text",ExpressionUUID->"d2e947df-985a-4d99-8602-79ba153bd98a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", " ", "=", " ", "3"}], "}"}], ",", " ", 
   RowBox[{"HoldForm", " ", "@", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", " ", 
      RowBox[{"x", " ", "+", " ", "a"}]}], "]"}]}]}], "]"}]], "Input",Expressi\
onUUID->"0252985e-250a-4eb3-a1bc-36be52ad7116"],

Cell[BoxData[
 TagBox[
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "x$", "}"}], ",", 
    RowBox[{"x$", "+", "3"}]}], "]"}],
  HoldForm]], "Output",ExpressionUUID->"a3feec6b-d65e-4012-8448-7062428cfa15"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", " ", "=", " ", "0"}], "}"}], ",", " ", 
   RowBox[{"HoldForm", " ", "@", " ", 
    RowBox[{"Compile", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
      RowBox[{
       RowBox[{"a", " ", "x"}], " ", "+", " ", "y"}]}], "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"85da29f6-f269-48dd-862f-19ef95a0b735"],

Cell[BoxData[
 TagBox[
  RowBox[{"Compile", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x$", ",", "y$"}], "}"}], ",", 
    RowBox[{
     RowBox[{"a$6234", " ", "x$"}], "+", "y$"}]}], "]"}],
  HoldForm]], "Output",ExpressionUUID->"790a1bf8-261e-4256-988f-c67eec6d070b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", " ", 
    RowBox[{"HoldForm", "[", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"x_", ",", " ", "y_"}], "]"}], " ", "=", " ", 
      RowBox[{
       RowBox[{"a", " ", "x"}], " ", "+", " ", "y"}]}], "]"}]}], "]"}], " ", 
  "[", "7", "]"}]], "Input",ExpressionUUID->"5d942ff7-3d1a-4225-a1eb-\
52f953d4bc84"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x$_", ",", "y$_"}], "]"}], "=", 
   RowBox[{
    RowBox[{"7", " ", "x$"}], "+", "y$"}]}],
  HoldForm]], "Output",ExpressionUUID->"b9fecd20-5000-437f-9d01-5cb1606cd879"]
}, Open  ]],

Cell[TextData[{
 "The same technique reveals that ",
 StyleBox["Block", "Input",
  FontSize->12],
 " doesn't participate in these lexical scoping activities.  If it is inside, \
its variables aren't renamed:"
}], "Text",ExpressionUUID->"209df422-a624-4f02-9efd-e9e5ad008ca6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", " ", "=", " ", "0"}], "}"}], ",", " ", 
   RowBox[{"HoldForm", " ", "@", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
      RowBox[{
       RowBox[{"a", " ", "x"}], " ", "+", " ", "y"}]}], "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"fa2582c0-fac9-42b1-a6e9-e1bfd619cfae"],

Cell[BoxData[
 TagBox[
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], ",", 
    RowBox[{
     RowBox[{"a$6233", " ", "x"}], "+", "y"}]}], "]"}],
  HoldForm]], "Output",ExpressionUUID->"63e09e4c-4129-4c12-8013-55b8e8690175"]
}, Open  ]],

Cell["\<\
And if it is outside, it doesn't perform renaming on constructs inside:\
\>", "Text",ExpressionUUID->"0f3fd98c-9678-4e9c-a8ac-7b20d64cb760"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", " ", "=", " ", "0"}], "}"}], ",", " ", 
   RowBox[{"HoldForm", " ", "@", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", " ", "y"}], "}"}], ",", " ", 
      RowBox[{
       RowBox[{"a", " ", "x"}], " ", "+", " ", "y"}]}], "]"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"edbf3f6c-bb69-4e08-998b-d2470f681bc9"],

Cell[BoxData[
 TagBox[
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], ",", 
    RowBox[{
     RowBox[{"a", " ", "x"}], "+", "y"}]}], "]"}],
  HoldForm]], "Output",ExpressionUUID->"71995843-7e1d-4b7c-8903-a87ad73a63e6"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More on principles and methods", "Section",ExpressionUUID->"7870c115-eedf-4773-8f8b-a1ebef880aea"],

Cell[CellGroupData[{

Cell["\<\
Structural operations are your friends; they work well on unevaluated \
expressions.\
\>", "Subsection",ExpressionUUID->"1fd14a81-e5c1-45b6-8a13-3148f3ea8c59"],

Cell[CellGroupData[{

Cell["Flatten", "Subsubsection",ExpressionUUID->"83c9e7e2-ece8-4a01-aa33-c2118abe77f3"],

Cell[TextData[{
 "An example of ",
 StyleBox["Flatten", "Input",
  FontSize->12],
 ":"
}], "Text",ExpressionUUID->"c2602c1a-35dc-4cd4-a0b8-25d32c4b29a9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "f", "]"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", "HoldAll"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"Xor", "[", "elems___", "]"}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Replace", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Sort", "[", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Hold", "[", "elems", "]"}], ",", " ", "Infinity", ",", " ", 
       "Xor"}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Hold", "[", "args___", "]"}], " ", "\[RuleDelayed]", " ", 
     RowBox[{"HoldForm", "[", 
      RowBox[{"CirclePlus", "[", "args", "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",ExpressionUUID->"61beb190-c003-\
4fb2-8fcf-12e99ec2fbc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"Xor", "[", 
   RowBox[{
    RowBox[{"Xor", "[", 
     RowBox[{
      RowBox[{"1", " ", "\[Equal]", " ", "1"}], ",", " ", 
      RowBox[{"Xor", "[", 
       RowBox[{"0", " ", "\[Equal]", " ", "1"}], "]"}]}], "]"}], ",", " ", 
    RowBox[{"Xor", "[", 
     RowBox[{
      RowBox[{"Xor", "[", 
       RowBox[{
        RowBox[{"2", " ", "\[Equal]", " ", "1"}], ",", " ", 
        RowBox[{"1", " ", "\[Equal]", " ", "0"}]}], "]"}], ",", " ", 
      RowBox[{"2", " ", "\[Equal]", " ", "0"}]}], "]"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"e72cd6e0-10aa-40de-b5e2-d5e53d93e6af"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"(", 
    RowBox[{"0", "==", "1"}], ")"}], "\[CirclePlus]", 
   RowBox[{"(", 
    RowBox[{"1", "==", "0"}], ")"}], "\[CirclePlus]", 
   RowBox[{"(", 
    RowBox[{"1", "==", "1"}], ")"}], "\[CirclePlus]", 
   RowBox[{"(", 
    RowBox[{"2", "==", "0"}], ")"}], "\[CirclePlus]", 
   RowBox[{"(", 
    RowBox[{"2", "==", "1"}], ")"}]}],
  HoldForm]], "Output",ExpressionUUID->"3dde21c3-32d7-4363-a9d0-77ce19a7fe21"]
}, Open  ]],

Cell["\<\
Here is a function automatically flattens multiple levels of itself.  It also \
acts as the identity on a singleton.\
\>", "Text",ExpressionUUID->"fbbe9341-b9e9-4b8e-ae96-45837410cb0a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "f", "]"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", "HoldAll"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "args___", "]"}], " ", "/;", " ", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Unevaluated", "[", 
       RowBox[{"{", "args", "}"}], "]"}], ",", "_f"}], "]"}]}], " ", ":=", 
   " ", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Unevaluated", "[", 
      RowBox[{"f", "[", "args", "]"}], "]"}], ",", " ", "Infinity", ",", " ", 
     "f"}], "]"}]}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "singleton_", "]"}], " ", ":=", " ", "singleton"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"f", "[", "elems___", "]"}], " ", ":=", " ", 
  RowBox[{"Hold", "[", "elems", "]"}]}]}], "Input",ExpressionUUID->"08cfe30a-\
193c-4883-a0f5-3a3dbc6ae3c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", " ", "4", ",", " ", "5"}], "]"}], ",", " ", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", " ", 
     RowBox[{"f", "[", 
      RowBox[{"7", ",", " ", "8"}], "]"}]}], "]"}]}], "]"}]], "Input",Expressi\
onUUID->"0b024a58-a208-4a62-9709-0c5ab5cfda93"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8"}],
   "]"}]], "Output",ExpressionUUID->"21e2abc0-c57b-4418-951a-6d5411ff1172"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "1", "]"}]], "Input",ExpressionUUID->"1cda8eff-159f-441b-8891-88e8543fa614"],

Cell[BoxData["1"], "Output",ExpressionUUID->"b1e714ce-74fc-474a-9002-d077b2d010e5"]
}, Open  ]],

Cell[TextData[{
 "Usually people try to do this with ",
 StyleBox["Flat", "Input",
  FontSize->12],
 ", but that causes infinite recursion because ",
 StyleBox["Flat", "Input",
  FontSize->12],
 " also interferes with pattern-matching of your rules."
}], "Text",ExpressionUUID->"f9393a12-059e-47ca-8345-3c14cde81f89"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "f", "]"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"HoldAll", ",", " ", "Flat"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "singleton_", "]"}], " ", ":=", " ", "singleton"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"f", "[", "elems___", "]"}], " ", ":=", " ", 
  RowBox[{"Hold", "[", "elems", "]"}]}]}], "Input",ExpressionUUID->"e7cd04da-\
4e73-423d-8446-d574ecabf018"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", " ", "4", ",", " ", "5"}], "]"}], ",", " ", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", " ", 
     RowBox[{"f", "[", 
      RowBox[{"7", ",", " ", "8"}], "]"}]}], "]"}]}], "]"}]], "Input",Expressi\
onUUID->"17264fc8-7362-40b3-b74c-cb3a82109ddd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$IterationLimit", "::", "\<\"itlim\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Iteration limit of \\!\\(4096\\) exceeded.\"\>"}]], \
"Message",ExpressionUUID->"6ab3b00c-743e-424b-b51b-de6f61056d16"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"f", "[", 
   RowBox[{
   "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
    "8"}], "]"}], "]"}]], "Output",ExpressionUUID->"3ace586c-a23d-44a6-81b1-\
9ada80bb9235"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "1", "]"}]], "Input",ExpressionUUID->"3bb9859d-6dbe-4099-8a42-73a191c7d580"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$IterationLimit", "::", "\<\"itlim\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Iteration limit of \\!\\(4096\\) exceeded.\"\>"}]], \
"Message",ExpressionUUID->"945bd263-f966-488c-b33c-1a7a5836774c"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"f", "[", "1", "]"}], "]"}]], "Output",ExpressionUUID->"e9d95143-\
11d9-43e9-a216-2b59df4dfa92"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Thread", "Subsubsection",ExpressionUUID->"c52425d6-536b-4094-9778-1b717057e2b4"],

Cell["\<\
If your f is already a holding function, and you want to map it across a \
list, of course without letting the elements of the list evaluate before f \
gets to them, then you can do:\
\>", "Text",ExpressionUUID->"20834520-3a00-4815-aba5-13688d7d43db"],

Cell[BoxData[
 RowBox[{"List", " ", "@@", " ", 
  RowBox[{"(", 
   RowBox[{"f", " ", "/@", " ", 
    RowBox[{"Hold", "[", 
     RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "]"}]}], 
   ")"}]}]], "Input",ExpressionUUID->"e8212e22-bb63-4acd-863f-02a4b0f0032d"],

Cell[BoxData[
 RowBox[{"ReleaseHold", " ", "@", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"f", ",", " ", 
    RowBox[{"Hold", "[", 
     RowBox[{"{", 
      RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "}"}], "]"}], 
    ",", " ", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",ExpressionUUID->"ff26ebfc-\
e812-482d-aabd-7de29d607c65"],

Cell[TextData[{
 "But an even more compact method is ",
 StyleBox["Thread", "Input",
  FontSize->12],
 ", which is really a controlled ",
 StyleBox["Listable", "Input",
  FontSize->12],
 ", just one application of ",
 StyleBox["Listable", "Input",
  FontSize->12],
 " instead of recursive application of it:"
}], "Text",ExpressionUUID->"86541bf7-99c5-42c2-8738-2cd7db798726"],

Cell[BoxData[
 RowBox[{"Thread", " ", "@", " ", 
  RowBox[{"Unevaluated", " ", "@", " ", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "}"}], 
    "]"}]}]}]], "Input",ExpressionUUID->"bd8c6b56-edc5-4046-9786-\
1343e286f0d0"],

Cell[TextData[{
 "If you have to express it as a pure function, e.g. if f is a two-variable \
function, and one argument is some fixed value, then to make it holding, you \
must use ",
 StyleBox["Function[vars, body, attrs]", "Input",
  FontSize->12],
 ":"
}], "Text",ExpressionUUID->"a3537d8f-b120-4036-918f-d2c966bf93a9"],

Cell[BoxData[
 RowBox[{"List", " ", "@@", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"e", ",", " ", 
      RowBox[{"f", "[", 
       RowBox[{"0", ",", " ", "e"}], "]"}], ",", " ", "HoldFirst"}], "]"}], 
    " ", "/@", " ", 
    RowBox[{"Hold", "[", 
     RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "]"}]}], 
   ")"}]}]], "Input",ExpressionUUID->"32dc3fc9-d1e0-4bc6-87d0-057467e60792"],

Cell[BoxData[
 RowBox[{"ReleaseHold", " ", "@", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"e", ",", " ", 
      RowBox[{"f", "[", 
       RowBox[{"0", ",", " ", "e"}], "]"}], ",", " ", "HoldFirst"}], "]"}], 
    ",", " ", 
    RowBox[{"Hold", "[", 
     RowBox[{"{", 
      RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "}"}], "]"}], 
    ",", " ", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",ExpressionUUID->"aa22e646-\
e0a5-4347-9663-4ada1f7864bf"],

Cell[TextData[{
 "However, again ",
 StyleBox["Thread", "Input",
  FontSize->12],
 " makes it short and elegant:"
}], "Text",ExpressionUUID->"219662e8-b983-4299-af47-f132cd0f6268"],

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{
   RowBox[{"Unevaluated", " ", "@", " ", 
    RowBox[{"f", "[", 
     RowBox[{"0", ",", " ", 
      RowBox[{"{", 
       RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "}"}]}], 
     "]"}]}], ",", " ", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",ExpressionUUID->"39c3d40c-8a11-4ec1-\
9693-5ac9f52d5d8f"],

Cell["Here's a real use from the top-level typesetting packages:", "Text",ExpressionUUID->"c07e69bb-76c3-4427-a1c7-208c0114ba06"],

Cell["\<\
SetAttributes[{HeldOptionQ, HeldNonOptionQ}, HoldAllComplete]

HeldOptionQ[expr_] := OptionQ @ Unevaluated[expr]
HeldOptionQ[exprs__] := Thread[Unevaluated @ HeldOptionQ[And[exprs]], And]


HeldNonOptionQ[expr_] := Not @ HeldOptionQ[expr]
HeldNonOptionQ[exprs__] := Thread[Unevaluated @ HeldNonOptionQ[And[exprs]], \
And]\
\>", "Program",
 FontFamily->"Courier",
 FontSize->12,ExpressionUUID->"9b296688-dae2-4716-8061-7975da354c4e"],

Cell[TextData[{
 "Another real use in the typesetting packages is when I want to map ",
 StyleBox["MakeBoxes", "Input",
  FontSize->12],
 ", or its sister ",
 StyleBox["Parenthesize", "Input",
  FontSize->12],
 ", across a list:"
}], "Text",ExpressionUUID->"e593b8cf-0420-47e1-bbff-4e2fb04efae4"],

Cell[BoxData[
 RowBox[{"Thread", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Unevaluated", " ", "@", " ", 
    RowBox[{"Parenthesize", "[", 
     RowBox[{
      RowBox[{"{", "exprs", "}"}], ",", "fmt", ",", "CompoundExpression"}], 
     "]"}]}], ",", "\[IndentingNewLine]", "List", ",", "\[IndentingNewLine]", 
   "1"}], "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"9baa0e57-\
6a41-4820-80bd-5f094917f048"],

Cell[TextData[{
 "To feed the output of ",
 StyleBox["MakeExpression", "Input",
  FontSize->12],
 " to something else without the ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 " wrapper.  Or in general, any function that returns result in ",
 StyleBox["Hold", "Input",
  FontSize->12],
 " can feed its result, sans the wrapper, to another thing."
}], "Text",ExpressionUUID->"b7a641b4-d33c-4dd5-80b6-cb539e812fc6"],

Cell[BoxData[
 RowBox[{"TagBox", "/:", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"TagBox", "[", 
     RowBox[{
      RowBox[{"GridBox", "[", 
       RowBox[{"boxexpr_", ",", "opts___"}], "]"}], ",", "Grid"}], "]"}], ",",
     "fmt_"}], "]"}], ":=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"Grid", "[", 
     RowBox[{
      RowBox[{"MakeExpression", "[", 
       RowBox[{
        RowBox[{"GridBox", "[", "boxexpr", "]"}], ",", "fmt"}], "]"}], ",", 
      "opts"}], "]"}], ",", "HoldComplete", ",", "1"}], "]"}]}]], "Input",Expr\
essionUUID->"4c215a26-6170-4895-ae15-781ee3a2ac72"],

Cell[TextData[{
 StyleBox["Grid", "Input",
  FontSize->12],
 " is conveniently inert; it just sits there and does nothing to its \
argument.  If your f doesn't sit still, use ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " or ",
 StyleBox["Block", "Input",
  FontSize->12],
 " methods:"
}], "Text",ExpressionUUID->"f943d373-61fe-414d-9a8a-c71656e5e6b4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ReleaseHold", " ", "@", " ", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"Unevaluated", " ", "@", " ", 
       RowBox[{"f", "[", 
        RowBox[{"#", ",", "opts"}], "]"}]}], ",", "HoldComplete", ",", "1"}], 
     "]"}]}], "&"}], " ", "@", " ", 
  RowBox[{"MakeExpression", "[", 
   RowBox[{
    RowBox[{"GridBox", "[", "boxexpr", "]"}], ",", "fmt"}], "]"}]}]], "Input",\
ExpressionUUID->"1478496e-47e4-46ad-8c0f-29a949ad0a8b"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "f", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"ReleaseHold", " ", "@", " ", 
    RowBox[{"Thread", "[", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{
        RowBox[{"MakeExpression", "[", 
         RowBox[{
          RowBox[{"GridBox", "[", "boxexpr", "]"}], ",", "fmt"}], "]"}], ",", 
        "opts"}], "]"}], ",", "HoldComplete", ",", "1"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"f3b4a474-a625-4876-\
9afd-f2daec41295d"],

Cell[TextData[{
 "In general, ",
 StyleBox["Thread", "Input",
  FontSize->12],
 " can be used to manually implement one level of ",
 StyleBox["Listable", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"bff970cd-3a2d-421e-b7f3-2c9235711473"]
}, Closed]],

Cell[CellGroupData[{

Cell["Pointwise operators:  ReplacePart, Delete, FlattenAt, MapAt", \
"Subsubsection",ExpressionUUID->"27097c5a-7398-4f6c-a37a-bf40de3d7002"],

Cell[TextData[{
 StyleBox["ReplacePart", "Input",
  FontSize->12],
 " gives you complete power to do whatever you want, though it takes a bit \
more work because you have to specify all the target locations.  With it, you \
can implement a ",
 StyleBox["ReplaceAt", "Input",
  FontSize->12],
 ", which gives you even finer control than ",
 StyleBox["Replace", "Input",
  FontSize->12],
 " with level specification."
}], "Text",ExpressionUUID->"3c300eb3-cbca-4c27-a541-148444185352"],

Cell[TextData[{
 "Here's an ",
 StyleBox["EvaluateAt", "Input",
  FontSize->12],
 " function that evaluates just the subexpressions you tell it to.  I wrote \
this for the Further Examples during Version 3.0 development, and it's not \
the most efficient method, as its use of ",
 StyleBox["Fold", "Input",
  FontSize->12],
 " makes it O(n^2), but it illustrates what you can do:"
}], "Text",ExpressionUUID->"1db7da12-f86a-49b5-b7ba-e2e6ff9a98c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EvaluateAt", "[", 
   RowBox[{"expr_", ",", "positions_"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ReplacePart", "[", 
      RowBox[{"#1", ",", 
       RowBox[{"Part", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"Sequence", "@@", "#2"}]}], "]"}], ",", "#2"}], "]"}], "&"}],
     ",", "expr", ",", "positions"}], "]"}]}]], "Input",ExpressionUUID->\
"ba2f075b-5f28-4fcf-9f4e-5d7bb13f7716"],

Cell[TextData[{
 "A faster implementation would be based on the 4-argument form of ",
 StyleBox["ReplacePart", "Input",
  FontSize->12],
 ".  I will include this in a later revision of this document."
}], "Text",ExpressionUUID->"768b36bc-b7b3-4e02-9294-82472e44a6ba"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Identify what's bad to evaluate:  the whole, or the parts, or the return \
value?\
\>", "Subsubsection",ExpressionUUID->"077538ba-6edb-4c78-b150-d706fb837b40"],

Cell[TextData[{
 "If the whole, then ",
 StyleBox["Block", "Input",
  FontSize->12],
 " is one of the easiest methods"
}], "Text",ExpressionUUID->"9a30cb63-d483-4137-96cf-8a8d50d222b9"],

Cell[TextData[{
 "If the parts, then you're more likely to need ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " or ",
 StyleBox["Hold", "Input",
  FontSize->12],
 "* stuff.  You could use ",
 StyleBox["Block", "Input",
  FontSize->12],
 ", but then you have to assemble a list of all the types of parts and scope \
their heads."
}], "Text",ExpressionUUID->"9d2cf0e4-1952-4914-940e-78154c8d2c37"],

Cell[TextData[{
 "If the return value must remain unevaluated, and you're going to return it \
to some arbitrary function calling you as a service, rather than you passing \
the unevaluated result immediately to some other function in your code, then \
you may have to return it wrapped in ",
 StyleBox["Hold", "Input",
  FontSize->12],
 " or some holding container.  Like ",
 StyleBox["MakeExpression", "Input",
  FontSize->12],
 " (whose return value is in ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 ") or ",
 StyleBox["Trace", "Input",
  FontSize->12],
 " (whose return value wraps stages of evaluation in ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 ") or ",
 StyleBox["DownValues", "Input",
  FontSize->12],
 " (whose return value represents definitions, protecting the left-hand side \
with ",
 StyleBox["HoldPattern", "Input",
  FontSize->12],
 " and the right-hand side with ",
 StyleBox["RuleDelayed", "Input",
  FontSize->12],
 ")"
}], "Text",ExpressionUUID->"3054d844-ca56-4829-9ddd-34061406c0fe"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some subtle topics to demystify", "Subsection",ExpressionUUID->"254ae12d-1cef-40f1-a575-3c868c0741a0"],

Cell[CellGroupData[{

Cell[TextData[{
 "Functions that hold some or all their arguments, e.g. Plot, Table, and \
HoldComplete, get ",
 StyleBox["all their power",
  FontSlant->"Italic"],
 " of preventing evaluation from ",
 StyleBox["attributes",
  FontSlant->"Italic"],
 "."
}], "Subsubsection",ExpressionUUID->"000d0389-f8a5-48ea-8e26-6d237235b1c7"],

Cell[TextData[{
 "Some ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " users believe that functions such as ",
 StyleBox["Plot", "Input",
  FontSize->12],
 ", ",
 StyleBox["Table", "Input",
  FontSize->12],
 ", and ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 " have magical internal code to prevent their arguments from evaluating.  \
Well, there is no mysterious internal magic here.  These functions get all \
their power from the attributes they carry, e.g. ",
 StyleBox["HoldFirst", "Input",
  FontSize->12],
 ", ",
 StyleBox["HoldRest", "Input",
  FontSize->12],
 ", ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 ", ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 ".  You can endow your own functions with these attributes.\n\nIf a function \
is ",
 StyleBox["HoldFirst", "Input",
  FontSize->12],
 ", it will receive its first argument unevaluated, and the others evaluated. \
 It's that simple.  You the user can deprive any function of its power by \
using ",
 StyleBox["ClearAttributes", "Input",
  FontSize->12],
 ".  Example:  ",
 StyleBox["Context", "Input",
  FontSize->12],
 " must receive its first argument unevaluated, since it might be a symbol \
with a value."
}], "Text",ExpressionUUID->"2327e732-2e47-46d4-9c17-97445255b00e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", " ", "=", " ", "777"}], ";"}]], "Input",ExpressionUUID->"e3e35af6-aca0-43ba-89ca-b5c9fc62aa4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Context", "[", "x", "]"}]], "Input",ExpressionUUID->"20224cdf-0b17-4298-8c1c-80ff0f960531"],

Cell[BoxData["\<\"Global`\"\>"], "Output",ExpressionUUID->"fcd98af8-1d20-4ffd-9f48-6931017b0614"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClearAttributes", "[", 
   RowBox[{"Context", ",", " ", "HoldFirst"}], "]"}], ";"}]], "Input",Expressi\
onUUID->"3bf6e059-0d8b-48b9-a376-d1792241d6d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Context", "[", "x", "]"}]], "Input",ExpressionUUID->"b5c311bc-9d15-42c9-b078-f794c77cf79d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Context", "::", "\<\"ssle\"\>"}], 
  RowBox[{
  ":", " "}], "\<\"Symbol, string, or HoldPattern[symbol] expected at \
position \\!\\(1\\) in \\!\\(Context[777]\\).\"\>"}]], "Message",ExpressionUUI\
D->"f2d15e91-4e07-402b-a778-b3460c5a5e12"],

Cell[BoxData[
 RowBox[{"Context", "[", "777", "]"}]], "Output",ExpressionUUID->"4cc2f6d2-21e6-4822-83ca-29450db5d931"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"Context", ",", " ", "HoldFirst"}], "]"}], ";"}]], "Input",Expressi\
onUUID->"cf70d8fa-577f-4471-a8f4-d0c1ebbe6a71"],

Cell[TextData[{
 "It's actually the ",
 StyleBox["top-level evaluator that decides",
  FontSlant->"Italic"],
 " what arguments a function receives, not the function itself.  The \
evaluator always looks at a function call's arguments and does \
pre-processing, unless the function carries the attribute ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 ".  Even the ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " attribute allows a few kinds of pre-processing to take effect:  ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " take effect, ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " is flattened, and ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 " of the arguments do fire."
}], "Text",ExpressionUUID->"8795bf1a-cedb-48a1-b7b3-be95227f7f2d"],

Cell[TextData[{
 StyleBox["Hold", "Input",
  FontSize->12],
 " is the prototypical ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " function:"
}], "Text",ExpressionUUID->"b1646c1c-9c26-40cf-b1db-d61b3408d372"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Attributes", "[", "Hold", "]"}]], "Input",ExpressionUUID->"373152e9-9c2d-4bc2-b588-d8ba989a554d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"HoldAll", ",", "Protected"}], "}"}]], "Output",ExpressionUUID->\
"de1ac9a8-fb9e-4dd1-897f-b6d0c17a919f"]
}, Open  ]],

Cell[TextData[{
 "It lets ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " and ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " do their thing:"
}], "Text",ExpressionUUID->"e796d1fa-8201-4d4b-96e1-03ab71f27665"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"Sequence", "[", 
    RowBox[{"7", ",", " ", 
     RowBox[{"Print", "[", "8", "]"}]}], "]"}]}], "]"}]], "Input",ExpressionUU\
ID->"bddcb24a-a539-428e-9413-31b46c4ed0d2"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"3", ",", "7", ",", 
   RowBox[{"Print", "[", "8", "]"}]}], "]"}]], "Output",ExpressionUUID->\
"21d7d1ee-1466-430b-8b93-4d366a296b13"]
}, Open  ]],

Cell[TextData[{
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 " is stronger; it doesn't allow even this:"
}], "Text",ExpressionUUID->"7da6da81-ae92-4a84-a47b-68817a8f49ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HoldComplete", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"Sequence", "[", 
    RowBox[{"7", ",", " ", 
     RowBox[{"Print", "[", "8", "]"}]}], "]"}]}], "]"}]], "Input",ExpressionUU\
ID->"fd78e90c-6eab-4f69-9353-4ce5cc28ccd9"],

Cell[BoxData[
 RowBox[{"HoldComplete", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", "+", "2"}], "]"}], ",", 
   RowBox[{"Sequence", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Print", "[", "8", "]"}]}], "]"}]}], "]"}]], "Output",ExpressionU\
UID->"b9f732b5-4cb2-4fd3-9140-8997e5a4813b"]
}, Open  ]],

Cell[TextData[{
 "But deprive of its ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " attribute, and it becomes powerless to hold anything.  However, you'd \
better not do this when running in the front end, because ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 " is used by the typesetting code,which is an integral part of the main loop \
when you're in a front end."
}], "Text",ExpressionUUID->"c7362c67-c49c-4cd0-b893-4481b69e0b95"],

Cell[TextData[{
 "For more information, see \"A.4.1 The Standard Evaluation Sequence\" in The \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Book, or for even more detail, Dave Withoff's talk from the 1992 \
conference Course Notes."
}], "Text",ExpressionUUID->"5a2344e4-31ad-47b9-93cf-4d5056a168d8"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Misconception:  Block will deactivate absolutely all properties and \
meaningful behavior of a symbol in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".  Wrong!  Only ",
 StyleBox["rewrite rules",
  FontSlant->"Italic"],
 " are deactivated."
}], "Subsubsection",ExpressionUUID->"c84d85d3-0ac0-4411-9ab4-35468589d99e"],

Cell[TextData[{
 "Basically, a command or function that ",
 StyleBox["performs an action",
  FontSlant->"Italic"],
 " or ",
 StyleBox["applies a transformation",
  FontSlant->"Italic"],
 ", e.g. ",
 StyleBox["OpenWrite", "Input",
  FontSize->12],
 ", ",
 StyleBox["Map", "Input",
  FontSize->12],
 ", and so on, you can deactivate.  ",
 StyleBox["Block", "Input",
  FontSize->12],
 " will turn off just about all the these properties of a symbol (both \
top-level and built-in versions of these):"
}], "Text",ExpressionUUID->"28d2866b-5e1c-4112-9535-bd420693f202"],

Cell[BoxData[
 RowBox[{"$ValueTypes", "=", 
  RowBox[{"{", 
   RowBox[{
   "Attributes", ",", "DefaultValues", ",", "DownValues", ",", "FormatValues",
     ",", "NValues", ",", "OwnValues", ",", "Options", ",", "SubValues", ",", 
    "UpValues"}], "}"}]}]], "Input",ExpressionUUID->"69eb121f-ffce-43a7-8710-\
3a10ea64a0a3"],

Cell[TextData[{
 "which are the assignments to a symbol.  This is about what you expect, and \
won't surprise you, though note ",
 StyleBox["FormatValues", "Input",
  FontSize->12],
 ", which means that ",
 StyleBox["Block", "Input",
  FontSize->12],
 " will also turn off pretty-printing rules for the symbol, a fact that is \
often missed, and is sometimes useful, sometimes annoying."
}], "Text",ExpressionUUID->"57f71dc4-ac2d-4094-8acd-b6fd31377564"],

Cell[TextData[{
 "But some symbols have a special meaning that is recognized by some other \
part of the system, such as the fact that ",
 StyleBox["Slot", "Input",
  FontSize->12],
 " is recognized by ",
 StyleBox["Function", "Input",
  FontSize->12],
 " as labelling the function's formal variables.  It may surprise you that \
such extrinsic properties are ",
 StyleBox["not deactivated",
  FontSlant->"Italic"],
 " by ",
 StyleBox["Block", "Input",
  FontSize->12],
 "!"
}], "Text",ExpressionUUID->"740a8d7e-6635-4fc7-9192-85b612e81f4a"],

Cell[TextData[{
 "Here are a few  categories of properties that ",
 StyleBox["Block", "Input",
  FontSize->12],
 " will ",
 StyleBox["not",
  FontSlant->"Italic"],
 " deactivate, to give you a feeling for the limits of ",
 StyleBox["Block", "Input",
  FontSize->12],
 ":\n\n(1)  Attributes, e.g. ",
 StyleBox["Listable", "Input",
  FontSize->12],
 " and ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 ".\n\n(2)  Names of options, e.g. ",
 StyleBox["PlotPoints", "Input",
  FontSize->12],
 " or ",
 StyleBox["WorkingPrecision", "Input",
  FontSize->12],
 ".\n\n(3)  The meta-expression status of the various pattern types:  ",
 StyleBox["Pattern", "Input",
  FontSize->12],
 ", ",
 StyleBox["Blank", "Input",
  FontSize->12],
 "*, ",
 StyleBox["Repeated", "Input",
  FontSize->12],
 "*, ",
 StyleBox["Alternatives", "Input",
  FontSize->12],
 ", ",
 StyleBox["Optional", "Input",
  FontSize->12],
 ", ",
 StyleBox["PatternTest", "Input",
  FontSize->12],
 ", ",
 StyleBox["Condition", "Input",
  FontSize->12],
 ", ",
 StyleBox["HoldPattern (", "Input",
  FontSize->12],
 "formerly ",
 StyleBox["Literal)", "Input",
  FontSize->12],
 ", ",
 StyleBox["Verbatim", "Input",
  FontSize->12],
 ".\n\n(4)  The fact that ",
 StyleBox["Slot[i]", "Input",
  FontSize->12],
 " and ",
 StyleBox["SlotSequence[i]", "Input",
  FontSize->12],
 ", i.e. ",
 StyleBox["#n", "Input",
  FontSize->12],
 " and ",
 StyleBox["##n", "Input",
  FontSize->12],
 ",  refer to the arguments of ",
 StyleBox["Function[body]", "Input",
  FontSize->12],
 ".\n\n(5)  The status of being a lexical scoping construct, including ",
 StyleBox["Module", "Input",
  FontSize->12],
 ", ",
 StyleBox["With", "Input",
  FontSize->12],
 ", ",
 StyleBox["Function", "Input",
  FontSize->12],
 ", ",
 StyleBox["Compile", "Input",
  FontSize->12],
 ", the ",
 StyleBox["Rule", "Input",
  FontSize->12],
 "* and *",
 StyleBox["Set", "Input",
  FontSize->12],
 "* family, ",
 StyleBox["Condition", "Input",
  FontSize->12],
 ", when it comes to things like variable renaming ",
 StyleBox["x -> x$", "Input",
  FontSize->12],
 ".  Though ",
 StyleBox["Block", "Input",
  FontSize->12],
 " can certainly make any of these a do-nothing command.\n\n(6)  Lots of \
other magic symbols like ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 ", ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 ", ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 "; and just about any symbol that is simply a name or container for data \
that is recognized or acted upon by an actual command or function: ",
 StyleBox["Rule", "Input",
  FontSize->12],
 " and ",
 StyleBox["RuleDelayed", "Input",
  FontSize->12],
 "; ",
 StyleBox["LinkObject", "Input",
  FontSize->12],
 ", ",
 StyleBox["InputStream", "Input",
  FontSize->12],
 ", and ",
 StyleBox["OutputStream", "Input",
  FontSize->12],
 "; ",
 StyleBox["Word", "Input",
  FontSize->12],
 " and ",
 StyleBox["Number;", "Input",
  FontSize->12],
 " ",
 StyleBox["MessageName", "Input",
  FontSize->12],
 ", ",
 StyleBox["Label", "Input",
  FontSize->12],
 " (for ",
 StyleBox["Goto", "Input",
  FontSize->12],
 "); many others."
}], "Text",ExpressionUUID->"e5251fbe-f678-488c-ae05-b50f4a6b56f9"],

Cell["Further explanation and examples:", "Text",
 FontWeight->"Bold",ExpressionUUID->"4c40aeff-30d0-42a1-b3c0-0e44cefaf8e3"],

Cell["\<\
(1)  Attributes

They do not derive their power from having rewrite rules attached to them; \
i.e. they don't have \"function definitions\".  Their power is that major \
subsystems of the kernel, such as the evaluator, the pattern-matcher, and \
lexical scoping, recognize them conferring special properties to symbols.\
\>", "Text",ExpressionUUID->"ece41e48-7a8c-4a35-9271-e0fbccbabd8e"],

Cell[TextData[{
 StyleBox["Block", "Input",
  FontSize->12],
 "'ing ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " doesn't affect ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " functions:"
}], "Text",ExpressionUUID->"64e1d4d3-096d-4245-b3cd-416d4635d631"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"HoldAll", ",", " ", "f"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", 
     RowBox[{"{", "HoldAll", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"f", "[", "expr_", "]"}], " ", "=", " ", "0"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"f", "[", 
     RowBox[{"Print", "[", "3", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"2bf1ca41-a519-4f27-a1f2-c310ecde7c46"],

Cell[BoxData["0"], "Output",ExpressionUUID->"17b812cb-2b00-45f0-b2c6-01efcf66161f"]
}, Open  ]],

Cell[TextData[{
 "If ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " lost its meaning, then f would have let ",
 StyleBox["Print[3]", "Input",
  FontSize->12],
 " evaluate, as below."
}], "Text",ExpressionUUID->"7ec28547-6b9d-43b9-b6e8-83c0377ac8f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Attributes", ",", " ", "f"}], "}"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{
    RowBox[{
     RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", 
     RowBox[{"{", "HoldAll", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"f", "[", "expr_", "]"}], " ", "=", " ", "0"}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"f", "[", 
     RowBox[{"Print", "[", "3", "]"}], "]"}]}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"b5945d3d-472b-4176-96d9-1d7ef873eb58"],

Cell[BoxData["3"], "Print",ExpressionUUID->"2ac2c10b-9111-4079-a34a-f62343018a44"],

Cell[BoxData["0"], "Output",ExpressionUUID->"25f99a19-4c89-4837-874c-ac7bd28755f2"]
}, Open  ]],

Cell[TextData[{
 "(2)  Option names, and symbolic option values, are recognized by the parent \
function, they don't have their own values.  You must ",
 StyleBox["Block", "Input",
  FontSize->12],
 " the parent function if you want to deactivate it."
}], "Text",ExpressionUUID->"0a2c8d69-bcb1-40ec-8976-3f25b5620352"],

Cell["\<\
(3)  Patterns are just data types recognized as special by one major \
subsystem of the kernel:  the pattern-matcher.  They don't have values.\
\>", "Text",ExpressionUUID->"9be1f392-596b-4191-b68c-c4a7263dca2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Pattern", ",", "Blank"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Replace", "[", 
    RowBox[{"0", ",", " ", 
     RowBox[{"i_Integer", " ", "\[RuleDelayed]", " ", 
      RowBox[{"Hold", "[", 
       RowBox[{"i", "^", "2"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"369d98bf-e5e9-49f9-a41e-972cdfad2037"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  SuperscriptBox["0", "2"], "]"}]], "Output",ExpressionUUID->"673119b0-fc46-\
4eb0-b125-f85f464cd3ca"]
}, Open  ]],

Cell[TextData[{
 "(4)  ",
 StyleBox["Slot", "Input",
  FontSize->12],
 " variables of ",
 StyleBox["Function", "Input",
  FontSize->12],
 " are again data types given special meaning by their parent function.  \
Neither of these fails, nor should it:"
}], "Text",ExpressionUUID->"73e20efc-8be2-401d-bd1b-cb0d39c62a73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Slot", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", " ", "+", " ", "1"}], ")"}], "&"}], " ", "[", "0", "]"}]}],
   "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"7c1d8ea4-cb72-45f8-\
9c59-7fec03a55b6e"],

Cell[BoxData["1"], "Output",ExpressionUUID->"e2c327d3-89d4-4399-9611-182e8a66877e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"x", ",", " ", 
      RowBox[{"x", " ", "+", " ", "1"}]}], "]"}], " ", "[", "0", "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->"8d1d0800-078e-474c-\
9db3-86744385f974"],

Cell[BoxData["1"], "Output",ExpressionUUID->"bd19e6ef-2253-4052-be1d-d585a9daacd0"]
}, Open  ]],

Cell[TextData[{
 "But this will make ",
 StyleBox["Function", "Input",
  FontSize->12],
 " a no-op:"
}], "Text",ExpressionUUID->"652d0bf6-c735-4467-a3f3-26f59c7a6bc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Function", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", "1"}], ")"}], "&"}], " ", "[", "0", 
       "]"}], ",", " ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", " ", 
         RowBox[{"x", " ", "+", " ", "1"}]}], "]"}], " ", "[", "0", "]"}]}], 
     "}"}], " ", "]"}]}], "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUI\
D->"285ba514-0bb1-4010-8b97-2f3043138e2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1", "+", "#1"}], "&"}], ")"}], "[", "0", "]"}], ",", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"x", ",", 
      RowBox[{"1", "+", "x"}]}], "]"}], "[", "0", "]"}]}], "}"}]], "Print",Exp\
ressionUUID->"572a5cff-b252-494e-88ff-fbdbfb45c4cc"]
}, Open  ]],

Cell[TextData[{
 "(5)  ",
 StyleBox["Module", "Input",
  FontSize->12],
 " and the rest of the lexical scoping family \"respect\" each other by not \
overwriting each other's local variables (well, ",
 StyleBox["Rule", "Input",
  FontSize->12],
 " and ",
 StyleBox["Set", "Input",
  FontSize->12],
 " do), and by renaming each other's variables if there is potential \
intersection of scope.  You can make ",
 StyleBox["Function", "Input",
  FontSize->12],
 " a no-op, but it will still be respected as a scoping construct by a ",
 StyleBox["With", "Input",
  FontSize->12],
 " that contains it, and thus can have its variables renamed."
}], "Text",ExpressionUUID->"67752ca8-f489-4dd9-be01-b12c07d10f58"],

Cell["Here's the renaming captured:", "Text",ExpressionUUID->"b3da43b7-0527-4be4-bfdf-85a55ef6ba22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", " ", "=", " ", "1"}], "}"}], ",", " ", 
   RowBox[{"HoldForm", "[", " ", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"x", ",", " ", 
       RowBox[{"x", " ", "+", " ", "a"}]}], "]"}], "[", "2", "]"}], " ", 
    "]"}]}], " ", "]"}]], "Input",ExpressionUUID->"ac65dd54-9c71-43d8-8304-\
12a5025eecd6"],

Cell[BoxData[
 TagBox[
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"x$", ",", 
     RowBox[{"x$", "+", "1"}]}], "]"}], "[", "2", "]"}],
  HoldForm]], "Output",ExpressionUUID->"fa8f6389-e0c7-4fd4-aeb1-f2a22fcf21ee"]
}, Open  ]],

Cell[TextData[{
 "Here we prove that ",
 StyleBox["Function", "Input",
  FontSize->12],
 " is a no-op, but renaming still happens."
}], "Text",ExpressionUUID->"460de899-40ca-4e1d-ab4b-2931dcd2ce88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Function", "}"}], ",", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", " ", "=", " ", "1"}], "}"}], ",", " ", 
     RowBox[{"Print", "[", " ", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{"x", ",", " ", 
         RowBox[{"x", " ", "+", " ", "a"}]}], "]"}], "[", "2", "]"}], " ", 
      "]"}]}], " ", "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"f715c6a2-ceb0-4386-b8ce-ce1dd570475e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{"x$", ",", 
    RowBox[{"1", "+", "x$"}]}], "]"}], "[", "2", "]"}]], "Print",ExpressionUUI\
D->"becea96d-df73-4d25-b2be-de6b56c78d0c"]
}, Open  ]],

Cell[TextData[{
 "(6)  Miscelleaneous meaningful names without values.\n\nBe careful what you \
deactivate.  If you make ",
 StyleBox["Module", "Input",
  FontSize->12],
 " or ",
 StyleBox["LinkWrite", "Input",
  FontSize->12],
 " or certain other things into no-ops, you might cripple the system."
}], "Text",ExpressionUUID->"324f45b9-0368-4cec-ad2c-43067953a65a"],

Cell["\<\
You must deactivate the symbol which owns the definitions or rules\
\>", "Text",
 FontSize->16,
 FontWeight->"Bold",ExpressionUUID->"f26a5a87-6857-4a9f-9dc6-6dfaf51ad60a"],

Cell[TextData[{
 "Sometimes you may guess wrong as to which symbol owns the definitons you \
want to deactivate.  For instance, if you want to disable typeset output in a \
procedure, ",
 StyleBox["Block", "Input",
  FontSize->12],
 "'ing ",
 StyleBox["StandardForm", "Input",
  FontSize->12],
 " will disable few, if any, output forms."
}], "Text",ExpressionUUID->"3224bda2-0098-4199-90e5-aea784400aab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "StandardForm", "}"}], ",", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"x", "^", "2"}], " ", "-", " ", 
     RowBox[{"y", "/", "3"}]}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"a9e678bc-6b95-48a2-b361-da6f47b47a62"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "2"], "-", 
  FractionBox["y", "3"]}]], "Print",ExpressionUUID->"ce709899-933c-43a3-b6f3-\
9321b785966c"]
}, Open  ]],

Cell["But this works as you wish:", "Text",ExpressionUUID->"7b90eb64-f150-43da-b567-8fe03fbdd316"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Plus", ",", " ", "Power", ",", " ", "Times"}], "}"}], ",", " ", 
   RowBox[{"Print", "[", 
    RowBox[{
     RowBox[{"x", "^", "2"}], " ", "-", " ", 
     RowBox[{"y", "/", "3"}]}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"4312769c-9e4e-4bca-a1cd-9e773509086d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "^", "2"}], "+", 
  RowBox[{
   RowBox[{"-", "1"}], "*", 
   RowBox[{"(", 
    RowBox[{"y", "*", 
     RowBox[{"3", "^", 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}], ")"}]}]}]], "Print",ExpressionUUID->\
"7bd00c9c-ad21-433a-ba05-baf6e7d3a910"]
}, Open  ]],

Cell[TextData[{
 "Most formatting rules are associated with individual functions, not with \
types like ",
 StyleBox["OutputForm", "Input",
  FontSize->12],
 " or ",
 StyleBox["StandardForm", "Input",
  FontSize->12],
 ".  There are exceptions; ",
 StyleBox["TraditionalForm", "Input",
  FontSize->12],
 " carries some formatting rules (and has an auto-loading rule attached to \
it)."
}], "Text",ExpressionUUID->"75996213-c140-4370-95dd-d397a2705052"],

Cell[TextData[{
 "Another case:  ",
 StyleBox["MessageName", "Input",
  FontSize->12],
 " has only a formatting rule; it's not in charge of issuing messages:"
}], "Text",ExpressionUUID->"08beaa69-8e86-4aa4-bded-6a89dbeb3565"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "MessageName", "}"}], ",", " ", 
   RowBox[{"1", "/", "0"}]}], "]"}]], "Input",ExpressionUUID->"c8e23014-f1e9-\
4775-bf2e-cda5285fe02b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MessageName", "[", 
   RowBox[{"Power", ",", "\<\"infy\"\>"}], "]"}], 
  RowBox[{
  ":", " "}], "\<\"Infinite expression \\!\\(1\\/0\\) encountered.\"\>"}]], \
"Message",ExpressionUUID->"59d4f7da-4f22-4b30-9b61-1c9f4c5fd791"],

Cell[BoxData[
 InterpretationBox["ComplexInfinity",
  DirectedInfinity[]]], "Output",ExpressionUUID->"bd050558-f7f8-438f-812c-\
b1bf6116d056"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Message", "Input",
  FontSize->12],
 " is in charge of this:"
}], "Text",ExpressionUUID->"b6f49d99-cbae-4e22-9cd2-fead79f9ab47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "Message", "}"}], ",", " ", 
   RowBox[{"1", "/", "0"}]}], "]"}]], "Input",ExpressionUUID->"4ec87d83-7596-\
4748-93a7-698f847585e4"],

Cell[BoxData[
 InterpretationBox["ComplexInfinity",
  DirectedInfinity[]]], "Output",ExpressionUUID->"3de37d37-ab4f-4ee5-a400-\
453d1c58bf2b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Why is MakeBoxes so nasty, I mean HoldAllComplete?", "Subsubsection",ExpressionUUID->"2278f3be-0ace-4093-8460-eccb250fec81"],

Cell[TextData[{
 "It's not simply a user function for typesetting.  It's a core part of the \
main loop when the kernel is being run in a front end.  And any expression, \
including ",
 StyleBox["Sequence[1, 2]", "Input",
  FontSize->12],
 " or ",
 StyleBox["Unevaluated[3 + 4]", "Input",
  FontSize->12],
 ", could be the result of an evaluation, assigned to ",
 StyleBox["Out[n]", "Input",
  FontSize->12],
 ".  Even a ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " function would flatten ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " or discard ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 ".\n\nFurthermore, a user could have a universal ",
 StyleBox["UpValue", "Input",
  FontSize->12],
 " such as\n\n",
 StyleBox["  f /: _[fExpr_f, ___] := fExpr", "Input",
  FontSize->12],
 StyleBox["\n\n",
  FontSize->12],
 "She might do this to define some data type that should be \"slippery\", and \
not allow things to act on it, or to make the data type also canonicalize \
itself or alter itself depending on the caller.  In fact, ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " itself could almost be implemented as a universal ",
 StyleBox["UpValue", "Input",
  FontSize->12],
 " (maybe Dave Withoff or Roman Maeder remembers if that's not quite true).\n \
\nBut it would be a disaster if one of the main components of the main loop \
allowed itself to be rewritten or discarded, such as the output formatter, \
because then this part of the main loop could not complete.\n\nSo that's why \
we needed a few functions able to prevent ",
 StyleBox["any rewrites whatsoever",
  FontSlant->"Italic"],
 " from occurring."
}], "Text",ExpressionUUID->"8689ef0b-4d4f-4692-9c26-8763ac04f994"]
}, Closed]],

Cell[CellGroupData[{

Cell["When to use the different categories of holding stuff?", "Subsubsection",ExpressionUUID->"433c5216-07cf-4b9a-94f7-097d6f977b3c"],

Cell[TextData[{
 "Here are some categories of holding methods we've discussed:\n\n(1) ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 "\n\n(2) the ",
 StyleBox["Hold", "Input",
  FontSize->12],
 "* family and ",
 StyleBox["ReleaseHold", "Input",
  FontSize->12],
 "\n\n(3) give my function f some ",
 StyleBox["Hold", "Input",
  FontSize->12],
 "* attribute\n\n(D) ",
 StyleBox["HoldPattern", "Input",
  FontSize->12],
 " is ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " for patterns, but it can occur at any depth, and no matter where it \
occurs, it is transparent to the pattern matcher.  For purposes of \
pattern-matching, it's as if the HoldPattern wrapper isn't there, yet its \
effect is felt because it prevented evaluation at storage-time of the rule."
}], "Text",ExpressionUUID->"888ed45e-89fd-4830-b186-7c84c209197f"],

Cell["\<\


This section isn't very polished, but here are some of my thoughts on when to \
use each.\
\>", "Text",ExpressionUUID->"56c79b40-7f9d-4257-a9c1-6446a58c22e5"],

Cell[TextData[{
 "(1)  Use ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " for one-shot passing of unevaluated argument."
}], "Text",ExpressionUUID->"94c5f4b3-bfa8-4f91-80e0-554179d22d12"],

Cell[TextData[{
 "(2)  Use ",
 StyleBox["Hold", "Input",
  FontSize->12],
 " containers if you need to play with an expression for a while, can't just \
have it sit still for one operation.  Or if you need to ",
 StyleBox["return a value",
  FontSlant->"Italic"],
 " ",
 "unevaluated",
 ".  Anything you return from a function will instantly get fully evaluated, \
so you have to use a protective container."
}], "Text",ExpressionUUID->"b28fef48-7ec6-47e9-9154-16d6d948fa52"],

Cell[TextData[{
 "(3)  When your function most of the time needs to operate on held thing.\n\n\
- anything that acts on a symbol itself as a name.  ",
 StyleBox["Context", "Input",
  FontSize->12],
 ", ",
 StyleBox["AppendTo", "Input",
  FontSize->12],
 ", ",
 StyleBox["SetDelayed", "Input",
  FontSize->12],
 ".\n\n- If you're making a programming construct that must establish a \
special environment before executing the body, e.g. scoping of vars, setting \
state vars, turning on logging or tracing, trapping calls to built-ins, etc.  \
Iterators like ",
 StyleBox["Table", "Input",
  FontSize->12],
 " and ",
 StyleBox["Plot", "Input",
  FontSize->12],
 " need to pre-scope the variable.\n\n- When your function is a formatter, \
whose job is simply to print the structure as is for display, speech \
rendering, or whatever.  \.14This applies to tex, typeset, or other output \
forms.\n\n   Another way to think of this is that output formatting is a \
different subsystem from evaluation, so it doesn't recognize the evaluator's \
special flags such as Evaluate and Sequence as anything special."
}], "Text",ExpressionUUID->"4fcd5ce2-d0f8-4eb9-8c3f-ac3bd79f13fa"],

Cell["\<\
Hold vs. HoldComplete (or attribute HoldAll vs. HoldAllComplete)\
\>", "Text",
 FontWeight->"Bold",ExpressionUUID->"0a5dda47-0297-4375-b366-f4d397fd6ac6"],

Cell[TextData[{
 "When is ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " a strong enough attribute for your function, and when is ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " necessary?\n\nUnless your function must treat ",
 StyleBox["Sequence[...]", "Input",
  FontSize->12],
 " and ",
 StyleBox["Evaluate[...]", "Input",
  FontSize->12],
 " as generic expressions with no meaning, or it needs to prevent ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 " of its arguments from firing, then you don't need ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"1dd48cdf-1446-4496-b651-aa5ff7d28f52"],

Cell[TextData[{
 "Ask yourself:  ",
 StyleBox["Why is it compelling",
  FontSlant->"Italic"],
 " for me to override the normal semantics of ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " and ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " and ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 ", to prevent ",
 StyleBox["f[Evaluate[1 + 2]]", "Input",
  FontSize->12],
 " from calling ",
 StyleBox["f[3]", "Input",
  FontSize->12],
 "?\nIt had better be that f almost always wants to consider ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " a dumb expression, not something meaningful."
}], "Text",ExpressionUUID->"a53dfbea-7a7a-47f2-bf0d-a2bf8efac652"],

Cell[TextData[{
 "Not many functions carry the attribute ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 ":"
}], "Text",ExpressionUUID->"c91e6f18-53bc-44bb-ac90-25dadd7514c0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Names", "[", "\"\<System`*\>\"", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Attributes", " ", "@@", " ", 
       RowBox[{"ToHeldExpression", "[", "#", "]"}]}], ",", " ", 
      "HoldAllComplete"}], "]"}], "&"}]}], "]"}]], "Input",ExpressionUUID->\
"d77471f9-c019-468e-9ad1-5695837be153"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"HoldComplete\"\>", ",", "\<\"InterpretationBox\"\>", 
   ",", "\<\"MakeBoxes\"\>", ",", "\<\"Parenthesize\"\>", 
   ",", "\<\"Unevaluated\"\>"}], "}"}]], "Output",ExpressionUUID->"d42b6932-\
8ab5-4241-ac24-d3765cecfb8f"]
}, Open  ]],

Cell[TextData[{
 StyleBox["MakeBoxes", "Input",
  FontSize->12],
 ", and its sibling ",
 StyleBox["Parenthesize", "Input",
  FontSize->12],
 ", must be able to format absolutely any expression for output, as it is a \
critical part of the main loop when a front end is involved.  If the result \
of evaluation is ",
 StyleBox["Sequence[1, 2]", "Input",
  FontSize->12],
 ", or if you display ",
 StyleBox["DownValues[f]", "Input",
  FontSize->12],
 " and a piece of code contains ",
 StyleBox["Evaluate[arg]", "Input",
  FontSize->12],
 ", ",
 StyleBox["MakeBoxes", "Input",
  FontSize->12],
 " ",
 StyleBox["must",
  FontSlant->"Italic"],
 " treat it as a dumb expression."
}], "Text",ExpressionUUID->"b9b7e714-45b4-41de-8546-b5fc13ee6688"],

Cell[TextData[{
 StyleBox["Cardinal rule",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ":  Formatting must never evaluate what it is given.  It should simply \
figure out how to display it, never evaluating any parts."
}], "Text",ExpressionUUID->"d49c90b6-c755-41c3-a224-44f37e7aaa9d"],

Cell[TextData[{
 "Not many functions are ",
 StyleBox["SequenceHold", "Input",
  FontSize->12],
 ", either:"
}], "Text",ExpressionUUID->"6558c423-c120-4183-ad8a-15a06ca6eba2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Names", "[", "\"\<System`*\>\"", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Attributes", " ", "@@", " ", 
       RowBox[{"ToHeldExpression", "[", "#", "]"}]}], ",", " ", 
      "SequenceHold"}], "]"}], "&"}]}], "]"}]], "Input",ExpressionUUID->\
"63a95e49-ad39-4e27-863e-05efa115eaa8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Rule\"\>", ",", "\<\"RuleDelayed\"\>", ",", "\<\"Set\"\>", 
   ",", "\<\"SetDelayed\"\>", ",", "\<\"TagSet\"\>", 
   ",", "\<\"TagSetDelayed\"\>", ",", "\<\"Timing\"\>", ",", "\<\"UpSet\"\>", 
   ",", "\<\"UpSetDelayed\"\>"}], "}"}]], "Output",ExpressionUUID->"eefc662d-\
58e3-47e8-80ae-fd1390036839"]
}, Open  ]],

Cell[TextData[{
 "Other than the ",
 StyleBox["Rule", "Input",
  FontSize->12],
 "* and *",
 StyleBox["Set", "Input",
  FontSize->12],
 "* family, which need to handle an rhs (right-hand side) of ",
 StyleBox["Sequence[...]", "Input",
  FontSize->12],
 ", there is only one function that prevents flattening of sequences:  ",
 StyleBox["Timing", "Input",
  FontSize->12],
 ".  I don't offhand know why it is more compelling for ",
 StyleBox["Timing", "Input",
  FontSize->12],
 " to handle ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " input than, say, the ",
 StyleBox["Trace", "Input",
  FontSize->12],
 "* family, so let's ask someone else this question.  In other words, why is \
it more unreasonable to require the user to do ",
 StyleBox["Timing[Unevaluated[Sequence[...]]]", "Input",
  FontSize->12],
 " than to require ",
 StyleBox["Timing[Unevaluated[Sequence[...]]]", "Input",
  FontSize->12],
 "?"
}], "Text",ExpressionUUID->"f433438d-996e-4a69-8817-c1850b43bd2a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Myth debunking:  HoldAllComplete isn't some super insulator against the \
parser, against generic structural operations or pattern-finders or the like. \
 It is somewhat more powerful than HoldAll, in four ways, and that's it!\
\>", "Subsubsection",ExpressionUUID->"f3dffcad-5794-47fc-84f7-beeffda5d076"],

Cell[TextData[{
 "A function h with the attribute ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 ", such as ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 ", is only slightly stronger than one with the ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " attribute, despite its reputation as some super insulator that prevents \
anything from happening inside it.  The differences are for arguments at \
level 1 of h[...]:\n\n(1)  ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " won't be flattened\n\n(2)  ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " won't cause evaluation.\n\n(3)  ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " won't be discarded before the argument is fed to a definition.\n\n(4)  \
g[...] won't cause an ",
 StyleBox["UpValue", "Input",
  FontSize->12],
 " for g to fire even if the rule matches."
}], "Text",ExpressionUUID->"cf33be7d-8d11-4ed8-be8a-fd4eecb0cbf7"],

Cell[TextData[{
 StyleBox["\[HappySmiley]",
  FontSize->24,
  FontColor->RGBColor[1, 0, 1]],
 "  Hence, you can modify or analyze held expressions with all the familiar \
functional and other commands, e.g. ",
 StyleBox["Map, ReplaceAll, FlattenAt, DeleteCases, Count", "Input",
  FontSize->12],
 ", whatever you want."
}], "Text",ExpressionUUID->"5a538b2d-e577-41a7-ac94-6671182af896"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Argument evaluation precedes {Listable, Orderless, Flat, ...}, and any other \
structure-rewriting attributes.\
\>", "Subsubsection",ExpressionUUID->"09728b04-90e0-4320-9e6a-f51439b313c5"],

Cell[TextData[{
 "Thus, if you make nested ",
 StyleBox["Dot", "Input",
  FontSize->12],
 " calls on actual matrices, the grouping you specified will be respected, \
even though ",
 StyleBox["Dot", "Input",
  FontSize->12],
 " carries the attribute ",
 StyleBox["Flat", "Input",
  FontSize->12],
 ".  You might think it would not because if you evaluate it for abstract \
symbolic arguments, it is treated as if it's associative:"
}], "Text",ExpressionUUID->"ecf5c401-c71b-4888-b63e-2faac82f236b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dot", "[", 
  RowBox[{
   RowBox[{"Dot", "[", 
    RowBox[{"A", ",", " ", 
     RowBox[{"Dot", "[", 
      RowBox[{"B", ",", " ", "C"}], "]"}]}], "]"}], ",", " ", 
   RowBox[{"Dot", "[", 
    RowBox[{"D", ",", " ", "B"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"07e5f5b4-bf00-479b-a4cc-a1df3ae845ba"],

Cell[BoxData[
 RowBox[{"A", ".", "B", ".", "C", ".", "D", ".", "B"}]], "Output",ExpressionUU\
ID->"97e306a6-c12c-4c37-978d-9c0f6672b4dc"]
}, Open  ]],

Cell[TextData[{
 "But if the symbols are actual matrices, then the innermost ",
 StyleBox["Dot", "Input",
  FontSize->12],
 "'s will evaluate fully before the outer ",
 StyleBox["Dot", "Input",
  FontSize->12],
 " acts, so it will work fine."
}], "Text",ExpressionUUID->"f999bfdb-b44a-489c-83a3-7e6e4439ab43"],

Cell[TextData[{
 "In some cases, you want a function to invoke attributes on the original \
form of the arguments, not on the post-evaluated arguments.  You do that \
simply by adding ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " to the attributes:"
}], "Text",ExpressionUUID->"2d100ab2-6f9b-46c4-a612-53d26c9479e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "f", "]"}], " ", "=", " ", 
   RowBox[{"{", "Flat", "}"}]}], ";"}]], "Input",ExpressionUUID->"fc411ead-\
3fea-4893-a332-f5e009a454e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetAttributes", "[", 
   RowBox[{"f", ",", " ", "HoldAll"}], "]"}], ";"}]], "Input",ExpressionUUID->\
"f585e251-76c7-4564-bc57-79082e19de08"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "whatever", "]"}], " ", ":=", " ", "whatever"}]], "Input",\
ExpressionUUID->"e419ff05-e2f9-4d06-be6c-5a3bbe405ec7"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Wrapping an argument in Unevaluated does NOT prevent that argument's head \
from exercising its UpValues!\
\>", "Subsubsection",ExpressionUUID->"794ab795-0686-41e9-b3c9-c36c71a565fa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<a\>\"", "]"}], ";"}], "\n", 
 RowBox[{"a", " ", "/:", " ", 
  RowBox[{"_", "[", 
   RowBox[{"___", ",", " ", "a", ",", " ", "___"}], "]"}], " ", ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Print", "[", "\"\<a fired\>\"", "]"}], ";", " ", "Null"}], 
   ")"}]}]}], "Input",ExpressionUUID->"3b49a615-9564-455c-a52e-2aa8bd2f4dd1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"HoldComplete", "[", "x", "]"}]}]], "Input",ExpressionUUID->\
"c88b44e8-cadb-4bba-bf33-f60c2ea789b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "a", "]"}]], "Input",ExpressionUUID->"7aa343cb-780e-4575-b2ce-6bbdc59c341f"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"1e8a0d5e-1c56-48e9-9f27-a11000888001"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"Unevaluated", "[", "a", "]"}], "]"}]], "Input",ExpressionUUID->\
"e6f93966-538c-488b-abd2-7c0717d4872a"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"31051439-7f52-4230-9197-352c0190142c"]
}, Open  ]],

Cell[TextData[{
 "The reason is that ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " simply ensures that the symbol 'a' is passed to f in original form, then \
",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " disappears.  "
}], "Text",ExpressionUUID->"86a59114-9599-4436-ac26-d27bd5556fc3"],

Cell["\<\
So how do you assign new values to it?  Set and Unset and family don't work:\
\>", "Text",ExpressionUUID->"8aa0e3b9-8494-4b89-8f27-89edc2069b5c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", " ", "=."}]], "Input",ExpressionUUID->"cd1983ab-f9bb-41bf-825c-d74db46759d1"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"784ddeb3-d1e8-419d-876a-098f462ee525"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"a", " ", "=", " ", "0"}], ";"}]], "Input",ExpressionUUID->"31a841e9-4448-4ba6-a38f-138b1ff1d16c"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"d240cb15-c94c-4e84-8028-9be2493a8348"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", " ", "a"}]], "Input",ExpressionUUID->"2163664a-f723-4325-a8ad-51d3b2ed6bea"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"e176499f-3221-41b8-b066-709743696680"],

Cell[BoxData["\<\"Global`a\"\>"], "Print",ExpressionUUID->"0f9b18e8-33a6-4f2e-995d-160350782c04"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"_", "[", 
          RowBox[{"___", ",", "a", ",", "___"}], "]"}], "^:=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Print", "[", "\<\"a fired\"\>", "]"}], ";"}], ")"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[a],
  Editable->False]], "Print",ExpressionUUID->"1aef2d1d-ec31-498d-adff-\
b5ac72259e0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TagUnset", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", "a", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"HoldPattern", "[", 
    RowBox[{"HoldPattern", "[", "\[IndentingNewLine]", 
     RowBox[{"_", "[", 
      RowBox[{"___", ",", " ", "a", ",", " ", "___"}], "]"}], 
     "\[IndentingNewLine]", "]"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"a881cff1-f63d-4fc6-97b2-026b0a0b4094"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"b91daa2b-708b-4879-b507-5ee6cfba2f9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", " ", "a"}]], "Input",ExpressionUUID->"71d0d5ac-6a77-4205-ba20-e89046686edc"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"f1a19359-838e-4a66-aa4c-7c60035ca5ea"],

Cell[BoxData["\<\"Global`a\"\>"], "Print",ExpressionUUID->"6c665557-5747-48fd-a0c4-7cc7b468aadb"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"_", "[", 
          RowBox[{"___", ",", "a", ",", "___"}], "]"}], "^:=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Print", "[", "\<\"a fired\"\>", "]"}], ";"}], ")"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[a],
  Editable->False]], "Print",ExpressionUUID->"ee12e8d9-b8a0-40f5-9cb6-\
ea26d97430e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HoldPattern", " ", "@", " ", 
   RowBox[{"HoldPattern", "[", "a", "]"}]}], " ", "=", " ", "0"}]], "Input",Ex\
pressionUUID->"466f35bb-af2b-4b42-a057-5a9a3abcb02d"],

Cell[BoxData["0"], "Output",ExpressionUUID->"adf5308b-1d13-4185-a831-efcbd6cf30fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", " ", "a"}]], "Input",ExpressionUUID->"9a2f8275-d294-4480-85d0-eda04dc90aa5"],

Cell[BoxData["\<\"a fired\"\>"], "Print",ExpressionUUID->"2966e0cd-2797-4947-a240-a084cbb108ed"],

Cell[BoxData["\<\"Global`a\"\>"], "Print",ExpressionUUID->"8dfa7f5a-e4c1-4486-9244-d8acc1f67ae3"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"HoldPattern", "[", 
          RowBox[{"HoldPattern", "[", "a", "]"}], "]"}], "=", "0"}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]},
    {" "},
    {GridBox[{
       {
        RowBox[{
         RowBox[{"_", "[", 
          RowBox[{"___", ",", "a", ",", "___"}], "]"}], "^:=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Print", "[", "\<\"a fired\"\>", "]"}], ";"}], ")"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[a],
  Editable->False]], "Print",ExpressionUUID->"97644285-9968-48cd-ac01-\
643a2ceddd85"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Print", " ", "@", " ", 
  RowBox[{"Unevaluated", " ", "@", " ", 
   RowBox[{"Definition", "[", "a", "]"}]}]}]], "Input",ExpressionUUID->\
"c2f383eb-1a6c-4e44-ae6b-9abad0307eff"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         RowBox[{"_", "[", 
          RowBox[{"___", ",", "a", ",", "___"}], "]"}], "^:=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Print", "[", "\<\"a fired\"\>", "]"}], ";"}], ")"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[a],
  Editable->False]], "Print",ExpressionUUID->"047946ec-5602-4e4e-8b6f-\
0ea31b46bdfb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Print", " ", "@", " ", 
  RowBox[{"Unevaluated", " ", "@", " ", 
   RowBox[{"FullDefinition", "[", "a", "]"}]}]}]], "Input",ExpressionUUID->\
"c2cae13a-9dc2-4744-bb86-166a2dc534b0"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {GridBox[{
          {
           RowBox[{
            RowBox[{"_", "[", 
             RowBox[{"___", ",", "a", ",", "___"}], "]"}], "^:=", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Print", "[", "\<\"a fired\"\>", "]"}], ";"}], ")"}]}]}
         },
         BaselinePosition->{Baseline, {1, 1}},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{"Columns" -> {{
              Scaled[0.999]}}, "Rows" -> {{1.}}}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  FullDefinition[a],
  Editable->False]], "Print",ExpressionUUID->"f0a04940-8286-4d27-9eb6-\
a1f53ebeb4e7"]
}, Open  ]],

Cell["This is a puzzle for the reader.", "Text",ExpressionUUID->"488cfc1a-b83e-4d79-9b4d-28cb54b7d44a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
\"Non-standard Evaluation\":  That unexplained complicated thing.\
\>", "Subsubsection",ExpressionUUID->"5cbb04c2-9ce0-48da-8d77-4d91699a2062"],

Cell["Listing of types of special evaluation", "Text",
 FontSize->16,
 FontWeight->"Bold",ExpressionUUID->"4a245b10-1c74-408f-8697-13148f75dddf"],

Cell["There are different categories of  non-standard evaluation.", "Text",ExpressionUUID->"ea30150c-8308-4cfc-9598-bfcd62e4ceed"],

Cell[TextData[{
 "(1)  ",
 StyleBox["Left-hand side of ",
  FontVariations->{"Underline"->True}],
 StyleBox["assignments",
  FontSlant->"Italic",
  FontVariations->{"Underline"->True}],
 " (NOT ",
 StyleBox["rules",
  FontSlant->"Italic"],
 "!) \[Element] {*",
 StyleBox["Set", "Input",
  FontSize->12],
 "* and *",
 StyleBox["SetDelayed", "Input",
  FontSize->12],
 "* family, ",
 StyleBox["AddTo", "Input",
  FontSize->12],
 " & ",
 StyleBox["SubtractFrom", "Input",
  FontSize->12],
 " & ",
 StyleBox["TimesBy", "Input",
  FontSize->12],
 " & ",
 StyleBox["DivideBy", "Input",
  FontSize->12],
 ", ",
 StyleBox["AppendTo", "Input",
  FontSize->12],
 ", ",
 StyleBox["PrependTo", "Input",
  FontSize->12],
 "}.  Hopefully this is a complete listing of destructive functions in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".\n",
 StyleBox["How they are special",
  FontVariations->{"Underline"->True}],
 ":  They evaluate head and args, but don't let head ",
 StyleBox["act on",
  FontSlant->"Italic"],
 " args.  Of course, if head is a holding container, then args won't even \
evaluate, so this is consistent with evaluating ordinary expressions.  You \
could just about simulate what the partially evaluated lhs will be in the \
stored assignment:"
}], "Text",ExpressionUUID->"aafcec47-6083-4485-8537-ddd2cc24de13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"H", "[", 
   RowBox[{"e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], "]"}], " ", ":=", 
  " ", "rhs"}]], "Input",ExpressionUUID->"7ef84525-e3c1-42f8-8d52-\
bfe9c18c0cd7"],

Cell["\<\
by evaluating the head and args separately, then sticking them into a template\
\>", "Text",ExpressionUUID->"8705a4d0-a04c-4fe8-87d9-438caa94a53e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"HoldComplete", "[", " ", 
    RowBox[{"#1", "[", "##2", "]"}], " ", "]"}], "&"}], " ", "[", 
  RowBox[{"H", ",", " ", "e1", ",", " ", "\[Ellipsis]", ",", " ", "en"}], 
  "]"}]], "Input",ExpressionUUID->"522ca49d-0f17-4200-8540-03c916955cd8"],

Cell[TextData[{
 "(2)  ",
 StyleBox["Iterators",
  FontVariations->{"Underline"->True}],
 " \[Element] {",
 StyleBox["Table", "Input",
  FontSize->12],
 " & ",
 StyleBox["Do", "Input",
  FontSize->12],
 " & ",
 StyleBox["While", "Input",
  FontSize->12],
 " & ",
 StyleBox["For", "Input",
  FontSize->12],
 ", ",
 StyleBox["Sum", "Input",
  FontSize->12],
 " & ",
 StyleBox["Product", "Input",
  FontSize->12],
 ", ",
 StyleBox["Plot", "Input",
  FontSize->12],
 " and ",
 StyleBox["Play", "Input",
  FontSize->12],
 " family},\nbut NOT functional iterators or recursors {",
 StyleBox["Nest", "Input",
  FontSize->12],
 " and ",
 StyleBox["Fold", "Input",
  FontSize->12],
 " family, ",
 StyleBox["Array", "Input",
  FontSize->12],
 ", ",
 StyleBox["Map", "Input",
  FontSize->12],
 " and its many related things)\n",
 StyleBox["How they are special",
  FontVariations->{"Underline"->True}],
 ":  They dynamically scope the iterator variables (found in rgs 2 and \
beyond) then evaluate the iterand (arg 1) for all values of the iterators in \
sequence."
}], "Text",ExpressionUUID->"5c276517-70bd-4150-80d8-17dd843db9bf"],

Cell[TextData[{
 "(3)  ",
 StyleBox["Misc. control structures",
  FontVariations->{"Underline"->True}],
 ":  {",
 StyleBox["And, Or, If, Which, Switch", "Input",
  FontSize->12],
 ")\n",
 StyleBox["How they are special",
  FontVariations->{"Underline"->True}],
 ":  They basically go from left to right, but don't necessarily evaluate all \
arguments.  In fact, except for the short-circuit ",
 StyleBox["And", "Input",
  FontSize->12],
 " and ",
 StyleBox["Or", "Input",
  FontSize->12],
 ", they are guaranteed not to evaluate all args if there are two or more \
branches (a single branch would be a degenerate case for ",
 StyleBox["If", "Input",
  FontSize->12],
 ", ",
 StyleBox["Which", "Input",
  FontSize->12],
 ", and ",
 StyleBox["Switch", "Input",
  FontSize->12],
 ")."
}], "Text",ExpressionUUID->"1ddb3a88-e91d-4af6-8aed-e6f9a4ba52ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Switch", "[", 
  RowBox[{"0", ",", "\[IndentingNewLine]", "_String", ",", " ", 
   RowBox[{"Print", "[", "\"\<String\>\"", "]"}], ",", "\[IndentingNewLine]", 
   "_Symbol", ",", " ", 
   RowBox[{"Print", "[", "\"\<Symbol\>\"", "]"}], ",", "\[IndentingNewLine]", 
   "_Integer", ",", " ", 
   RowBox[{"Print", "[", "\"\<Integer\>\"", "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"a0072099-6ce3-4b55-9245-927f2914ff96"],

Cell[BoxData["\<\"Integer\"\>"], "Print",ExpressionUUID->"1ddd38c0-c990-47cf-8b7a-029b44567811"]
}, Open  ]],

Cell[TextData[{
 "(4)  ",
 StyleBox["Scoping constructs",
  FontVariations->{"Underline"->True}],
 ":  ",
 StyleBox["Module, With, Block, Function, Compile, Condition", "Input",
  FontSize->12],
 " (of course, the *",
 StyleBox["Rule", "Input",
  FontSize->12],
 "* and *",
 StyleBox["Set", "Input",
  FontSize->12],
 "* family are scoping constructs, too, but when categorizing things \
according to uneval'n behavior, they don't belong in this category).\n",
 StyleBox["How they are special",
  FontVariations->{"Underline"->True}],
 ":  \n\n",
 StyleBox["Short Version",
  FontVariations->{"Underline"->True}],
 ":\n- Evaluate initializations of localvars\n- Perform actual scoping of \
declared local vars by either temporarily forgetting their own values \
(dynamic scoping) or by marking their occurrences in unevaluated body.\n- \
Evaluate body (either with its fixed set of markings, known as static \
scoping; or with no markings cuz original symbols are being used simply with \
new values, known as dynamic scoping)"
}], "Text",ExpressionUUID->"acb108ac-b807-4118-88d6-7562dfb1f646"],

Cell[TextData[{
 "(5)  Miscellaneous:\n\nMany others query or modify their argument, like ",
 StyleBox["Context", "Input",
  FontSize->12],
 " and ",
 StyleBox["Protect", "Input",
  FontSize->12],
 ", which act on symbols.  Nothing special; they just need to receive the \
symbol intact in case it has a value.\n\nSome things set up a special \
environment, such as the ",
 StyleBox["Trace", "Input",
  FontSize->12],
 "* and ",
 StyleBox["Stack", "Input",
  FontSize->12],
 "* family, which turn on extra logging info."
}], "Text",ExpressionUUID->"cf75650b-c707-4d1f-b0ad-c00db278a504"],

Cell["\<\



\
\>", "Text",ExpressionUUID->"39571a1a-0147-4055-be84-09e448379c04"],

Cell[TextData[{
 StyleBox["Long Version",
  FontVariations->{"Underline"->True}],
 ":\nFirst they look at the local variable declaration.  If there are any \
initializations, they evaluate those, in the outside scope.\nThen they \
\"perform localization\" of the declared local vars.\nFinally they evaluate \
the body with this localization \"in effect\"."
}], "Text",ExpressionUUID->"fb222d4f-00db-456e-be9f-1e58ddb7a280"],

Cell[BoxData[
 RowBox[{"ScopingConstruct", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"v1", " ", "=", " ", "a1"}], ",", " ", "\[Ellipsis]", ",", " ", 
     RowBox[{"vn", " ", "=", " ", "an"}]}], "}"}], ",", "\[IndentingNewLine]",
    "body"}], "\[IndentingNewLine]", "]"}]], "Input",ExpressionUUID->\
"a5274c66-631c-4eb1-a0dd-3a12a8a462cf"],

Cell[TextData[{
 "\"perform localization\":\n\n- ",
 StyleBox["Block", "Input",
  FontSize->12],
 " simply saves the original values of the specified symbols then clears \
them.\n\n- All the others, which are static scopers, take each local variable \
x, scan the unevaluated body for occurrences of x that are owned by this \
scoping construct, and mark them.  In the case of ",
 StyleBox["Module", "Input",
  FontSize->12],
 ", the marking is visible at top-level:  x is replaced by a new, unique \
symbol x$n.  In the others, ",
 StyleBox["the marking stage cannot be captured on film",
  FontSlant->"Italic"],
 "!"
}], "Text",ExpressionUUID->"4237b567-ca8e-4386-95d5-e3bd505c6e70"],

Cell[TextData[{
 "\"in effect\":\n\n  - For ",
 StyleBox["Block", "Input",
  FontSize->12],
 ", the symbols you specified simply have temporary amnesia.  The body is \
executed in an environment where any time these symbols arise in the \
computation, whether they were originally in the text of ",
 StyleBox["body",
  FontSlant->"Italic"],
 "'s code or not, they'll have the temporary values (or lack of values).\n  \n\
  - For static scopers, the unevaluated ",
 StyleBox["body",
  FontSlant->"Italic"],
 " has already had all owned instances marked.  In the case of ",
 StyleBox["Module", "Input",
  FontSize->12],
 ", the dummy symbols will get evaluated when the evaluator reaches them \
[their turn comes up].  In the others, they do instant substitution, ",
 StyleBox["ReplaceAll", "Input",
  FontSize->12],
 "-style (forgetting different levels of scoping respect, please), on the \
body before evaluating, so the \"temporary variables\" are too ephemeral for \
top-level film capture (unless withoff or bruce knows some method I don't)."
}], "Text",ExpressionUUID->"c9bb2b5f-ffa8-47af-97d6-acfeccfd14e2"],

Cell["Generating list of built-in funcs with Hold attributes", "Text",
 FontSize->16,
 FontWeight->"Bold",ExpressionUUID->"90856fec-a658-4820-8a16-0ac52f8b3efe"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mappings", " ", "=", " ", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"Names", "[", "\"\<System`*\>\"", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"symName_String", " ", "\[RuleDelayed]", " ", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"holdAttrs", " ", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Attributes", " ", "@@", " ", 
             RowBox[{"ToHeldExpression", "[", "symName", "]"}]}], ",", " ", 
            RowBox[{
             RowBox[{"StringMatchQ", "[", 
              RowBox[{
               RowBox[{"ToString", "[", "#", "]"}], ",", " ", 
               "\"\<*Hold*\>\""}], "]"}], "&"}]}], "]"}]}], "}"}], ",", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Symbol", "[", "symName", "]"}], " ", "\[Rule]", " ", 
           "holdAttrs"}], ")"}], " ", "/;", " ", 
         RowBox[{"holdAttrs", " ", "=!=", " ", 
          RowBox[{"{", "}"}]}]}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"funcsWithHoldAttrs", ",", " ", "holdAttrs"}], "}"}], " ", "=", 
   " ", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Identity", "[", "#1", "]"}], ",", " ", 
       RowBox[{"Union", " ", "@@", " ", "#2"}]}], "}"}], "&"}], " ", "@@", 
    " ", 
    RowBox[{"Thread", "[", 
     RowBox[{"mappings", ",", " ", "Rule"}], "]"}]}]}], ";"}]}], "Input",Expre\
ssionUUID->"8a79cc2e-f867-4197-9278-f92fb2da638e"],

Cell[CellGroupData[{

Cell[BoxData["holdAttrs"], "Input",ExpressionUUID->"617ff86f-1ec0-4b7e-9c1c-3e9c916149ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "HoldAll", ",", "HoldAllComplete", ",", "HoldFirst", ",", "HoldRest", ",", 
   "NHoldAll", ",", "NHoldFirst", ",", "NHoldRest", ",", "SequenceHold"}], 
  "}"}]], "Output",ExpressionUUID->"69285675-b8f9-4b28-ad3e-ccb5bd3e154e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ordinaryHoldFuncs", " ", "=", " ", 
  RowBox[{"First", " ", "/@", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"mappings", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
        "HoldAll", " ", "|", " ", "HoldAllComplete", " ", "|", " ", 
         "HoldFirst", " ", "|", " ", "HoldRest", " ", "|", " ", 
         "SequenceHold"}]}], "]"}], "&"}]}], "]"}]}]}]], "Input",ExpressionUUI\
D->"26393a05-9854-4466-b11a-323cec94b6cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "AbortProtect", ",", "AddTo", ",", "Alias", ",", "And", ",", "AppendTo", 
   ",", "Attributes", ",", "Block", ",", "Catch", ",", "Check", ",", 
   "CheckAbort", ",", "CheckAll", ",", "Clear", ",", "ClearAll", ",", 
   "ClearAttributes", ",", "Compile", ",", "CompiledFunction", ",", 
   "CompoundExpression", ",", "Condition", ",", "ConsoleMessage", ",", 
   "ConsolePrint", ",", "Context", ",", "ContourPlot", ",", "Debug", ",", 
   "Decrement", ",", "DefaultValues", ",", "Definition", ",", "DensityPlot", 
   ",", "Dialog", ",", "DivideBy", ",", "Do", ",", "DownValues", ",", 
   "DumpSave", ",", "EditDefinition", ",", "Exists", ",", "FileName", ",", 
   "FindMinimum", ",", "FindRoot", ",", "For", ",", "ForAll", ",", 
   "FormatValues", ",", "FullDefinition", ",", "Function", ",", 
   "FunctionInterpolation", ",", "Hold", ",", "HoldComplete", ",", "HoldForm",
    ",", "HoldPattern", ",", "If", ",", "Increment", ",", "Information", ",", 
   "InterpretationBox", ",", "Literal", ",", "MakeBoxes", ",", 
   "MatchLocalNameQ", ",", "MemoryConstrained", ",", "Message", ",", 
   "MessageName", ",", "MessagePacket", ",", "Messages", ",", "Module", ",", 
   "NIntegrate", ",", "NProduct", ",", "NSum", ",", "NValues", ",", "Off", 
   ",", "On", ",", "Or", ",", "OwnValues", ",", "ParametricPlot", ",", 
   "ParametricPlot3D", ",", "Parenthesize", ",", "Pattern", ",", 
   "PatternTest", ",", "Play", ",", "Plot", ",", "Plot3D", ",", 
   "PreDecrement", ",", "PreIncrement", ",", "PrependTo", ",", "Product", ",",
    "Protect", ",", "Remove", ",", "Rule", ",", "RuleCondition", ",", 
   "RuleDelayed", ",", "SampledSoundFunction", ",", "Save", ",", "Set", ",", 
   "SetAttributes", ",", "SetDelayed", ",", "Stack", ",", "StackBegin", ",", 
   "StackComplete", ",", "StackInhibit", ",", "SubtractFrom", ",", 
   "SubValues", ",", "Sum", ",", "Switch", ",", "Table", ",", "TagSet", ",", 
   "TagSetDelayed", ",", "TagUnset", ",", "TimeConstrained", ",", "TimesBy", 
   ",", "Timing", ",", "Trace", ",", "TraceDialog", ",", "TracePrint", ",", 
   "TraceScan", ",", "UnAlias", ",", "Unevaluated", ",", "Unprotect", ",", 
   "Unset", ",", "UpSet", ",", "UpSetDelayed", ",", "UpValues", ",", "ValueQ",
    ",", "Which", ",", "While", ",", "With", ",", "$ConditionHold", ",", 
   "$Failed"}], "}"}]], "Output",ExpressionUUID->"e1a63d7c-2ceb-44d2-be6d-\
b6000219b6a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nHoldFuncs", " ", "=", " ", 
  RowBox[{"First", " ", "/@", " ", 
   RowBox[{"Select", "[", 
    RowBox[{"mappings", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        ",", " ", 
        RowBox[{
        "NHoldAll", " ", "|", " ", "NHoldFirst", " ", "|", " ", 
         "NHoldRest"}]}], "]"}], "&"}]}], "]"}]}]}]], "Input",ExpressionUUID->\
"b84404fc-bb1f-4085-b880-34f0998b530a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Drop", ",", "EllipticTheta", ",", "EllipticThetaPrime", ",", "Extract", 
   ",", "HeldPart", ",", "MathieuC", ",", "MathieuCharacteristicA", ",", 
   "MathieuCharacteristicB", ",", "MathieuCPrime", ",", "MathieuS", ",", 
   "MathieuSPrime", ",", "Part", ",", "PolyGamma", ",", "Root", ",", 
   "StieltjesGamma", ",", "Take"}], "}"}]], "Output",ExpressionUUID->\
"de2ebd6f-fbbf-4077-9306-717b9f62025c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Names", "[", "\"\<System`*\>\"", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"ToExpression", "[", 
       RowBox[{"#", ",", " ", "InputForm", ",", " ", "Attributes"}], "]"}], 
      ",", " ", 
      RowBox[{
      "NHoldAll", " ", "|", " ", "NHoldFirst", " ", "|", " ", "NHoldRest"}]}],
      "]"}], "&"}]}], "]"}]], "Input",ExpressionUUID->"1b89820f-3127-4f8a-\
a72a-55eff7216bcc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Drop\"\>", ",", "\<\"EllipticTheta\"\>", 
   ",", "\<\"EllipticThetaPrime\"\>", ",", "\<\"Extract\"\>", 
   ",", "\<\"HeldPart\"\>", ",", "\<\"MathieuC\"\>", 
   ",", "\<\"MathieuCharacteristicA\"\>", 
   ",", "\<\"MathieuCharacteristicB\"\>", ",", "\<\"MathieuCPrime\"\>", 
   ",", "\<\"MathieuS\"\>", ",", "\<\"MathieuSPrime\"\>", ",", "\<\"Part\"\>",
    ",", "\<\"PolyGamma\"\>", ",", "\<\"Root\"\>", 
   ",", "\<\"StieltjesGamma\"\>", ",", "\<\"Take\"\>"}], "}"}]], "Output",Expr\
essionUUID->"eae07c47-aa69-4205-830b-a2f083b5a3b8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Always anticipate that users might send Unevaluated arguments into your \
function!\n",
 StyleBox["\"Add a mental red flag to your programming habits\"",
  FontColor->RGBColor[1, 0, 0]]
}], "Subsubsection",ExpressionUUID->"e1d4ee6b-82c8-4a1a-9f5b-b373a8d6d0c5"],

Cell["\<\
Here I'm referring to any uses you make of the arguments passed to your \
function.  Take this:\
\>", "Text",ExpressionUUID->"6cd161cb-9f6b-491f-b5cd-f33740517840"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindThem", "[", 
   RowBox[{"expr_", ",", " ", "patt_", ",", " ", "opts___"}], "]"}], " ", ":=",
   "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "...", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"Unevaluated", "[", "expr", "]"}], ",", " ", 
        RowBox[{"Unevaluated", "[", "patt", "]"}]}], "]"}], ";"}], 
     "\[IndentingNewLine]", "..."}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",ExpressionUUID->"4b77165b-30f4-4635-96cc-f8a900e20726"],

Cell[TextData[{
 "If you want your function to \"respect\" ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " as specified by the user, you have to wrap every instance of your pattern \
variables (in the example above, those are ",
 StyleBox["expr", "Input",
  FontSize->12],
 ", ",
 StyleBox["patt", "Input",
  FontSize->12],
 ", and ",
 StyleBox["opts", "Input",
  FontSize->12],
 ") in ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " when you pass it on to some built-in function (or even another top-level \
function).\n\nOtherwise, the arguments carefully protected by the user will \
get evaluated when you operate on them.  I call these ",
 StyleBox["evaluation leaks",
  FontVariations->{"Underline"->True}],
 ", and they're very important to avoid in typesetting or code analysis tools."
}], "Text",ExpressionUUID->"94d732b5-31ad-4810-9cf3-4c2f1b6d6754"],

Cell["\<\
Let's say you write a function to insert a given expression between every \
consecutive pair of elements in another expression.  Here's one way you might \
write it:\
\>", "Text",ExpressionUUID->"e5faf058-add5-49f4-af69-224d92f7330c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"First", " ", "version"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Clear", "[", "Intercalate", "]"}], "\n", 
   RowBox[{
    RowBox[{"Intercalate", "[", 
     RowBox[{"list_", ",", "object_"}], "]"}], ":=", 
    RowBox[{"Insert", "[", 
     RowBox[{"list", ",", " ", "object", ",", " ", 
      RowBox[{"List", "/@", 
       RowBox[{"Range", "[", 
        RowBox[{"2", ",", 
         RowBox[{"Length", "[", "list", "]"}]}], "]"}]}]}], 
     "]"}]}]}]}]], "Input",ExpressionUUID->"72508cb2-23e4-4855-b34f-\
9f3432a7f7c1"],

Cell["Works fine for \"ordinary\" expressions:", "Text",ExpressionUUID->"41369503-efb6-4563-a0c0-cceacc1b8d59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intercalate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], ",", " ", "x"}], 
  "]"}]], "Input",ExpressionUUID->"de9b5731-38a9-40a5-92e7-c2b85c21a0eb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "x", ",", "2", ",", "x", ",", "3"}], "}"}]], "Output",Expr\
essionUUID->"94199df8-8d9e-4f7a-86a4-b5ce08171664"]
}, Open  ]],

Cell["But not for unevaluated stuff:", "Text",ExpressionUUID->"695a3c55-323a-4c1c-91cb-ff0cb75afc33"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intercalate", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "]"}], ",", " ", 
   RowBox[{"Unevaluated", " ", "@", " ", 
    RowBox[{"Print", "[", "4", "]"}]}]}], "]"}]], "Input",ExpressionUUID->\
"138b5c89-d11c-474b-81b4-39d1b46838fc"],

Cell[BoxData["4"], "Print",ExpressionUUID->"fce1b954-5ac8-4603-a6d3-e7ba7a954e31"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"1", ",", "Null", ",", "2", ",", "Null", ",", "3"}], 
  "]"}]], "Output",ExpressionUUID->"276e48ee-4753-45f7-8a09-7ed577cc926a"]
}, Open  ]],

Cell["\<\
So here's another implementation that tries to keep the elements unevaluated \
until the end:\
\>", "Text",ExpressionUUID->"a5107ee5-3083-4c91-af6d-c0aac934882c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Second", " ", "version"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Intercalate", "[", 
    RowBox[{"list_", ",", "object_"}], "]"}], ":=", 
   RowBox[{"Insert", "[", 
    RowBox[{"list", ",", " ", 
     RowBox[{"Unevaluated", "[", "object", "]"}], ",", " ", 
     RowBox[{"List", "/@", 
      RowBox[{"Range", "[", 
       RowBox[{"2", ",", 
        RowBox[{"Length", "[", "list", "]"}]}], "]"}]}]}], "]"}]}]}]], "Input",\
ExpressionUUID->"ed9ccd12-e221-47ff-947b-bceab29602f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intercalate", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "]"}], ",", " ", 
   RowBox[{"Unevaluated", " ", "@", " ", 
    RowBox[{"Print", "[", "4", "]"}]}]}], "]"}]], "Input",ExpressionUUID->\
"49da2ebf-e656-4cf9-8998-9e4c1c560372"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"1", ",", 
   RowBox[{"Print", "[", "4", "]"}], ",", "2", ",", 
   RowBox[{"Print", "[", "4", "]"}], ",", "3"}], "]"}]], "Output",ExpressionUU\
ID->"9f41d8c2-3ef7-4715-ac57-8f24d36e5c0f"]
}, Open  ]],

Cell["\<\
But it doesn't work if the first argument is an unevaluated expression:\
\>", "Text",ExpressionUUID->"2d0f7aea-f4f2-458a-bb06-b99ecafe0bca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intercalate", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"2", " ", "*", " ", "3", " ", "*", " ", "4"}], "]"}], ",", " ", 
   "x"}], "]"}]], "Input",ExpressionUUID->"d83a3ba3-210a-49ec-a3e8-\
1a002483e247"],

Cell[BoxData["24"], "Output",ExpressionUUID->"b5f466ef-1a60-4cab-88f6-75f7f6036c73"]
}, Open  ]],

Cell[TextData[{
 "From ",
 StyleBox["Times[2, 3, 4]", "Input",
  FontSize->12],
 ", it should have produced ",
 StyleBox["Times[2, x, 3, x, 4]", "Input",
  FontSize->12],
 ", i.e. ",
 StyleBox["24 x^2", "Input",
  FontSize->12],
 ", but the ",
 StyleBox["Times[2, 3, 4]", "Input",
  FontSize->12],
 " collapsed to 24 too soon."
}], "Text",ExpressionUUID->"e18adeb4-7e41-4664-8808-1f2d06bfff62"],

Cell[TextData[{
 "Looking back at our code, we realize that we forgot to wrap all our uses of \
",
 StyleBox["list", "Input",
  FontSize->12],
 " in ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 ":"
}], "Text",ExpressionUUID->"b1119ecc-3b64-440d-92f3-811d6be175c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Third", " ", "version"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Intercalate", "[", 
    RowBox[{"list_", ",", "object_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Insert", "[", 
    RowBox[{
     RowBox[{"Unevaluated", "[", "list", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Unevaluated", "[", "object", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{"List", " ", "/@", " ", 
      RowBox[{"Range", "[", 
       RowBox[{"2", ",", 
        RowBox[{"Length", " ", "@", " ", 
         RowBox[{"Unevaluated", "[", "list", "]"}]}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Input",ExpressionUUID->"c48f8abc-b826-\
4284-bdb4-4d7cf43a64a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Intercalate", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"2", " ", "*", " ", "3", " ", "*", " ", "4"}], "]"}], ",", " ", 
   "x"}], "]"}]], "Input",ExpressionUUID->"dbcbab34-4858-41a1-a3aa-\
4eb09ee25a13"],

Cell[BoxData[
 RowBox[{"24", " ", 
  SuperscriptBox["x", "2"]}]], "Output",ExpressionUUID->"0afcb31a-a9d8-4410-95d4-9bffc3b8e2b5"]
}, Open  ]],

Cell[TextData[{
 StyleBox["\[WarningSign]",
  FontSize->24,
  FontColor->RGBColor[1, 0, 0]],
 " Check your ",
 StyleBox["entire function body for all occurrences",
  FontSlant->"Italic"],
 " of the pattern variables, and if they are passed to another function, wrap \
them in Unevaluated!"
}], "Text",
 CellDingbat->None,
 FontWeight->"Bold",ExpressionUUID->"199e389f-ee48-4df6-b106-70d69b6711a3"],

Cell["\<\
Now, for some functions, notably the whole class of functions we might dub \
\"mathematical functions\", this is probably pedantic and inconvenient.  \
Mathematical functions want to operate on and yield fully evaluated algebraic \
or numeric expressions.\
\>", "Text",ExpressionUUID->"211fe469-b793-4b0b-a30a-3a413ff2968c"],

Cell[TextData[{
 "But for any purely structural command - any auxiliary functions or \
utilities that might fall in the category of \"Programming Functions\" - they \
",
 StyleBox["should be capable of acting on unevaluated expressions",
  FontSlant->"Italic"],
 "!"
}], "Text",ExpressionUUID->"2ef58661-294f-4aa2-a9b9-92785047605b"],

Cell[TextData[{
 "General Principle:\n\nProtect your uses of the incoming variables from ",
 StyleBox["default interpretation",
  FontSlant->"Italic"],
 " by the language if the arguments are either passed with an explicit flag \
to prevent interpretation (Unevaluated) or the semantics of your function \
naturally doesn't want to use the default interpretation (e.g. a function \
that dumbly counts occurrences of things, who cares if \"things\" includes \
fancy objects like patterns)."
}], "Text",
 FontWeight->"Bold",ExpressionUUID->"e75c1d45-6c6e-4ade-8c5a-e106869cd9ca"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Miscellaneous advanced techniques, and subtle topics", "Subsection",ExpressionUUID->"a19aceb4-9e4a-40b4-ad7f-bf8f3a7a27d3"],

Cell[CellGroupData[{

Cell["\<\
Using tests on patterns:
  /; MyTestQ @ Unevaluated[p]
instead of
  /; MyTestQ[p]\
\>", "Subsubsection",ExpressionUUID->"c14699ae-6310-4efb-aabe-17bbf1e69a40"],

Cell["Patterns can be specified in two ways:", "Text",ExpressionUUID->"073a2490-0447-4630-a882-fd7eba1cf92c"],

Cell[TextData[{
 "(1)  Structure.\nUsing the ",
 StyleBox["Blank", "Input",
  FontSize->12],
 "* family, ",
 StyleBox["Pattern, Alternatives, Repeated", "Input",
  FontSize->12],
 " and ",
 StyleBox["RepeatedNull", "Input",
  FontSize->12],
 ", ",
 StyleBox["Optional", "Input",
  FontSize->12]
}], "Text",
 CellDingbat->
  "\[FilledSmallCircle]",ExpressionUUID->"81a9575d-3daf-4131-a5f1-\
34c76aac0755"],

Cell["Examples", "Text",ExpressionUUID->"229781ba-26b6-4b20-8758-7d853c312806"],

Cell[BoxData["n_Integer"], "Input",ExpressionUUID->"1402f5f9-1758-4d93-9405-ad448e67c845"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"n_Integer", ",", " ", "x_Real"}], "}"}]], "Input",ExpressionUUID->\
"cd27fc79-5c7a-408d-a86c-0fb0f7c27a54"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"elems__", ",", " ", "n_Integer"}], "]"}]], "Input",ExpressionUUID->\
"5741ba02-e19b-48f9-adf9-73cf1922816e"],

Cell[BoxData[
 RowBox[{"_Integer", " ", "|", " ", "_Rational", " ", "|", " ", 
  "_Real"}]], "Input",ExpressionUUID->"eb3b9646-e7ab-487b-b803-0795d4f1919c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"z_Complex", ",", " ", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_Real", ",", " ", "_Real"}], "}"}], "..."}]}], "}"}]], "Input",E\
xpressionUUID->"5c55877f-d0bc-47e2-817c-a729eded632e"],

Cell[TextData[{
 "(2)  Boolean tests.\nUsing ",
 StyleBox["PatternTest", "Input",
  FontSize->12],
 " (",
 StyleBox["patt?func", "Input",
  FontSize->12],
 ") or ",
 StyleBox["Condition", "Input",
  FontSize->12],
 " (",
 StyleBox["patt /; expr", "Input",
  FontSize->12],
 ")"
}], "Text",
 CellDingbat->
  "\[FilledSmallCircle]",ExpressionUUID->"e3ae9263-9601-42d6-8f87-\
5c847507f76d"],

Cell["Examples:", "Text",ExpressionUUID->"ce0fc2c1-4d8e-4ce3-a32a-f6191d96ddf2"],

Cell[BoxData[
 RowBox[{"n_Integer", 
  StyleBox["?",
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox["Positive",
   FontColor->RGBColor[0, 0, 1]]}]], "Input",ExpressionUUID->"fbd241af-15dc-\
4c77-8dd1-c63d56d19a4a"],

Cell[BoxData[
 RowBox[{"x_String", 
  StyleBox["?",
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox["MyTest",
   FontColor->RGBColor[0, 0, 1]]}]], "Input",ExpressionUUID->"399cb105-faab-\
47a2-9fa1-576e7d521e5f"],

Cell[TextData[{
 StyleBox["PatternTest", "Input",
  FontSize->12],
 " (",
 StyleBox["patt?func", "Input",
  FontSize->12],
 ") and ",
 StyleBox["Condition", "Input",
  FontSize->12],
 " (",
 StyleBox["patt /; expr", "Input",
  FontSize->12],
 "), are unlike the components of the pattern language because they perform \
",
 StyleBox["evaluation",
  FontSlant->"Italic"],
 " on the prospective match, or parts thereof, instead of simply checking ",
 StyleBox["structure",
  FontSlant->"Italic"],
 ".  By default, they will evaluate each and every prospective match.  If \
you're searching something that contains function bodies, rules, or any sort \
of unevaluated code, then these tests will evaluate those things while \
checking if they match!  This is often the wrong thing to do, and if the \
unevaluated code contains things like assignments, it will change the state \
of your ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session.\n\nHardly anyone is accustomed to this subtlety of pattern tests, \
so you have to train yourself to remember it, setting a mental flag on your \
usage of ",
 StyleBox["PatternTest", "Input",
  FontSize->12],
 " and ",
 StyleBox["Condition", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"7a832495-a08a-4bbe-a22c-68d5e2dd5bb0"],

Cell[TextData[{
 "Here's a surprisingly realistic example of how casual use of ",
 StyleBox["PatternTest", "Input",
  FontSize->12],
 " can cause code to execute.  The user wants to find all ",
 StyleBox["Cell", "Input",
  FontSize->12],
 " options whose values are themselves lists with suboptions."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"76b083b3-810f-47d4-bece-\
bd7d3da2cab9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"thingsThatAreSubOptions", " ", "=", " ", 
   RowBox[{"Cases", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Options", "[", "Cell", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"Rule", " ", "|", " ", "RuleDelayed"}], ")"}], "[", 
      RowBox[{"optName_", ",", " ", 
       RowBox[{"optValue_List", " ", "/;", " ", 
        RowBox[{"Not", " ", "@", " ", 
         RowBox[{"FreeQ", "[", 
          RowBox[{"optValue", ",", " ", 
           RowBox[{"_", "?", "OptionQ"}]}], "]"}]}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",ExpressionUUID->"e1455ff1-\
bcc2-4117-866f-f11abbd17059"],

Cell[BoxData[
 RowBox[{
  ErrorBox[], 
  ErrorBox[\:d7bf\:dfc0\:d7bf\:dfcbk\.02]}]], "Input",ExpressionUUID->\
"b4e65a08-8989-4c6e-975a-c9466f125d9c"],

Cell[TextData[{
 "Whoa, why did red-underlined ",
 StyleBox["Slot[1]", "Input",
  FontSize->12],
 " get written to a cell??\n\nAnswer:  One of the options of ",
 StyleBox["Cell", "Input",
  FontSize->12],
 " is ",
 StyleBox["ButtonBoxOptions", "Input",
  FontSize->12],
 ", which provides defaults for things like ",
 StyleBox["ButtonData :> data", "Input",
  FontSize->12],
 " and ",
 StyleBox["ButtonFunction :> func", "Input",
  FontSize->12],
 ".  Notice that the latter are delayed rules, because their rhs contains \
code!  Our condition on ",
 StyleBox["optValue_List", "Input",
  FontSize->12],
 " used the very aggressive ",
 StyleBox["FreeQ", "Input",
  FontSize->12],
 " test, which searches all levels of an expression for a match of the \
pattern.  The pattern we asked ",
 StyleBox["FreeQ", "Input",
  FontSize->12],
 " to search for was ",
 StyleBox["_?OptionQ", "Input",
  FontSize->12],
 ", which evaluates ",
 StyleBox["OptionQ", "Input",
  FontSize->12],
 " on every prospective match!  Since ",
 StyleBox["FreeQ", "Input",
  FontSize->12],
 " tests every subexpression from the top on down to the atoms, this \
evaluates code inside of ",
 StyleBox["ButtonFunction", "Input",
  FontSize->12],
 ", particularly a pure function involving ",
 StyleBox["NotebookApply", "Input",
  FontSize->12],
 ".  That's what printed then ",
 StyleBox["Slot[1]", "Input",
  FontSize->12],
 "'s."
}], "Text",ExpressionUUID->"25a11ae1-cbd2-4b5f-9fe2-fd48d2d2f586"],

Cell["\<\
Here are a few other common types of tests.  The first in each pair \
carelessly evaluates; the second is the corrected version with no evaluation \
leaks.\
\>", "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"1bd553bb-fbc0-4044-b0dc-\
3dd45ef8c59a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Incorrect", ":"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"things_List", " ", "/;", " ", 
     RowBox[{
      RowBox[{"Length", "[", "things", "]"}], " ", "\[GreaterEqual]", " ", 
      "2"}]}], "\n", "\[IndentingNewLine]"}], 
   RowBox[{"(*", " ", 
    RowBox[{"Correct", ":"}], " ", "*)"}], "\n", 
   RowBox[{"things_List", " ", "/;", " ", 
    RowBox[{
     RowBox[{"Length", " ", "@", " ", 
      RowBox[{"Unevaluated", "[", "things", "]"}]}], " ", "\[GreaterEqual]", 
     " ", "2"}]}]}]}]], "Input",ExpressionUUID->"6618a821-d66f-40cb-a49f-\
655120f697dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Incorrect", ":"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"num_", "?", "NumberQ"}], "\n", "\[IndentingNewLine]"}], 
   RowBox[{"(*", " ", 
    RowBox[{"Correct", ":"}], " ", "*)"}], "\n", 
   RowBox[{"num_", "?", 
    RowBox[{"(", 
     RowBox[{"Function", "[", 
      RowBox[{"e", ",", " ", 
       RowBox[{"NumberQ", " ", "@", " ", 
        RowBox[{"Unevaluated", "[", "e", "]"}]}], ",", " ", 
       "HoldAllComplete"}], "]"}], ")"}]}]}]}]], "Input",ExpressionUUID->\
"c1ad2934-5c99-4e3c-b692-48b353391cf9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Incorrect", ":"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"args___", " ", "/;", " ", 
     RowBox[{"FreeQ", "[", 
      RowBox[{
       RowBox[{"{", "args", "}"}], ",", " ", 
       RowBox[{"_Rule", " ", "|", " ", "_RuleDelayed"}]}], "]"}]}], "\n", 
    "\[IndentingNewLine]"}], 
   RowBox[{"(*", " ", 
    RowBox[{"Correct", ":"}], " ", "*)"}], "\n", 
   RowBox[{"args___", " ", "/;", " ", 
    RowBox[{"FreeQ", "[", 
     RowBox[{
      RowBox[{"Unevaluated", "[", 
       RowBox[{"{", "args", "}"}], "]"}], ",", " ", 
      RowBox[{"_Rule", " ", "|", " ", "_RuleDelayed"}]}], 
     "]"}]}]}]}]], "Input",ExpressionUUID->"4661d68d-5a0d-4f77-8ddb-\
2d7a954e5879"],

Cell[TextData[{
 "Personally, I hate the appearance of ",
 StyleBox["x?(Function[...])", "Input",
  FontSize->12],
 " so I either define my own ",
 StyleBox["HoldAll", "Input",
  FontSize->12],
 " or ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " test function to make the code clearer:"
}], "Text",ExpressionUUID->"7c0e2585-b99b-4e74-a725-763d55c36ae6"],

Cell[BoxData[
 RowBox[{"x_", "?", "HeldNumberQ"}]], "Input",ExpressionUUID->"976da89d-1199-40f1-8411-b1bb4b1455b0"],

Cell[TextData[{
 "or I use ",
 StyleBox["Condition", "Input",
  FontSize->12],
 ", where I can make the code a little clearer by naming the parts I want to \
reference."
}], "Text",ExpressionUUID->"558f21c3-23b0-47bc-9c51-0a9af2dfd370"],

Cell[TextData[{
 "In general, the handful of ",
 StyleBox["raw objects",
  FontSlant->"Italic"],
 " of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " are often specified using these patterns:\n\n  x_Integer\n  x_Rational\n  \
x_Real\n  x_Complex\n  \n  x_String\n  x_Symbol\n  \n  Technically, these \
patterns catch more than the raw atoms.  ",
 StyleBox["Integer[0, \"Hello\"]", "Input",
  FontSize->12],
 " is a perfectly valid expression whose head is ",
 StyleBox["Integer", "Input",
  FontSize->12],
 ", therefore it matches ",
 StyleBox["_", "Input",
  FontSize->12],
 StyleBox["Integer", "Input",
  FontSize->12],
 ".  In practice, rarely do these occur, so it would just make code scary \
looking to use anything other than the common and almost-correct idioms.\n  \n\
    But if you're writing advanced code that must not have any evaluation \
leaks, e.g. typesetting code or code analysis tools, you need the \
bullet-proof version."
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"1ef596fa-5e45-45cb-a06b-\
df63d139bcd2"],

Cell["Here's a template for bullet-proof pattern test:", "Text",ExpressionUUID->"2d5866f1-bcdd-47fa-a238-98a9fe7a91a4"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"x_", 
    StyleBox["RawType",
     FontSlant->"Italic"]}]], " ", 
  StyleBox["/;",
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox[
   RowBox[{"AtomQ", " ", "@", " ", 
    RowBox[{"Unevaluated", "[", "x", "]"}]}],
   FontColor->RGBColor[0, 0, 1]]}]], "Input",ExpressionUUID->"76c3742c-dfdc-\
45d9-b58c-1e2d2267699e"],

Cell[TextData[{
 "where ",
 StyleBox["RawType", "Input",
  FontSize->12,
  FontSlant->"Italic"],
 " \[Element] {",
 StyleBox["Integer", "Input",
  FontSize->12],
 ", ",
 StyleBox["Rational", "Input",
  FontSize->12],
 ", ",
 StyleBox["Real", "Input",
  FontSize->12],
 ", ",
 StyleBox["Complex", "Input",
  FontSize->12],
 ", ",
 StyleBox["Symbol", "Input",
  FontSize->12],
 ", ",
 StyleBox["String", "Input",
  FontSize->12],
 "}."
}], "Text",ExpressionUUID->"437d83f7-c2d6-4bdb-a4a8-ba69f6b4b543"],

Cell[TextData[{
 "Often you won't need the ",
 StyleBox["AtomQ", "Input",
  FontSize->12],
 " test, though, because you're selecting matches using one of the family of \
commands that takes a level specification, such as ",
 StyleBox["Replace", "Input",
  FontSize->12],
 ", ",
 StyleBox["Cases", "Input",
  FontSize->12],
 ", or ",
 StyleBox["MemberQ", "Input",
  FontSize->12],
 ".  In that case, you can give a levelspec of ",
 StyleBox["{-1}", "Input",
  FontSize->12],
 ", or ",
 StyleBox["{Infinity}", "Input",
  FontSize->12],
 ", to the main command, which is a nice way to restrict the search space, \
relieving some of the burden on the actual pattern.\n\nTemplate examples:"
}], "Text",ExpressionUUID->"a0a698bd-d0d8-48a9-b32c-5dc383dc8a64"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"s_Symbol", " ", "\[RuleDelayed]", " ", 
    RowBox[{"Context", "[", "s", "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID->"b48ee8b7-\
dee1-496c-8e8b-c166bbf55200"],

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"expr", ",", " ", "s_String", " ", ",", " ", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID->"b5bbacce-\
0eb3-487f-a792-861739a448f0"],

Cell[BoxData[
 RowBox[{"Replace", "[", 
  RowBox[{"expr", ",", " ", 
   RowBox[{"x_Real", " ", "\[RuleDelayed]", " ", 
    RowBox[{"Sqrt", "[", "x", "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID->"eb87a440-\
e3f7-4620-a3c4-932c1dda3b3e"],

Cell[TextData[{
 "You could define test to detect potentially dangerous subexpressions if you \
wish.  Look for expressions whose head has a ",
 StyleBox["Hold", "Input",
  FontSize->12],
 "* attribute:"
}], "Text",
 CellDingbat->
  "\[EmptySmallCircle]",ExpressionUUID->"51fc6774-5571-40ae-a6d3-\
cc75165eef22"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "HoldQ", "]"}], " ", "=", " ", 
    "HoldAllComplete"}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"HoldQ", "[", 
   RowBox[{"s_Symbol", " ", "/;", " ", 
    RowBox[{"AtomQ", " ", "@", " ", 
     RowBox[{"Unevaluated", "[", "s", "]"}]}]}], "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"MemberQ", "[", 
   RowBox[{
    RowBox[{"Attributes", "[", "s", "]"}], ",", " ", 
    RowBox[{
    "HoldFirst", " ", "|", " ", "HoldRest", " ", "|", " ", "HoldAll", " ", 
     "|", " ", "HoldAllComplete"}]}], "]"}]}]}], "Input",ExpressionUUID->\
"0314d95e-aef0-41e7-a33c-1cb824c72d23"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ContainsUnevaluatedQ", "[", "expr_", "]"}], " ", ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"MemberQ", "[", 
   RowBox[{
    RowBox[{"Unevaluated", "[", "expr", "]"}], ",", " ", 
    RowBox[{
     RowBox[{"h_Symbol", "?", "HoldQ"}], "[", "___", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", 
      RowBox[{"-", "1"}]}], "}"}], ",", " ", 
    RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]}]], "Input",ExpressionUUID->\
"60380f60-4506-42af-991a-87ef2c8f3eab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContainsUnevaluatedQ", "[", 
  RowBox[{"Options", "[", "Cell", "]"}], "]"}]], "Input",ExpressionUUID->\
"09597432-b460-4e48-a4bc-35a292b408ab"],

Cell[BoxData["True"], "Output",ExpressionUUID->"287084ea-e33f-4790-8c2c-e40cc79be52f"]
}, Open  ]],

Cell["\<\
You can also return a list of them to see what you're up against:\
\>", "Text",ExpressionUUID->"0afcaf11-a5d4-4f23-ad1a-46a1474827d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"Options", "[", "Cell", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"h_Symbol", "?", "HoldQ"}], "[", "___", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", " ", 
     RowBox[{"-", "1"}]}], "}"}], ",", " ", 
   RowBox[{"Heads", "\[Rule]", "True"}]}], "]"}]], "Input",ExpressionUUID->\
"76bde653-05ee-473a-8f04-ddcb7e8e9da5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"\[Rule]\"\>", "\[RuleDelayed]", "\<\"->\"\>"}], ",", 
   RowBox[{"\<\"\[RuleDelayed]\"\>", "\[RuleDelayed]", "\<\":>\"\>"}], ",", 
   RowBox[{"\<\"\[LessEqual]\"\>", "\[RuleDelayed]", "\<\"<=\"\>"}], ",", 
   RowBox[{"\<\"\[GreaterEqual]\"\>", "\[RuleDelayed]", "\<\">=\"\>"}], ",", 
   RowBox[{"\<\"\[NotEqual]\"\>", "\[RuleDelayed]", "\<\"!=\"\>"}], ",", 
   RowBox[{"\<\"\[Equal]\"\>", "\[RuleDelayed]", "\<\"==\"\>"}], ",", 
   RowBox[{"ConversionRules", "\[RuleDelayed]", "None"}], ",", 
   RowBox[{"TaggingRules", "\[RuleDelayed]", "None"}], ",", 
   RowBox[{"LayoutInformation", "\[RuleDelayed]", "None"}], ",", 
   RowBox[{"DragAndDropFunction", "\[RuleDelayed]", "None"}], ",", 
   RowBox[{"CoordinateDisplayFunction", "\[RuleDelayed]", "Identity"}], ",", 
   RowBox[{"CounterFunction", "\[RuleDelayed]", "Identity"}], ",", 
   RowBox[{"CounterData", "\[RuleDelayed]", "Identity"}], ",", 
   RowBox[{
    RowBox[{"FrontEndExecute", "[", 
     RowBox[{"{", 
      RowBox[{"FrontEnd`NotebookApply", "[", 
       RowBox[{
        RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
        "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ",", 
   RowBox[{"ButtonFunction", "\[RuleDelayed]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"FrontEndExecute", "[", 
       RowBox[{"{", 
        RowBox[{"FrontEnd`NotebookApply", "[", 
         RowBox[{
          RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
          "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ButtonData", "\[RuleDelayed]", "Automatic"}], ",", 
   RowBox[{
    RowBox[{"FrontEndExecute", "[", 
     RowBox[{"{", 
      RowBox[{"FrontEnd`NotebookApply", "[", 
       RowBox[{
        RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
        "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ",", 
   RowBox[{"ButtonFunction", "\[RuleDelayed]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"FrontEndExecute", "[", 
       RowBox[{"{", 
        RowBox[{"FrontEnd`NotebookApply", "[", 
         RowBox[{
          RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
          "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{"ButtonData", "\[RuleDelayed]", "Automatic"}], ",", 
   RowBox[{"ButtonFunction", "\[RuleDelayed]", "Null"}], ",", 
   RowBox[{"TrackingFunction", "\[RuleDelayed]", "Null"}], ",", 
   RowBox[{"ButtonData", "\[RuleDelayed]", "Automatic"}], ",", 
   RowBox[{"GridDefaultElement", "\[RuleDelayed]", "\[Placeholder]"}]}], 
  "}"}]], "Output",ExpressionUUID->"006b9ef9-a838-4b97-a68b-6a36773053e8"]
}, Open  ]],

Cell[TextData[{
 "Obviously, many of these ",
 StyleBox["RuleDelayed", "Input",
  FontSize->12],
 "'s have atoms as their parts and are safe to evaluate, so you might want to \
prune this down to more dangerous things:"
}], "Text",ExpressionUUID->"ce47c7b0-170a-4a39-819a-0d729caca264"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"%", ",", " ", 
   RowBox[{"_", " ", "\[RuleDelayed]", " ", 
    RowBox[{"_String", " ", "|", " ", "_Symbol"}]}]}], "]"}]], "Input",Express\
ionUUID->"c0f42f8f-3459-4fd3-b9fd-5599f054d779"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"FrontEndExecute", "[", 
     RowBox[{"{", 
      RowBox[{"FrontEnd`NotebookApply", "[", 
       RowBox[{
        RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
        "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ",", 
   RowBox[{"ButtonFunction", "\[RuleDelayed]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"FrontEndExecute", "[", 
       RowBox[{"{", 
        RowBox[{"FrontEnd`NotebookApply", "[", 
         RowBox[{
          RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
          "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ")"}]}], ",", 
   RowBox[{
    RowBox[{"FrontEndExecute", "[", 
     RowBox[{"{", 
      RowBox[{"FrontEnd`NotebookApply", "[", 
       RowBox[{
        RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
        "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ",", 
   RowBox[{"ButtonFunction", "\[RuleDelayed]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"FrontEndExecute", "[", 
       RowBox[{"{", 
        RowBox[{"FrontEnd`NotebookApply", "[", 
         RowBox[{
          RowBox[{"FrontEnd`InputNotebook", "[", "]"}], ",", "#1", ",", 
          "Placeholder"}], "]"}], "}"}], "]"}], "&"}], ")"}]}]}], 
  "}"}]], "Output",ExpressionUUID->"a4a7dd98-af54-45cb-8987-47dc47872d50"]
}, Open  ]],

Cell["\<\

\
\>", "Text",ExpressionUUID->"e9015c68-c95d-40f0-bd0f-580f58414e89"],

Cell[TextData[{
 "Sometimes you want to specify that an argument not match a pattern, and \
since there is no ",
 StyleBox["PatternNot", "Input",
  FontSize->12],
 " primitive in the language, you need to do this in a Boolean test.  One way \
is to use ",
 StyleBox["MatchQ", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"d597bc8b-da68-40e9-94f4-2165a92b7bf4"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"x_", ",", " ", 
   RowBox[{"y_", " ", 
    StyleBox["/;",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["Not",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[" ",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["@",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[" ",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox["MatchQ",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["[",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox[
        RowBox[{"Unevaluated", "[", "y", "]"}],
        FontColor->RGBColor[0, 0, 1]], ",", " ", "_List"}], "]"}]}]}]}], 
  "]"}]], "Input",ExpressionUUID->"a5b5889c-e847-4ca6-a2b8-e61bc920905d"],

Cell[TextData[{
 StyleBox["\[WarningSign]",
  FontSize->24,
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["  ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["Warning",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[":  Before Version 3, you were virtually guaranteed that _Symbol \
would match only the atomic data type of 'symbols',  But in Versions 3 and \
beyond, Symbol can also be used as a function, e.g. Symbol[\"a\"] \
\[DoubleLongRightArrow] a, so if your program is dealing with unevaluated \
input or code of any sort, you have to now deal with the fact that _Symbol \
matches two classes of legitimate expressions:  atomic symbols, and calls of \
the Symbol function.  Example:",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",ExpressionUUID->"128fb0af-0937-4e20-8fef-3ab4103865de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Symbol", "[", "\"\<a\>\"", "]"}]], "Input",ExpressionUUID->"d9d71bdf-1338-4afd-bcaf-f85944f80485"],

Cell[BoxData["a"], "Output",ExpressionUUID->"ce10a1da-f60d-4063-a9fd-0e96a43911e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"FullForm", ",", " ", "AtomQ", ",", " ", "Head"}], "}"}], "[", 
   "%", "]"}], "]"}]], "Input",ExpressionUUID->"9bfed172-1b74-4a97-ab87-\
f128bae1778e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    StyleBox["a",
     ShowSpecialCharacters->False,
     ShowStringCharacters->True,
     NumberMarks->True],
    FullForm], ",", "True", ",", "Symbol"}], "}"}]], "Output",ExpressionUUID->\
"c523c083-36b5-41a3-ba71-1b08ad5b6ce0"]
}, Open  ]],

Cell[TextData[{
 "A weird pseudo-Symbol that you might run in to:  if you remove a symbol \
which is still currently in use in some definitions, then it will be replaced \
by an entity which prints like ",
 StyleBox["Removed[\"symName\"]", "Input",
  FontSize->12],
 " and which is considered an atom and has head ",
 StyleBox["Symbol", "Input",
  FontSize->12],
 ".  It will ",
 StyleBox["match _Symbol", "Input",
  FontSize->12],
 ", and you can assign to it, look up its information or context, and most if \
not all that other stuff you can do with symbols, but it's strange because it \
has no input form (that I know of) and ",
 StyleBox["Names[]", "Input",
  FontSize->12],
 " seems unaware of its existence in any context, let alone the one that ",
 StyleBox["Context", "Input",
  FontSize->12],
 " claims it is in."
}], "Text",ExpressionUUID->"d4c0721e-f468-4f33-96d0-a7700b00a70a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"x", " ", "=", " ", "doomed"}], ";", " ", "0"}]], "Input",Expression\
UUID->"1ed19f22-785a-42f5-94fb-bd79a727733b"],

Cell[BoxData["0"], "Output",ExpressionUUID->"6679be6b-6db4-4a65-87ef-562db07ad46b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Remove", "[", "\"\<doomed\>\"", "]"}]], "Input",ExpressionUUID->"69b5d771-5cab-4a7a-8f75-c7fcb2e0ef47"],

Cell[CellGroupData[{

Cell[BoxData["x"], "Input",ExpressionUUID->"84f89c6c-1f87-4e35-ae0b-9d4eb2c6a4e7"],

Cell[BoxData[
 TagBox[
  RowBox[{"Removed", "[", "\<\"doomed\"\>", "]"}],
  False,
  Editable->False]], "Output",ExpressionUUID->"f7788f5d-d9a7-4b56-a0a2-\
eaa1cfebb6dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"FullForm", ",", " ", "AtomQ", ",", " ", "Head"}], "}"}], "[", 
   "x", "]"}], "]"}]], "Input",ExpressionUUID->"dc0f7756-5ab6-4421-9f6a-\
7aed9ff4b26c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    StyleBox[
     TagBox[
      RowBox[{"Removed", "[", "\"\<doomed\>\"", "]"}],
      False,
      Editable->False],
     ShowSpecialCharacters->False,
     ShowStringCharacters->True,
     NumberMarks->True],
    FullForm], ",", "True", ",", "Symbol"}], "}"}]], "Output",ExpressionUUID->\
"bb645bd9-9a50-4f96-85d5-3208649dad68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"isSymbol", "[", "_Symbol", "]"}], " ", "=", " ", "True"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isSymbol", "[", "_", "]"}], " ", "=", " ", "False"}], ";"}], "\n", 
 RowBox[{"isSymbol", "[", "x", "]"}]}], "Input",ExpressionUUID->"6f51156c-\
f58d-40d7-9cd6-8f262e2a3cba"],

Cell[BoxData["True"], "Output",ExpressionUUID->"6b190866-1c89-498f-b489-37911d35f275"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Evaluate", "[", "x", "]"}], " ", "=", " ", "777"}]], "Input",Expres\
sionUUID->"3340c95d-8866-40cd-b394-2fd65912a579"],

Cell[BoxData["777"], "Output",ExpressionUUID->"4e0a76f1-e855-497f-b1b9-70ac6bc51343"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Unevaluated", " ", "@", " ", 
   RowBox[{"Information", "[", "x", "]"}]}], " ", "/.", " ", 
  RowBox[{"OwnValues", "[", "x", "]"}]}]], "Input",ExpressionUUID->"45f6d35a-\
7758-4f8f-8a86-3a6780f98bea"],

Cell[BoxData["\<\"Global`doomed\"\>"], "Print",ExpressionUUID->"0aa4c7ba-bed4-4a62-a5bb-5d4bb5014e5a"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {GridBox[{
       {
        RowBox[{
         TagBox[
          RowBox[{"Removed", "[", "\<\"doomed\"\>", "]"}],
          False,
          Editable->False], "=", "777"}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[
   Removed["doomed"]],
  Editable->False]], "Print",ExpressionUUID->"99b2ca71-1a4c-4cdc-844b-\
22b945f8c62b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Unevaluated", " ", "@", " ", 
   RowBox[{"Context", "[", "x", "]"}]}], " ", "/.", " ", 
  RowBox[{"OwnValues", "[", "x", "]"}]}]], "Input",ExpressionUUID->"4bf6efcf-\
07b8-4201-b06e-22283fff4c71"],

Cell[BoxData["\<\"Global`\"\>"], "Output",ExpressionUUID->"956b3bf0-f8a2-4ea6-b263-bdb7a093986f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Characters", "[", "%14", "]"}], " ", "//", "FullForm"}]], "Input",E\
xpressionUUID->"b6240ea7-29a4-4628-aab1-ab6f7e49b4ef"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
    "\"\<G\>\"", ",", "\"\<l\>\"", ",", "\"\<o\>\"", ",", "\"\<b\>\"", ",", 
     "\"\<a\>\"", ",", "\"\<l\>\"", ",", "\"\<`\>\""}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",ExpressionUUID->"9a8ecaa1-9b41-4b4c-9263-00d08f88da4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<Global`*oom*\>\"", "]"}]], "Input",ExpressionUUID->"a5fc39a1-1990-4616-9b3d-4ee81ba4d542"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"9e8d9e82-9d93-4e55-b1ea-8f7f19821a52"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}]], "Input",ExpressionUUID->"55528585-9987-4808-a7b8-b0625ec9afe2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"isSymbol\"\>", ",", "\<\"x\"\>"}], 
  "}"}]], "Output",ExpressionUUID->"60abf905-01f5-4a18-a9fb-4b2bb600f56f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"Names", "[", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"StringMatchQ", "[", 
     RowBox[{"#", ",", " ", "\"\<*doom*\>\""}], "]"}], "&"}]}], 
  "]"}]], "Input",ExpressionUUID->"f82262ba-f001-48cc-bb7b-dc2b66e8662c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"e3c040ba-c205-4823-89b9-7b442ad5a324"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Trott-Strzebonski method for In-Place Evaluation", "Subsubsection",ExpressionUUID->"3a1c3fa4-1df3-446d-9e8b-74ff2a46c62a"],

Cell[TextData[{
 "One of the all-time cleverest idioms I've seen; this was discovered by \
Michael Trott and Adam Strzebonski a few years ago.  The template is a rule \
of the following form:\n\n   ",
 StyleBox["lhs :> With[{eval = lhs}, eval /; True]", "Input",
  FontSize->12]
}], "Text",ExpressionUUID->"d762fd78-379a-422f-baad-6b9459ebe067"],

Cell["\<\
Suppose you want to replace a bunch of things inside a held expression, and \
have the replacements evaluate.  You don't want to evaluate the whole, just \
the pieces that are targeted.\
\>", "Text",ExpressionUUID->"2e767201-034f-4e11-ba8f-ef36b704281b"],

Cell[BoxData[
 RowBox[{"SeedRandom", "[", 
  RowBox[{"2", "^", "51"}], "]"}]], "Input",ExpressionUUID->"4c16648f-1860-\
41e9-976d-fd82b44116c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"jaggedTable", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Random", "[", 
     RowBox[{"Integer", ",", " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "5"}], "}"}]}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Random", "[", 
      RowBox[{"Integer", ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "4"}], "}"}]}], "]"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Random", "[", 
      RowBox[{"Integer", ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "4"}], "}"}]}], "]"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"Random", "[", 
      RowBox[{"Integer", ",", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", " ", "4"}], "}"}]}], "]"}], "}"}]}], 
   "]"}]}]], "Input",ExpressionUUID->"2e9230aa-e60a-4208-a5a0-a995c29ee1e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "4", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5", ",", "2", ",", "2"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"0", ",", "5", ",", "5"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "3", ",", "4", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "}"}]}], "}"}]], "Output",ExpressionUU\
ID->"7f61e1d4-7f04-44ee-8174-87bafc1a9cdd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heldTable", " ", "=", " ", 
  RowBox[{"Apply", "[", 
   RowBox[{"Hold", ",", " ", "jaggedTable", ",", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", "1"}], "}"}]}], "]"}]}]], "Input",ExpressionUUID->\
"4a8a6d5b-2ff1-4ea1-9a80-724967b4adf7"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "4", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "5", ",", "2", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "5", ",", "5"}], "}"}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1"}], "}"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "3", ",", "4", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "2", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5"}], "}"}]}], "]"}]}], "]"}]], "Output",ExpressionUU\
ID->"8e735acc-4989-44c6-aae7-b464bb478ea4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heldTable", " ", "=", " ", 
  RowBox[{"Apply", "[", 
   RowBox[{"Plus", ",", " ", "heldTable", ",", " ", 
    RowBox[{"{", 
     RowBox[{"-", "2"}], "}"}]}], "]"}]}]], "Input",ExpressionUUID->"57feb45a-\
579b-4367-a1d3-a78d45a9a1f6"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"1", "+", "4", "+", "4", "+", "0"}], ",", 
     RowBox[{"2", "+", "0", "+", "1"}], ",", 
     RowBox[{"1", "+", "1"}], ",", 
     RowBox[{"5", "+", "5", "+", "2", "+", "2"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"0", "+", "5", "+", "5"}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"5", "+", "1", "+", "3"}], ",", 
     RowBox[{"4", "+", "1"}]}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{
     RowBox[{"3", "+", "3", "+", "4", "+", "0"}], ",", 
     RowBox[{"5", "+", "2"}], ",", 
     RowBox[{"4", "+", "2", "+", "0"}], ",", 
     RowBox[{"2", "+", "5"}]}], "]"}]}], "]"}]], "Output",ExpressionUUID->\
"379bfa4b-1cc1-46cb-a5ce-462fc17c038a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"heldTable", " ", "/.", " ", 
  RowBox[{"p_Plus", " ", "\[RuleDelayed]", " ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"eval", " ", "=", " ", "p"}], "}"}], ",", " ", 
     RowBox[{"eval", " ", "/;", " ", "True"}]}], "]"}]}]}]], "Input",Expressio\
nUUID->"1dbb7203-4b41-4b5b-b37c-57dcaafc9766"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{
   RowBox[{"Hold", "[", 
    RowBox[{"9", ",", "3", ",", "2", ",", "14"}], "]"}], ",", 
   RowBox[{"Hold", "[", "10", "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"9", ",", "5"}], "]"}], ",", 
   RowBox[{"Hold", "[", 
    RowBox[{"10", ",", "7", ",", "6", ",", "7"}], "]"}]}], "]"}]], "Output",Ex\
pressionUUID->"80886dc9-b006-44a6-811a-c1900973e715"]
}, Open  ]],

Cell[TextData[{
 "You can also do this with ",
 StyleBox["ReplacePart", "Input",
  FontSize->12],
 ", but it's harder to code, and has a worse time and space complexity for a \
large number of substitutions (and using ",
 StyleBox["Fold", "Input",
  FontSize->12],
 " with ",
 StyleBox["ReplacePart", "Input",
  FontSize->12],
 " would be O(n^2))."
}], "Text",ExpressionUUID->"b1805b5d-cbaf-40db-b489-2b5984c37323"]
}, Closed]],

Cell[CellGroupData[{

Cell["My Block trick for trapping calls to built-in functions", \
"Subsubsection",ExpressionUUID->"e06d200f-75e8-4aeb-b9a8-9f5fdaac1bac"],

Cell["Prototypical example to use as a template:", "Text",ExpressionUUID->"04a38771-0be3-498a-aa2a-a7c75edd7f77"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"wasProtected", " ", "=", " ", 
    RowBox[{"Unprotect", "[", "Get", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$TrapGet", " ", "=", " ", "True"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"g_Get", " ", "/;", " ", "$TrapGet"}], " ", ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"$TrapGet", " ", "=", " ", "False"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"Unevaluated", "[", "g", "]"}], ",", " ", 
        "\"\< was evaluated!\>\""}], "]"}], ";", "\[IndentingNewLine]", 
      "g"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"Protect", " ", "@@", " ", "wasProtected"}], ";"}]}], "Input",Expres\
sionUUID->"34ef34ae-f083-4034-891f-dfe99e5640d9"],

Cell[TextData[{
 "You are quite free to make the lhs of the rule more complicated; perhaps \
you need to name some arguments of ",
 StyleBox["Get", "Input",
  FontSize->12],
 " so you can refer to them.  The same template applies. For instance:"
}], "Text",ExpressionUUID->"ebd497d5-0acd-48d8-ab69-b68710090ecb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"filename_String", ",", " ", "opts___"}], "]"}], " ", "/;", " ", 
   "$TrapGet"}], " ", ":=", "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$TrapGet", " ", "=", " ", "False"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"StringMatchQ", "[", 
       RowBox[{"filename", ",", " ", "\"\<http://*\>\""}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Run", "[", 
       RowBox[{"\"\<wget\>\"", ",", " ", "filename"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Get", "[", "filename", "]"}]}], "\[IndentingNewLine]", "]"}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",ExpressionUUID->"d51bc378-78e6-\
4bb8-901b-605dfbf96091"],

Cell[TextData[{
 "I recommend that you hang the condition ",
 StyleBox["/; $TrapGet", "Input",
  FontSize->12],
 " off the lhs, not the rhs, because then you can revoke the definition by \
plopping the whole lhs into an ",
 StyleBox["Unset", "Input",
  FontSize->12],
 " command:"
}], "Text",ExpressionUUID->"b7e0e4b1-e5e4-4679-a622-aef828d038ca"],

Cell[BoxData[
 RowBox[{"Unset", "[", 
  RowBox[{
   RowBox[{"Get", "[", 
    RowBox[{"filename_String", ",", " ", "opts___"}], "]"}], " ", "/;", " ", 
   "$TrapGet"}], "]"}]], "Input",ExpressionUUID->"d4882019-e6aa-48d5-bf90-\
dce0f39b9203"],

Cell["\<\


\
\>", "Text",ExpressionUUID->"ea5e0f07-5f31-4f02-bbce-3ae339893386"],

Cell["\<\
Also, an important limitation:  can't be used for recursive, e.g. Module as \
tgayley pointed out?\
\>", "Text",ExpressionUUID->"0f5f7db1-52f6-4f1d-a9cb-1f1e65a5a481"],

Cell["\<\
But using a count variable and checking EvenQ[count++] might do it if there \
is one recursion per trap?  Never did find out for sure.\
\>", "Text",ExpressionUUID->"8ef3f877-f048-432b-9149-a65b14873566"],

Cell["\<\
Another limitation:  probably can't trap SetDelayed, Condition, Block, or \
CompoundExpression with it.  Try to find work-around for this!

One alternative to Block is my old method:  manually set and unset the var, \
must wrap in CheckAbort to prevent dirty state change.\
\>", "Text",ExpressionUUID->"b4f89909-9761-49c1-b32c-d57683b399a8"]
}, Closed]],

Cell[CellGroupData[{

Cell["One-step evaluation using expr /. DownValues[f], and family.", \
"Subsubsection",ExpressionUUID->"87648446-4de8-494c-a8f3-2fc6479d7f9b"],

Cell[TextData[{
 "Let's say you want to ",
 StyleBox["Map", "Input",
  FontSize->12],
 " or ",
 StyleBox["MapAt", "Input",
  FontSize->12],
 " an existing function f deep into a held expression, and simply have f \
perform its rewrite rule on the argument without any more evaluation."
}], "Text",ExpressionUUID->"af0c5913-44b1-424b-813b-2ffa120d7045"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"f", ",", "array"}], "]"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], " ", ":=", " ", 
  RowBox[{"x", " ", "+", " ", 
   RowBox[{"x", "^", "2"}], " ", "+", " ", 
   RowBox[{"x", "^", "3"}]}]}]}], "Input",ExpressionUUID->"1eb7909e-32c7-4555-\
a8a9-691d0d9d0b07"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"array", " ", "=", " ", 
  RowBox[{"Array", "[", 
   RowBox[{"Subtract", ",", " ", 
    RowBox[{"{", 
     RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}]}]], "Input",ExpressionUUID->\
"0778638d-bb02-4e4c-880c-7f09747deed6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "3"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "2"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "0", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"682482cd-0931-45c5-8bc6-2b8341e08c48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", " ", 
   RowBox[{"Hold", "[", 
    RowBox[{"Evaluate", "[", " ", "array", " ", "]"}], "]"}], ",", " ", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",ExpressionUUID->"900b73d5-1af4-\
46a0-bdb7-2cdf0e72f582"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", "0", "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"-", "1"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"-", "2"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"-", "3"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", "1", "]"}], ",", 
      RowBox[{"f", "[", "0", "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"-", "1"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"-", "2"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", "2", "]"}], ",", 
      RowBox[{"f", "[", "1", "]"}], ",", 
      RowBox[{"f", "[", "0", "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"-", "1"}], "]"}]}], "}"}]}], "}"}], "]"}]], "Output",Expressio\
nUUID->"80f74a9e-cbba-4ebf-aca6-7d7bccaa5b71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", " ", "/.", " ", 
  RowBox[{"DownValues", "[", "f", "]"}]}]], "Input",ExpressionUUID->"20c66ac7-\
abde-4a56-ac66-5cec46aebf25"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"0", "+", 
       SuperscriptBox["0", "2"], "+", 
       SuperscriptBox["0", "3"]}], ",", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "3"]}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "2"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "2"}], ")"}], "3"]}], ",", 
      RowBox[{
       RowBox[{"-", "3"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "3"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "3"}], ")"}], "3"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "+", 
       SuperscriptBox["1", "2"], "+", 
       SuperscriptBox["1", "3"]}], ",", 
      RowBox[{"0", "+", 
       SuperscriptBox["0", "2"], "+", 
       SuperscriptBox["0", "3"]}], ",", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "3"]}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "2"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "2"}], ")"}], "3"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", "+", 
       SuperscriptBox["2", "2"], "+", 
       SuperscriptBox["2", "3"]}], ",", 
      RowBox[{"1", "+", 
       SuperscriptBox["1", "2"], "+", 
       SuperscriptBox["1", "3"]}], ",", 
      RowBox[{"0", "+", 
       SuperscriptBox["0", "2"], "+", 
       SuperscriptBox["0", "3"]}], ",", 
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "3"]}]}], "}"}]}], "}"}], "]"}]], "Output",\
ExpressionUUID->"522a70b5-c181-469b-a29e-f649d391e360"]
}, Open  ]],

Cell[TextData[{
 "You could write a routine to extract the names of symbols occurring at each \
stage, accumulate their various *Values into a list, and apply that list of \
rules.  To attempt to simulate the evaluator, you'd have to make sure ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 " fires befored ",
 StyleBox["DownValues", "Input",
  FontSize->12],
 ", and lots of details like that.\n\nYou could ",
 StyleBox["Nest", "Input",
  FontSize->12],
 " this routine n times, or do ",
 StyleBox["FixedPoint", "Input",
  FontSize->12],
 " of it to crudely simulate the evaluator."
}], "Text",ExpressionUUID->"75ddde9a-261f-40ff-ae00-b4c8cb79a415"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Traps used for tracing should not evaluate what they print or memoize\
\>", "Subsubsection",ExpressionUUID->"91e86c73-4c6d-4980-9ba6-4cd3daf25f47"],

Cell["\<\
Many of you have written things like this to see when a rule fires:\
\>", "Text",ExpressionUUID->"8f3870e5-e644-4f03-8d63-04f3bd0c20ba"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "\"\<f\>\"", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a_", ",", " ", "b_"}], "]"}], " ", "/;", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<a = \>\"", ",", " ", "a"}], "]"}], ";", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<b = \>\"", ",", " ", "b"}], "]"}], ";", " ", "False"}], 
    ")"}]}], " ", ":=", " ", "$Failed"}]}], "Input",ExpressionUUID->"54edf7ee-\
903b-4688-843d-7ddbd1e5ffa0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"3", "*", "4"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"2d885d99-fd9d-4253-8c4f-fb68e55077e7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"a = \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["a = ", 3],
  Editable->False]], "Print",ExpressionUUID->"aeacb541-f066-4a91-b865-\
a01a305d32d8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"b = \"\>", "\[InvisibleSpace]", "12"}],
  SequenceForm["b = ", 12],
  Editable->False]], "Print",ExpressionUUID->"1a4b71e0-adcc-4110-826f-\
5e48886aaf19"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", "+", "2"}], "]"}], ",", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"3", " ", "4"}], "]"}]}], "]"}]], "Output",ExpressionUUID->\
"b6719c9e-3db8-44e3-917e-ab26347e16a7"]
}, Open  ]],

Cell["\<\
But sometimes f,whether it's yours or an internal function, will encounter \
things that are bits of unevaluated code, say in the middle of an evaluation, \
or during a trace, or whatever.  This is a case where you want to prevent \
evaluation:\
\>", "Text",ExpressionUUID->"d2fbd5eb-20f0-49ab-a999-9bfe741ac70b"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "\"\<f\>\"", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a_", ",", " ", "b_"}], "]"}], " ", "/;", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<a = \>\"", ",", " ", 
       RowBox[{"Unevaluated", "[", "a", "]"}]}], "]"}], ";", " ", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<b = \>\"", ",", " ", 
       RowBox[{"Unevaluated", "[", "b", "]"}]}], "]"}], ";", " ", "False"}], 
    ")"}]}], " ", ":=", " ", "$Failed"}]}], "Input",ExpressionUUID->"453bf63d-\
2c8d-4be5-9e5d-0236ce86e8a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"3", "*", "4"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"0fd08f20-73fb-4ec5-bacf-5fe39d5a1687"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"a = \"\>", "\[InvisibleSpace]", 
   RowBox[{"1", "+", "2"}]}],
  SequenceForm["a = ", 1 + 2],
  Editable->False]], "Print",ExpressionUUID->"f8310828-8b80-4b52-aeff-\
80afeac33624"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"b = \"\>", "\[InvisibleSpace]", 
   RowBox[{"3", " ", "4"}]}],
  SequenceForm["b = ", 3 4],
  Editable->False]], "Print",ExpressionUUID->"59012f92-fa8a-4388-afe9-\
4ff2d937c997"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{
   RowBox[{"Unevaluated", "[", 
    RowBox[{"1", "+", "2"}], "]"}], ",", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"3", " ", "4"}], "]"}]}], "]"}]], "Output",ExpressionUUID->\
"9c61306d-1906-4809-9ffa-9b9960069cfc"]
}, Open  ]],

Cell[TextData[{
 "Or if you really want to be defensive and are concerned that ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 " might fire on ",
 StyleBox["Print[thing]", "Input",
  FontSize->12],
 " before ",
 StyleBox["Print", "Input",
  FontSize->12],
 " can evaluate, use two levels of protection.  Either ",
 StyleBox["Unevaluated @ HoldForm[thing] ", "Input",
  FontSize->12],
 "or ",
 StyleBox["HoldForm @ HoldForm[thing]", "Input",
  FontSize->12],
 ", or perhaps best of all, define yourself a ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " version of ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"38449700-cdeb-42d6-b7b2-21a7601e38fa"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
How to pass arguments to HoldAllComplete functions (such as HoldComplete \
itself), since Evaluate no longer forces evaluation:  Function @@, With, \
Block, Replace, ReplacePart\
\>", "Subsubsection",ExpressionUUID->"a6c98784-55b2-4c02-8c08-51e05bb55187"],

Cell[TextData[{
 ".Of course, ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " is a bit of a pain, since when you're writing code in a module and need to \
pass the ",
 StyleBox["value",
  FontSlant->"Italic"],
 " of a variable, like ",
 StyleBox["myexpr", "Input",
  FontSize->12],
 ", into it, you can't use ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " like you could with ",
 StyleBox["Hold", "Input",
  FontSize->12],
 " and friends.  So here is a list of some techniques for passing into ",
 StyleBox["HoldAllComplete", "Input",
  FontSize->12],
 " wrappers:"
}], "Text",ExpressionUUID->"38283797-e149-433e-a5b6-d2346544d27b"],

Cell["Passing it fully evaluated:", "Text",ExpressionUUID->"9b203ceb-6543-48a1-9b8a-fad3080162eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MyHolder", "[", "#", "]"}], "&"}], " ", "[", "myexpr", 
  "]"}]], "Input",ExpressionUUID->"c8f5c334-7bdb-42a1-88cb-5854f76e9173"],

Cell[BoxData[
 RowBox[{"MyHolder", " ", "@@", " ", 
  RowBox[{"{", "myexpr", "}"}]}]], "Input",ExpressionUUID->"a6ebe319-54b3-\
4bea-af41-917d3cb24dc7"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"myexpr", " ", "=", " ", "myexpr"}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"MyHolder", "[", "myexpr", "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"a5884e86-981c-4d6e-9706-7a72d7099319"],

Cell[TextData[{
 "As always, you can temporarily neutralize with ",
 StyleBox["Block", "Input",
  FontSize->12],
 ".  Keep in mind that ",
 StyleBox["myHolder", "Input",
  FontSize->12],
 " would prevent ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 " of its arguments from firing, but will not do so when you ",
 StyleBox["Block", "Input",
  FontSize->12],
 " it, therefore it's possible for this to not be equivalent to the other \
techniques."
}], "Text",ExpressionUUID->"64271d89-e496-420d-bbe2-4f1e36344f0d"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", "myHolder", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"myHolder", "[", "myexpr", "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"e44749fd-225d-4324-b2a3-c2d14235ad3a"],

Cell[TextData[{
 StyleBox["Replace", "Input",
  FontSize->12],
 " is useful if you know that your ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 " contains a particular form, e.g. ",
 StyleBox["s_Symbol", "Input",
  FontSize->12],
 " or ",
 StyleBox["Plus[a_, b_]", "Input",
  FontSize->12],
 ", for instance if it came out of ",
 StyleBox["MakeExpression", "Input",
  FontSize->12],
 ", or ",
 StyleBox["Extract", "Input",
  FontSize->12],
 " or ",
 StyleBox["ToExpression", "Input",
  FontSize->12],
 " with the container argument specified to be ",
 StyleBox["HoldComplete", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"36445a8b-39f4-42ff-a01d-c702a433dcd3"],

Cell[BoxData[
 RowBox[{"Replace", "[", 
  RowBox[{
   RowBox[{"HoldComplete", "[", "myexpr", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"HoldComplete", "[", 
     RowBox[{"Plus", "[", 
      RowBox[{"a_", ",", " ", "b_"}], "]"}], "]"}], " ", "\[RuleDelayed]", 
    " ", 
    RowBox[{"MyHolder", "[", 
     RowBox[{"a", ",", " ", "b"}], "]"}]}]}], "]"}]], "Input",ExpressionUUID->\
"971fdf62-8955-4f36-87e2-c4eda8fc5524"],

Cell["\<\
Padding it one-step evaluated, or passing something you construct from parts:\
\
\>", "Text",ExpressionUUID->"8434325b-2cb9-4eff-b1d3-4d4965f3ca71"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"e", " ", ":=", " ", 
     RowBox[{"Plus", "[", 
      RowBox[{"a", ",", " ", "b"}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"MyHolder", "[", "e", "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",ExpressionUUID->"c330e387-c944-4cac-a89c-629553f36296"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MyHolder", "[", "myexpr", "]"}], " ", "/.", " ", 
  RowBox[{"OwnValues", "[", "myexpr", "]"}]}]], "Input",ExpressionUUID->\
"44cce7ea-6a89-4f45-a40a-62fc925dd4c3"],

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{
   RowBox[{"HoldComplete", "[", "myexpr", "]"}], ",", " ", 
   RowBox[{"Unevaluated", " ", "@", " ", 
    RowBox[{"Plus", "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"{", "1", "}"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"9030ce94-6a16-43ed-aa0e-21586cbaae73"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "This", " ", "will", " ", "let", " ", "Set", " ", "decide", " ", "what", 
    " ", "to", " ", 
    RowBox[{"evaluate", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Set", " ", "@@", " ", 
   RowBox[{"HoldComplete", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"x_", ",", " ", "0"}], "]"}], ",", " ", "rhs"}], 
    "]"}]}]}]], "Input",ExpressionUUID->"e1441eb2-8210-4699-a119-\
aaeb85857d86"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Use strings for symbol names or even to store FullForm of an expression\
\>", "Subsubsection",ExpressionUUID->"f6b5d7a0-82ca-4e6c-b583-5e6275aefe81"],

Cell[TextData[{
 "This is the extreme of preventing interpretation of your expressions:  \
making them no longer expressions, but raw strings.\n\nThis is mainly useful \
for persistent storage, and is essentially what ",
 StyleBox["Save", "Input",
  FontSize->12],
 " does when it writes out code."
}], "Text",ExpressionUUID->"625edeb6-d429-4667-a42f-1b9eed67974b"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
You can even use Unevaluated as a persistent head, but I don't recommend it \
for most cases.\
\>", "Subsubsection",ExpressionUUID->"b4eab2a9-f541-40e0-a89a-19b79051be9a"],

Cell[TextData[{
 "Since ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 " is strange in acting differently depending on whether it's there before or \
after arg evaluation, I don't recommend using it as a persistent head until \
you're ",
 StyleBox["very",
  FontSlant->"Italic"],
 " comfortable with it.  Even then, someone who has to modify your code later \
might not be comfortable with it and might easily be misled into treating it \
like an ordinary head.\n\nIts ordinary use as an ephemeral flag is fine, and \
not likely to cause you any problems."
}], "Text",ExpressionUUID->"90f2b814-e6ef-470f-9e65-474721ceef7d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Related (another example of a more general issue) issue:  when to wrap \
incoming argument in Verbatim in case it's a pattern and you're going to pass \
it to a function that does use pattern semantics when given patterns.\
\>", "Subsubsection",ExpressionUUID->"d3ac8bbb-f7ec-4c2d-a31f-688af1e03001"],

Cell[TextData[{
 "A related issue:  if you are quite sure that an argument should always be \
considered a literal expression, never a pattern, then you'd better \
anticipate that a user could pass a pattern there.  For instance, I once \
wrote a function to take a list and give you a list of all its distinct \
elements together with the count of their occurrences in the list:  ",
 StyleBox["Frequencies", "Input",
  FontSize->12],
 "."
}], "Text",ExpressionUUID->"2cf85b9a-4824-403e-bc59-be0a62366b5a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Frequencies", "[", "list_", "]"}], " ", ":=", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", " ", 
        RowBox[{"Count", "[", 
         RowBox[{"list", ",", " ", "#"}], "]"}]}], "}"}], "&"}], " ", "/@", 
     " ", 
     RowBox[{"Union", "[", "list", "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Never", " ", "mind", " ", "that", " ", "this", " ", 
    RowBox[{"isn", "'"}], "t", " ", "as", " ", "efficient", " ", "as", " ", 
    "it", " ", "could", " ", "be", " ", "due", " ", 
    RowBox[{"to", " ", "'"}], 
    RowBox[{"Count", "'"}], " ", 
    RowBox[{"rescanning", " ", "'"}], 
    RowBox[{"list", "'"}]}], " ", "*)"}]}]}], "Input",ExpressionUUID->\
"0fa0c98a-4ec3-4230-9324-f13ca2339c3f"],

Cell["This doesn't work if list contains some patterns!", "Text",ExpressionUUID->"948ab250-778d-4306-b59b-3ecf62455c60"],

Cell[BoxData[
 RowBox[{
  RowBox[{"list", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", " ", "2.5", ",", " ", "2.5", ",", " ", "_Integer", ",", " ", 
     "_Integer", ",", " ", "_Real", ",", " ", "_Real", ",", " ", "_Real", ",",
      " ", "_Symbol", ",", " ", "_Symbol", ",", " ", "_Symbol"}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"fb6b1ce3-02fb-497c-b678-fe3cb94e5584"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Frequencies", "[", "list", "]"}]], "Input",ExpressionUUID->"4df75dd6-358a-41b0-9e27-847d0f58d9ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.5`", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"_Integer", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"_Real", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"_Symbol", ",", "0"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"694324f8-75af-4550-8c76-4a0964bdf9d0"]
}, Open  ]],

Cell[TextData[{
 "Well, shucks!  ",
 StyleBox["_Symbol", "Input",
  FontSize->12],
 " occurs 3 times, not 0!  And this result implies that the original list had \
a total of 6 elements:"
}], "Text",ExpressionUUID->"26c45ebe-a647-43ab-8253-47311eb7b8ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", " ", "@@", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"Last", ",", " ", "%"}], "]"}]}]], "Input",ExpressionUUID->\
"a105fbda-fd22-413f-beb1-63afc19d9d93"],

Cell[BoxData["6"], "Output",ExpressionUUID->"11c9056f-786f-426b-bbee-7b06d6e50752"]
}, Open  ]],

Cell["when we know darn well it had more:", "Text",ExpressionUUID->"1f4be520-ca10-4f17-881f-325ccc2f8bff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "list", "]"}]], "Input",ExpressionUUID->"ff44028e-13be-4ef2-89a6-f0431b68e7ce"],

Cell[BoxData["11"], "Output",ExpressionUUID->"9351864b-a402-4dc0-8c0d-90ee1c5f5982"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some examples", "Section",ExpressionUUID->"5308e65c-a81d-415d-a80a-520fd235c8b7"],

Cell["\<\
I will add quite a few examples from my scratch work in the next revision of \
this document.\
\>", "Text",ExpressionUUID->"4606893d-d2e0-4d70-9a44-88ecdf66b753"],

Cell[CellGroupData[{

Cell["\<\
To analyze the code in a package:  read the statements from the file as a \
list of Hold[stmt]\
\>", "Subsubsection",ExpressionUUID->"65bbf838-56df-48d0-8baf-2bcbb7a86f76"],

Cell["\<\
Suppose you want to analyze usages in the package, e.g. symbols.\
\>", "Text",ExpressionUUID->"1e2ac483-4713-4687-a4a8-0843eec419b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"heldStatements", " ", "=", " ", 
   RowBox[{"ReadList", "[", 
    RowBox[{"\"\<MyPackage.m\>\"", ",", " ", 
     RowBox[{"Hold", "[", "Expression", "]"}]}], "]"}]}], ";"}]], "Input",Expr\
essionUUID->"16ea0e29-282c-47a3-afe0-4917397073a6"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
HoldCompleteForm:  a non-printing variant of HoldComplete (just as HoldForm \
is to Hold)\
\>", "Subsubsection",ExpressionUUID->"8137581d-ab90-46be-bb1a-3d6abc8a0211"],

Cell[TextData[{
 StyleBox["MyHoldForm", "Input",
  FontSize->12],
 " is a little stronger than ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 ":\n\n(1)  Prevents ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " and ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " wrappers on arguments intact (and ",
 StyleBox["Unevaluated", "Input",
  FontSize->12],
 ", but that's as much because of not calling any code on the args)\n\n(2)  \
Prevents  ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 " of its arguments from firing and thus rewriting it."
}], "Text",ExpressionUUID->"f11a7d26-44b0-4c68-9752-307577cf493c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "HoldCompleteForm", "]"}], " ", "=", " ", 
   "HoldAllComplete"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{"HoldCompleteForm", "[", "expr_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"HoldForm", " ", "@", " ", 
   RowBox[{"HoldForm", "[", "expr", "]"}]}]}]}], "Input",ExpressionUUID->\
"404e7c0c-c70f-44e7-bf44-e9132e4cc0d0"],

Cell[BoxData["HoldAllComplete"], "Output",ExpressionUUID->"3d64a2d2-535b-44b1-bfec-65f0d5d7dd0e"]
}, Open  ]],

Cell[TextData[{
 "This relies on the simple fact that anything deeper than level 1 in a \
holding container won't be touched even if it's wrapped in ",
 StyleBox["Evaluate", "Input",
  FontSize->12],
 " or ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 ", or has ",
 StyleBox["UpValues", "Input",
  FontSize->12],
 ".  For instance:"
}], "Text",ExpressionUUID->"b6dce7f4-84c9-4061-b5d6-ceec4df7e426"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
    RowBox[{"Sequence", "[", 
     RowBox[{"3", ",", " ", "4"}], "]"}]}], "}"}], "]"}]], "Input",ExpressionU\
UID->"87662be6-cd2d-45c3-92a2-aa391f2f59b3"],

Cell[BoxData[
 RowBox[{"Hold", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{"1", "+", "2"}], "]"}], ",", 
    RowBox[{"Sequence", "[", 
     RowBox[{"3", ",", "4"}], "]"}]}], "}"}], "]"}]], "Output",ExpressionUUID->\
"0d2a7a9a-d491-4248-aa10-0aaa25145ab8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"e", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
     RowBox[{"Sequence", "[", 
      RowBox[{"3", ",", " ", "4"}], "]"}]}], "}"}]}], "]"}]], "Input",Expressi\
onUUID->"df6febb4-655a-406e-9fa9-e39c3d8630e7"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"e", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"1", "+", "2"}], "]"}], ",", 
     RowBox[{"Sequence", "[", 
      RowBox[{"3", ",", "4"}], "]"}]}], "}"}]}], "]"}]], "Output",ExpressionUU\
ID->"7a3fa676-013e-4dd1-8a1f-901be8116d89"]
}, Open  ]],

Cell[TextData[{
 "Hence, there was no need to use two layers of ",
 StyleBox["Hold", "Input",
  FontSize->12],
 ".  I could have used a non-holding head at the inner level (though of \
course I want it to be non-printing):"
}], "Text",ExpressionUUID->"2700b50a-dfe8-4800-ba00-8773519d2347"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{"HoldCompleteForm", "[", "expr_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"HoldForm", " ", "@", " ", 
   RowBox[{"SequenceForm", "[", "expr", "]"}]}]}]], "Input",ExpressionUUID->\
"adc3800e-80da-4912-88f4-12f7a1c9cc16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", " ", "HoldCompleteForm"}]], "Input",ExpressionUUID->"c8d2d88e-42c3-4ca2-be94-d37f04863282"],

Cell[BoxData["\<\"Global`HoldCompleteForm\"\>"], "Print",ExpressionUUID->"ee147898-de4d-4bf3-a1f9-7bf92ad5f0f6"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {
     RowBox[{
      RowBox[{"Attributes", "[", "HoldCompleteForm", "]"}], "=", 
      RowBox[{"{", "HoldAllComplete", "}"}]}]},
    {" "},
    {GridBox[{
       {
        RowBox[{
         RowBox[{"MakeBoxes", "[", 
          RowBox[{"expr_", ",", "FormatType_"}], "]"}], "^:=", 
         RowBox[{"\<\"Format\"\>", "[", 
          RowBox[{
           RowBox[{"\<\"HoldForm\"\>", "[", 
            RowBox[{"\<\"SequenceForm\"\>", "[", "expr", "]"}], "]"}], ",", 
           "FormatType"}], "]"}]}]},
       {" "},
       {
        RowBox[{
         RowBox[{"\<\"Format\"\>", "[", "expr_", "]"}], ":=", 
         RowBox[{"\<\"HoldForm\"\>", "[", 
          RowBox[{"\<\"SequenceForm\"\>", "[", "expr", "]"}], "]"}]}]}
      },
      BaselinePosition->{Baseline, {1, 1}},
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{
           Scaled[0.999]}}, "Rows" -> {{1.}}}]}
   },
   BaselinePosition->{Baseline, {1, 1}},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
  Definition[HoldCompleteForm],
  Editable->False]], "Print",ExpressionUUID->"749bb877-1d3f-4169-abf8-\
e5ffef134eff"]
}, Open  ]],

Cell[TextData[{
 "But just as for ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 ", several args don't work.  If you want n args, you maybe want ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " as the displayed head, not sure.  If so, don't use ",
 StyleBox["SequenceForm", "Input",
  FontSize->12],
 ".\n(Though ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 " of n args may have printed as ",
 StyleBox["Sequence", "Input",
  FontSize->12],
 " in V2, not sure.)"
}], "Text",ExpressionUUID->"e8e50cf9-3886-47b2-81ec-4ca7ea8f4b22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HoldCompleteForm", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", " ", "+", " ", "2"}], "]"}], ",", " ", 
   RowBox[{"Sequence", "[", 
    RowBox[{"3", ",", " ", "4"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"a6006999-0ca2-4d84-883d-b2c7a75d2293"],

Cell[BoxData[
 RowBox[{"HoldCompleteForm", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"1", "+", "2"}], "]"}], ",", 
   RowBox[{"Sequence", "[", 
    RowBox[{"3", ",", "4"}], "]"}]}], "]"}]], "Output",ExpressionUUID->\
"c8953860-566b-4639-9e70-ed047a85fb3b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"HoldCompleteForm", "[", 
    RowBox[{"Evaluate", "[", 
     RowBox[{"1", " ", "+", " ", "2"}], "]"}], "]"}], ",", " ", 
   RowBox[{"HoldCompleteForm", "[", 
    RowBox[{"Sequence", "[", 
     RowBox[{"3", ",", " ", "4"}], "]"}], "]"}]}], "}"}]], "Input",ExpressionU\
UID->"ee3033ba-71cd-466b-919e-3cf4edb9300c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    InterpretationBox[
     RowBox[{"Evaluate", "[", 
      RowBox[{"1", "+", "2"}], "]"}],
     SequenceForm[
      Evaluate[1 + 2]],
     Editable->False],
    HoldForm], ",", 
   TagBox[
    InterpretationBox[
     RowBox[{"Sequence", "[", 
      RowBox[{"3", ",", "4"}], "]"}],
     SequenceForm[
      Sequence[3, 4]],
     Editable->False],
    HoldForm]}], "}"}]], "Output",ExpressionUUID->"85501a06-7690-4268-95f4-\
a2418206d89c"]
}, Open  ]],

Cell[TextData[{
 "Another implementation of the ",
 StyleBox["Format", "Input",
  FontSize->12],
 " rule (following ",
 StyleBox["$Output", "Input",
  FontSize->12],
 " to be pedantic):\n[",
 StyleBox["Hmmm, ", "EditorialRemark"],
 StyleBox["$Output", "Input",
  FontSize->12],
 StyleBox[" likely has ", "EditorialRemark"],
 StyleBox["FormatType->StandardForm", "Input",
  FontSize->12],
 StyleBox[", which isn't what we want?  Revisit this...]", "EditorialRemark"]
}], "Text",ExpressionUUID->"f3a5088f-d177-43d0-9587-10a5845c3a5b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{"HoldCompleteForm", "[", "expr_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"ToString", "[", 
   RowBox[{
    RowBox[{"Unevaluated", "[", "expr", "]"}], ",", " ", 
    RowBox[{"Sequence", " ", "@@", " ", 
     RowBox[{"Options", "[", "$Output", "]"}]}]}], "]"}]}]], "Input",Expressio\
nUUID->"d57597b1-8c17-479e-8fa0-8abd0da897d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{"HoldCompleteForm", "[", "expr_", "]"}], "]"}], " ", ":=", " ", 
  RowBox[{"ToString", "[", 
   RowBox[{
    RowBox[{"Unevaluated", "[", "expr", "]"}], ",", " ", "OutputForm", ",", 
    " ", 
    RowBox[{"Sequence", " ", "@@", " ", 
     RowBox[{"Options", "[", "$Output", "]"}]}]}], "]"}]}]], "Input",Expressio\
nUUID->"bdff235c-b3c5-4db9-9f37-910b73f79cd2"],

Cell[TextData[{
 "But this implementation is not as correct, cuz it formats it as a string, \
whereas normally ",
 StyleBox["HoldForm", "Input",
  FontSize->12],
 " would format as an expression, which makes a difference if the output \
format is typeset.  The \"output format\" could be either the default (in ",
 StyleBox["$Output", "Input",
  FontSize->12],
 ") or a one-shot deal like ",
 StyleBox["expr //TraditionalForm", "Input",
  FontSize->12],
 ", at run-time, you just don't know."
}], "Text",ExpressionUUID->"1bd429cf-29a6-4009-8d2b-a54771e3f478"]
}, Closed]],

Cell[CellGroupData[{

Cell["Set and SetDelayed can be more flexible.", "Subsubsection",ExpressionUUID->"42474221-7f79-495b-87c4-bd2b37f8b9d3"],

Cell[TextData[{
 "- Evaluate certain parts of ",
 StyleBox["SetDelayed", "Input",
  FontSize->12],
 " rhs as exceptions\n- Don't evaluate certain parts of ",
 StyleBox["Set", "Input",
  FontSize->12],
 " rhs as exceptions\n\n- Properly scope pattern vars of ",
 StyleBox["Set", "Input",
  FontSize->12],
 " when conducting assignment to be stored."
}], "Text",ExpressionUUID->"65563ff2-b73b-4441-be38-059d5a4cad06"],

Cell["\<\
I will include these examples in the next revision of this document.\
\>", "Text",ExpressionUUID->"9247ac6c-eb62-452d-8445-2afdb921e462"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Temporarily deactivate kernel functions that open files for writing\
\>", "Subsubsection",ExpressionUUID->"f35b4723-10d5-4445-b73e-c3ad97e3f809"],

Cell["\<\
Here's a crude \"scoping construct\" that deactivates file writing commands \
for the duration of execution of its body:\
\>", "Text",ExpressionUUID->"f9a4d09e-e8e9-489f-8984-5d29087a0313"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"$FileWritingFunctions", "=", 
    RowBox[{"{", 
     RowBox[{
     "Put", ",", "PutAppend", ",", "OpenWrite", ",", "OpenAppend", ",", 
      "Save", ",", "DumpSave", ",", " ", "Splice", ",", "Display", ",", 
      "Write", ",", "WriteString", ",", "Encode"}], "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Attributes", "[", "NoFiles", "]"}], "=", "HoldFirst"}], ";"}], 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"NoFiles", "[", "expr_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Unevaluated", "@", 
    RowBox[{"Block", "[", 
     RowBox[{"$FileWritingFunctions", ",", "expr"}], "]"}]}], "/.", 
   RowBox[{"OwnValues", "[", "$FileWritingFunctions", "]"}]}]}]}], "Input",Exp\
ressionUUID->"060604b8-4457-481a-b7e9-1ae8cc69fb98"],

Cell["\<\
This is untested, but it illustrates that you can implement your own \
debugging/testing tools with the techniques described in this talk.\
\>", "Text",ExpressionUUID->"a75f0884-5346-41b8-9f4f-da5a32879293"]
}, Closed]]
}, Open  ]]
},
AutoGeneratedPackage->None,
Evaluator->"Local 4.0.2 (6S, 1 Sep 1999)",
WindowSize->{735, 891},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
PrintingPageRange->{Automatic, Automatic},
PrintingOptions->{"Magnification"->1,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792},
"PostScriptOutputFile":>FrontEnd`FileName[{$RootDirectory, "mnt", "floppy"}, 
  "UnevaluatedExpressions.nb.ps", CharacterEncoding -> "ISO8859-1"]},
CellLabelAutoDelete->True,
SpellingOptions->{"AlwaysStop"->"RepeatedWords"},
SpellingDictionaries->{"CorrectWords"->{
 "heldElems", "elems", "patts", "factored", "held", "initializations", "expr",
   "iterand", "iter", "heldIterSpecs", "heldVars", "heldVarList", "ilim", 
  "Expr", "canonicalize", "Withoff", "Maeder", "formatter", "eval", "ni", 
  "Canonicalize", "args", "Args", "heldArgs", "heldPairs", "ls", 
  "heldDegrees", "ints", "nonInts", "heldDegreesNew", "heldSum", "argrx", 
  "arguments", "myexpr", "rhs", "Delaix", "Robby", "vars", "attrs", "exprs", 
  "fmt", "boxexpr", "cuz", "heldStatements", "var", "lhs", "subexprs", 
  "Hold'ing", "coeff", "outer", "levelspecs", "partspec", "posList", "Trott", 
  "Strzebonski", "jaggedTable", "heldTable", "meta", "for", "wasProtected", 
  "wget", "tgayley", "num", "x$", "Gotchas", "ssle", "Withoff's", "Hmmm", 
  "subexpr", "vs.", "args.", "by", "recursors", "iterator", "rgs", "control", 
  "uneval'n", "localvars", "vn", "scopers", "x$n.", "withoff", "funcs", 
  "mappings", "sym", "Attrs", "holdAttrs", "ordinaryHoldFuncs", "expr.", 
  "nHoldFuncs", "patt", "exprs.", "obj", "hmm", "scratchwork", "n_Integer", 
  "func", "x_String", "things_List", "opt", "x", "x_RawType", "where", 
  "isSymbol", "oom", "isn'", "rescanning", "list", "when", "musings", "x$10", 
  "dgbgn", "dgend", "res", "cont", "Dir", "heldDegreesSorted", 
  "heldDegreesGrouped", "Na", "demystify", "ei", "spam", "Villegas"}},
Magnification->1,
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (November 18, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell["Style Definitions", "Subtitle"], 
      Cell[
      "Modify the definitions below to change the default appearance of all \
cells in a given style.  Make modifications to any definition using commands \
in the Format menu.", "Text"], 
      Cell[
       CellGroupData[{
         Cell["Style Environment Names", "Section"], 
         Cell[
          StyleData[All, "Working"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 9], 
         Cell[
          StyleData[All, "Presentation"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{24, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 12], 
         Cell[
          StyleData[All, "Condensed"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{8, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 8], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
          ScriptMinSize -> 5, 
          PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Notebook Options", "Section"], 
         Cell[
         "The options defined for the style below will be used at the \
Notebook level.", "Text"], 
         Cell[
          StyleData["Notebook"], PageHeaders -> {{
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"], None, 
             Cell[
              TextData[{
                ValueBox["FileName"]}], "Header"]}, {
             Cell[
              TextData[{
                ValueBox["FileName"]}], "Header"], None, 
             Cell[
              TextData[{
                CounterBox["Page"]}], "PageNumber"]}}, CellFrameLabelMargins -> 
          6, StyleMenuListing -> None]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Headings", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellMargins -> {{12, Inherited}, {20, 40}}, 
             CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Title", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}}, FontFamily -> 
             "Helvetica", FontSize -> 36, FontWeight -> "Bold"], 
            Cell[
             StyleData["Title", "Presentation"], 
             CellMargins -> {{24, 10}, {20, 40}}, LineSpacing -> {1, 0}, 
             FontSize -> 44], 
            Cell[
             StyleData["Title", "Condensed"], 
             CellMargins -> {{8, 10}, {4, 8}}, FontSize -> 20], 
            Cell[
             StyleData["Title", "Printout"], 
             CellMargins -> {{2, 10}, {12, 30}}, FontSize -> 24]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], 
             CellMargins -> {{12, Inherited}, {20, 15}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Subsubtitle", 0}}, FontFamily -> "Helvetica", 
             FontSize -> 30, FontWeight -> "Bold"], 
            Cell[
             StyleData["Subtitle", "Presentation"], 
             CellMargins -> {{24, 10}, {20, 20}}, LineSpacing -> {1, 0}, 
             FontSize -> 36], 
            Cell[
             StyleData["Subtitle", "Condensed"], 
             CellMargins -> {{8, 10}, {4, 4}}, FontSize -> 14], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{2, 10}, {12, 8}}, FontSize -> 18]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubtitle"], 
             CellMargins -> {{12, Inherited}, {20, 15}}, 
             CellGroupingRules -> {"TitleGrouping", 20}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subsubtitle", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}}, FontFamily -> "Helvetica", FontSize -> 24, 
             FontWeight -> "Bold", FontSlant -> "Plain"], 
            Cell[
             StyleData["Subsubtitle", "Presentation"], 
             CellMargins -> {{24, 10}, {20, 20}}, LineSpacing -> {1, 0}, 
             FontSize -> 24], 
            Cell[
             StyleData["Subsubtitle", "Condensed"], 
             CellMargins -> {{8, 10}, {8, 8}}, FontSize -> 12], 
            Cell[
             StyleData["Subsubtitle", "Printout"], 
             CellMargins -> {{2, 10}, {12, 8}}, FontSize -> 14]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellDingbat -> "\[FilledSquare]", 
             CellMargins -> {{25, Inherited}, {8, 24}}, 
             CellGroupingRules -> {"SectionGrouping", 30}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Section", 
             CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}}, 
             FontFamily -> "Helvetica", FontSize -> 24, FontWeight -> "Bold"], 
            Cell[
             StyleData["Section", "Presentation"], 
             CellMargins -> {{40, 10}, {11, 32}}, LineSpacing -> {1, 0}, 
             FontSize -> 24], 
            Cell[
             StyleData["Section", "Condensed"], 
             CellMargins -> {{18, Inherited}, {6, 12}}, FontSize -> 12], 
            Cell[
             StyleData["Section", "Printout"], 
             CellMargins -> {{13, 0}, {7, 22}}, FontSize -> 14]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellDingbat -> "\[FilledSmallSquare]", 
             CellMargins -> {{22, Inherited}, {8, 20}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subsection", CounterAssignments -> {{"Subsubsection", 0}}, 
             FontFamily -> "Times", FontSize -> 18, FontWeight -> "Bold"], 
            Cell[
             StyleData["Subsection", "Presentation"], 
             CellMargins -> {{36, 10}, {11, 32}}, LineSpacing -> {1, 0}, 
             FontSize -> 22], 
            Cell[
             StyleData["Subsection", "Condensed"], 
             CellMargins -> {{16, Inherited}, {6, 12}}, FontSize -> 12], 
            Cell[
             StyleData["Subsection", "Printout"], 
             CellMargins -> {{9, 0}, {7, 22}}, FontSize -> 12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellDingbat -> 
             "\[FilledSmallSquare]", 
             CellMargins -> {{22, Inherited}, {8, 18}}, 
             CellGroupingRules -> {"SectionGrouping", 50}, PageBreakBelow -> 
             False, DefaultNewInlineCellStyle -> "None", 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, 
             LanguageCategory -> "NaturalLanguage", CounterIncrements -> 
             "Subsubsection", FontFamily -> "Times", FontSize -> 16, 
             FontWeight -> "Bold"], 
            Cell[
             StyleData["Subsubsection", "Presentation"], 
             CellMargins -> {{34, 10}, {11, 26}}, LineSpacing -> {1, 0}, 
             FontSize -> 18], 
            Cell[
             StyleData["Subsubsection", "Condensed"], 
             CellMargins -> {{17, Inherited}, {6, 12}}, FontSize -> 10], 
            Cell[
             StyleData["Subsubsection", "Printout"], 
             CellMargins -> {{9, 0}, {7, 14}}, FontSize -> 11]}, Closed]]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Body Text", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], CellMargins -> {{12, 10}, {7, 7}}, 
             InputAutoReplacements -> {"TeX" -> StyleBox[
                 RowBox[{"T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "LaTeX" -> StyleBox[
                 RowBox[{"L", 
                   StyleBox[
                    AdjustmentBox[
                    "A", BoxMargins -> {{-0.36, -0.1}, {0, 0}}, 
                    BoxBaselineShift -> -0.2], FontSize -> Smaller], "T", 
                   AdjustmentBox[
                   "E", BoxMargins -> {{-0.075, -0.085}, {0, 0}}, 
                    BoxBaselineShift -> 0.5], "X"}]], "mma" -> "Mathematica", 
               "Mma" -> "Mathematica", "MMA" -> "Mathematica"}, Hyphenation -> 
             True, LineSpacing -> {1, 3}, CounterIncrements -> "Text", 
             FontSize -> 14], 
            Cell[
             StyleData["Text", "Presentation"], 
             CellMargins -> {{24, 10}, {10, 10}}, LineSpacing -> {1, 5}, 
             FontSize -> 16], 
            Cell[
             StyleData["Text", "Condensed"], CellMargins -> {{8, 10}, {6, 6}},
              LineSpacing -> {1, 1}, FontSize -> 11], 
            Cell[
             StyleData["Text", "Printout"], CellMargins -> {{2, 2}, {6, 6}}, 
             TextJustification -> 0.5, FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SmallText"], CellMargins -> {{12, 10}, {6, 6}}, 
             DefaultNewInlineCellStyle -> "None", Hyphenation -> True, 
             LineSpacing -> {1, 3}, LanguageCategory -> "NaturalLanguage", 
             CounterIncrements -> "SmallText", FontFamily -> "Helvetica", 
             FontSize -> 10], 
            Cell[
             StyleData["SmallText", "Presentation"], 
             CellMargins -> {{24, 10}, {8, 8}}, LineSpacing -> {1, 5}, 
             FontSize -> 12], 
            Cell[
             StyleData["SmallText", "Condensed"], 
             CellMargins -> {{8, 10}, {5, 5}}, LineSpacing -> {1, 2}, 
             FontSize -> 9], 
            Cell[
             StyleData["SmallText", "Printout"], 
             CellMargins -> {{2, 2}, {5, 5}}, TextJustification -> 0.5, 
             FontSize -> 7]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Input/Output", "Section"], 
         Cell[
         "The cells in this section define styles used for input and output \
to the kernel.  Be careful when modifying, renaming, or removing these \
styles, because the front end associates special meanings with these style \
names. Some attributes for these styles are actually set in FormatType Styles \
(in the last section of this stylesheet). ", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Input"], CellMargins -> {{45, 10}, {5, 7}}, 
             Evaluatable -> True, CellGroupingRules -> "InputGrouping", 
             CellHorizontalScrolling -> True, PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, DefaultFormatType -> 
             DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
             InputForm, ShowStringCharacters -> True, NumberMarks -> True, 
             LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> 
             "Input", FontWeight -> "Bold"], 
            Cell[
             StyleData["Input", "Presentation"], 
             CellMargins -> {{72, Inherited}, {8, 10}}, LineSpacing -> {1, 0},
              FontSize -> 16], 
            Cell[
             StyleData["Input", "Condensed"], 
             CellMargins -> {{40, 10}, {2, 3}}, FontSize -> 11], 
            Cell[
             StyleData["Input", "Printout"], CellMargins -> {{39, 0}, {4, 6}},
              LinebreakAdjustments -> {0.85, 2, 10, 1, 1}, FontSize -> 9]}, 
           Closed]], 
         Cell[
          StyleData["InputOnly"], Evaluatable -> True, CellGroupingRules -> 
          "InputGrouping", CellHorizontalScrolling -> True, DefaultFormatType -> 
          DefaultInputFormatType, 
          HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"},
           AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
          InputForm, ShowStringCharacters -> True, NumberMarks -> True, 
          LinebreakAdjustments -> {0.85, 2, 10, 0, 1}, CounterIncrements -> 
          "Input", StyleMenuListing -> None, FontWeight -> "Bold"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Output"], CellMargins -> {{47, 10}, {7, 5}}, 
             CellEditDuplicate -> True, CellGroupingRules -> "OutputGrouping",
              CellHorizontalScrolling -> True, PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, DefaultFormatType -> 
             DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, LanguageCategory -> "Formula", FormatType -> 
             InputForm, CounterIncrements -> "Output"], 
            Cell[
             StyleData["Output", "Presentation"], 
             CellMargins -> {{72, Inherited}, {10, 8}}, LineSpacing -> {1, 0},
              FontSize -> 16], 
            Cell[
             StyleData["Output", "Condensed"], 
             CellMargins -> {{41, Inherited}, {3, 2}}, FontSize -> 11], 
            Cell[
             StyleData["Output", "Printout"], 
             CellMargins -> {{39, 0}, {6, 4}}, FontSize -> 9]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Message"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             CounterIncrements -> "Message", StyleMenuListing -> None, 
             FontSize -> 11, FontColor -> RGBColor[0, 0, 1]], 
            Cell[
             StyleData["Message", "Presentation"], 
             CellMargins -> {{72, Inherited}, {Inherited, Inherited}}, 
             LineSpacing -> {1, 0}, FontSize -> 16], 
            Cell[
             StyleData["Message", "Condensed"], 
             CellMargins -> {{41, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 11], 
            Cell[
             StyleData["Message", "Printout"], 
             CellMargins -> {{39, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 7, FontColor -> GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Print"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
             False, DefaultFormatType -> DefaultOutputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             CounterIncrements -> "Print", StyleMenuListing -> None], 
            Cell[
             StyleData["Print", "Presentation"], 
             CellMargins -> {{72, Inherited}, {Inherited, Inherited}}, 
             LineSpacing -> {1, 0}, FontSize -> 16], 
            Cell[
             StyleData["Print", "Condensed"], 
             CellMargins -> {{41, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 11], 
            Cell[
             StyleData["Print", "Printout"], 
             CellMargins -> {{39, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 8]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics"], 
             CellMargins -> {{4, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, LanguageCategory -> 
             None, FormatType -> InputForm, CounterIncrements -> "Graphics", 
             ImageMargins -> {{43, Inherited}, {Inherited, 0}}, 
             StyleMenuListing -> None, FontFamily -> "Courier", FontSize -> 
             10], 
            Cell[
             StyleData["Graphics", "Presentation"], 
             ImageMargins -> {{62, Inherited}, {Inherited, 0}}], 
            Cell[
             StyleData["Graphics", "Condensed"], 
             ImageMargins -> {{38, Inherited}, {Inherited, 0}}, Magnification -> 
             0.6], 
            Cell[
             StyleData["Graphics", "Printout"], 
             ImageMargins -> {{30, Inherited}, {Inherited, 0}}, Magnification -> 
             0.8]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellLabel"], StyleMenuListing -> None, FontFamily -> 
             "Helvetica", FontSize -> 9, FontColor -> RGBColor[0, 0, 1]], 
            Cell[
             StyleData["CellLabel", "Presentation"], FontSize -> 12], 
            Cell[
             StyleData["CellLabel", "Condensed"], FontSize -> 9], 
            Cell[
             StyleData["CellLabel", "Printout"], FontFamily -> "Courier", 
             FontSize -> 8, FontSlant -> "Italic", FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Inline Formatting", "Section"], 
         Cell[
         "These styles are for modifying individual words or letters in a \
cell exclusive of the cell tag.", "Text"], 
         Cell[
          StyleData["RM"], StyleMenuListing -> None, FontWeight -> "Plain", 
          FontSlant -> "Plain"], 
         Cell[
          StyleData["BF"], StyleMenuListing -> None, FontWeight -> "Bold"], 
         Cell[
          StyleData["IT"], StyleMenuListing -> None, FontSlant -> "Italic"], 
         Cell[
          StyleData["TR"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Plain", FontSlant -> "Plain"], 
         Cell[
          StyleData["TI"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Plain", FontSlant -> "Italic"], 
         Cell[
          StyleData["TB"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Bold", FontSlant -> "Plain"], 
         Cell[
          StyleData["TBI"], StyleMenuListing -> None, FontFamily -> "Times", 
          FontWeight -> "Bold", FontSlant -> "Italic"], 
         Cell[
          StyleData["MR"], StyleMenuListing -> None, FontFamily -> "Courier", 
          FontWeight -> "Plain", FontSlant -> "Plain"], 
         Cell[
          StyleData["MO"], StyleMenuListing -> None, FontFamily -> "Courier", 
          FontWeight -> "Plain", FontSlant -> "Italic"], 
         Cell[
          StyleData["MB"], StyleMenuListing -> None, FontFamily -> "Courier", 
          FontWeight -> "Bold", FontSlant -> "Plain"], 
         Cell[
          StyleData["MBO"], StyleMenuListing -> None, FontFamily -> "Courier",
           FontWeight -> "Bold", FontSlant -> "Italic"], 
         Cell[
          StyleData["SR"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Plain", FontSlant -> "Plain"], 
         Cell[
          StyleData["SO"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Plain", FontSlant -> "Italic"], 
         Cell[
          StyleData["SB"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Bold", FontSlant -> "Plain"], 
         Cell[
          StyleData["SBO"], StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontWeight -> "Bold", FontSlant -> "Italic"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SO10"], StyleMenuListing -> None, FontFamily -> 
             "Helvetica", FontSize -> 10, FontWeight -> "Plain", FontSlant -> 
             "Italic"], 
            Cell[
             StyleData["SO10", "Printout"], StyleMenuListing -> None, 
             FontFamily -> "Helvetica", FontSize -> 7, FontWeight -> "Plain", 
             FontSlant -> "Italic"], 
            Cell[
             StyleData["SO10", "EnhancedPrintout"], StyleMenuListing -> None, 
             FontFamily -> "Futura", FontSize -> 7, FontWeight -> "Plain", 
             FontSlant -> "Italic"]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Formulas and Programming", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["InlineFormula"], CellMargins -> {{10, 4}, {0, 8}}, 
             CellHorizontalScrolling -> True, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, LanguageCategory -> 
             "Formula", ScriptLevel -> 1, SingleLetterItalics -> True], 
            Cell[
             StyleData["InlineFormula", "Presentation"], 
             CellMargins -> {{24, 10}, {10, 10}}, LineSpacing -> {1, 5}, 
             FontSize -> 16], 
            Cell[
             StyleData["InlineFormula", "Condensed"], 
             CellMargins -> {{8, 10}, {6, 6}}, LineSpacing -> {1, 1}, 
             FontSize -> 11], 
            Cell[
             StyleData["InlineFormula", "Printout"], 
             CellMargins -> {{2, 0}, {6, 6}}, FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["DisplayFormula"], 
             CellMargins -> {{42, Inherited}, {Inherited, Inherited}}, 
             CellHorizontalScrolling -> True, DefaultFormatType -> 
             DefaultInputFormatType, 
             HyphenationOptions -> {
              "HyphenationCharacter" -> "\[Continuation]"}, LanguageCategory -> 
             "Formula", ScriptLevel -> 0, SingleLetterItalics -> True, 
             UnderoverscriptBoxOptions -> {LimitsPositioning -> True}], 
            Cell[
             StyleData["DisplayFormula", "Presentation"], 
             LineSpacing -> {1, 5}, FontSize -> 16], 
            Cell[
             StyleData["DisplayFormula", "Condensed"], LineSpacing -> {1, 1}, 
             FontSize -> 11], 
            Cell[
             StyleData["DisplayFormula", "Printout"], FontSize -> 10]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Program"], CellFrame -> {{0, 0}, {0.5, 0.5}}, 
             CellMargins -> {{10, 4}, {0, 8}}, CellHorizontalScrolling -> 
             True, Hyphenation -> False, LanguageCategory -> "Formula", 
             ScriptLevel -> 1, FontFamily -> "Courier"], 
            Cell[
             StyleData["Program", "Presentation"], 
             CellMargins -> {{24, 10}, {10, 10}}, LineSpacing -> {1, 5}, 
             FontSize -> 16], 
            Cell[
             StyleData["Program", "Condensed"], 
             CellMargins -> {{8, 10}, {6, 6}}, LineSpacing -> {1, 1}, 
             FontSize -> 11], 
            Cell[
             StyleData["Program", "Printout"], 
             CellMargins -> {{2, 0}, {6, 6}}, FontSize -> 9]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Hyperlink Styles", "Section"], 
         Cell[
         "The cells below define styles useful for making hypertext \
ButtonBoxes.  The \"Hyperlink\" style is for links within the same Notebook, \
or between Notebooks.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Hyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               ButtonData}], 
            Cell[
             StyleData["Hyperlink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["Hyperlink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["Hyperlink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
         "The following styles are for linking automatically to the on-line \
help system.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["MainBookLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["MainBook", #]}]& )}], 
            Cell[
             StyleData["MainBookLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["MainBookLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["MainBookLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["AddOnsLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["AddOns", #]}]& )}], 
            Cell[
             StyleData["AddOnsLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["AddOnsLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["AddOnsLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["RefGuideLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["RefGuide", #]}]& )}], 
            Cell[
             StyleData["RefGuideLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["RefGuideLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["RefGuideLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GettingStartedLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["GettingStarted", #]}]& )}], 
            Cell[
             StyleData["GettingStartedLink", "Presentation"], FontSize -> 16], 
            Cell[
             StyleData["GettingStartedLink", "Condensed"], FontSize -> 11], 
            Cell[
             StyleData["GettingStartedLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["OtherInformationLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, 
               Appearance -> {Automatic, None, "Normal", Automatic}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["OtherInformation", #]}]& )}], 
            Cell[
             StyleData["OtherInformationLink", "Presentation"], FontSize -> 
             16], 
            Cell[
             StyleData["OtherInformationLink", "Condensed"], FontSize -> 11], 
            
            Cell[
             StyleData["OtherInformationLink", "Printout"], FontSize -> 10, 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Headers and Footers", "Section"], 
         Cell[
          StyleData["Header"], CellMargins -> {{0, 0}, {4, 1}}, 
          DefaultNewInlineCellStyle -> "None", LanguageCategory -> 
          "NaturalLanguage", StyleMenuListing -> None, FontSize -> 10, 
          FontSlant -> "Italic"], 
         Cell[
          StyleData["Footer"], CellMargins -> {{0, 0}, {0, 4}}, 
          DefaultNewInlineCellStyle -> "None", LanguageCategory -> 
          "NaturalLanguage", StyleMenuListing -> None, FontSize -> 9, 
          FontSlant -> "Italic"], 
         Cell[
          StyleData["PageNumber"], CellMargins -> {{0, 0}, {4, 1}}, 
          StyleMenuListing -> None, FontFamily -> "Times", FontSize -> 10]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Palette Styles", "Section"], 
         Cell[
         "The cells below define styles that define standard ButtonFunctions, \
for use in palette buttons.", "Text"], 
         Cell[
          StyleData["Paste"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, After]}]& )}], 
         Cell[
          StyleData["Evaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["EvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionMove[
                FrontEnd`InputNotebook[], All, Cell, 1], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Placeholder Styles", "Section"], 
         Cell[
         "The cells below define styles useful for making placeholder objects \
in palette templates.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Placeholder"], Placeholder -> True, StyleMenuListing -> 
             None, FontSlant -> "Italic", FontColor -> 
             RGBColor[0.890623, 0.864698, 0.384756], 
             TagBoxOptions -> {
              Editable -> False, Selectable -> False, StripWrapperBoxes -> 
               False}], 
            Cell[
             StyleData["Placeholder", "Presentation"]], 
            Cell[
             StyleData["Placeholder", "Condensed"]], 
            Cell[
             StyleData["Placeholder", "Printout"]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["PrimaryPlaceholder"], StyleMenuListing -> None, 
             DrawHighlighted -> True, FontSlant -> "Italic", Background -> 
             RGBColor[0.912505, 0.891798, 0.507774], 
             TagBoxOptions -> {
              Editable -> False, Selectable -> False, StripWrapperBoxes -> 
               False}], 
            Cell[
             StyleData["PrimaryPlaceholder", "Presentation"]], 
            Cell[
             StyleData["PrimaryPlaceholder", "Condensed"]], 
            Cell[
             StyleData["PrimaryPlaceholder", "Printout"]]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["FormatType Styles", "Section"], 
         Cell[
         "The cells below define styles that are mixed in with the styles of \
most cells.  If a cell's FormatType matches the name of one of the styles \
defined below, then that style is applied between the cell's style and its \
own options. This is particularly true of Input and Output.", "Text"], 
         Cell[
          StyleData["CellExpression"], PageWidth -> Infinity, 
          CellMargins -> {{6, Inherited}, {Inherited, Inherited}}, 
          ShowCellLabel -> False, ShowSpecialCharacters -> False, 
          AllowInlineCells -> False, Hyphenation -> False, 
          AutoItalicWords -> {}, StyleMenuListing -> None, FontFamily -> 
          "Courier", FontSize -> 12, Background -> GrayLevel[1]], 
         Cell[
          StyleData["InputForm"], InputAutoReplacements -> {}, 
          AllowInlineCells -> False, Hyphenation -> False, StyleMenuListing -> 
          None, FontFamily -> "Courier"], 
         Cell[
          StyleData["OutputForm"], PageWidth -> Infinity, TextAlignment -> 
          Left, LineSpacing -> {0.6, 1}, StyleMenuListing -> None, FontFamily -> 
          "Courier"], 
         Cell[
          StyleData["StandardForm"], 
          InputAutoReplacements -> {
           "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
            "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", 
            "==" -> "\[Equal]", Inherited}, LineSpacing -> {1.25, 0}, 
          StyleMenuListing -> None, FontFamily -> "Courier"], 
         Cell[
          StyleData["TraditionalForm"], 
          InputAutoReplacements -> {
           "->" -> "\[Rule]", ":>" -> "\[RuleDelayed]", "<=" -> 
            "\[LessEqual]", ">=" -> "\[GreaterEqual]", "!=" -> "\[NotEqual]", 
            "==" -> "\[Equal]", Inherited}, LineSpacing -> {1.25, 0}, 
          SingleLetterItalics -> True, TraditionalFunctionNotation -> True, 
          StyleMenuListing -> None, DelimiterMatching -> None], 
         Cell[
         "The style defined below is mixed in to any cell that is in an \
inline cell within another.", "Text"], 
         Cell[
          StyleData["InlineCell"], TextAlignment -> Left, ScriptLevel -> 1, 
          StyleMenuListing -> None], 
         Cell[
          StyleData["InlineCellEditing"], StyleMenuListing -> None, 
          Background -> RGBColor[1, 0.749996, 0.8]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Automatic Styles", "Section"], 
         Cell[
         "The cells below define styles that are used to affect the display \
of certain types of objects in typeset expressions.  For example, \
\"UnmatchedBracket\" style defines how unmatched bracket, curly bracket, and \
parenthesis characters are displayed (typically by coloring them to make them \
stand out).", "Text"], 
         Cell[
          StyleData["UnmatchedBracket"], StyleMenuListing -> None, FontColor -> 
          RGBColor[0.760006, 0.330007, 0.8]]}, Closed]]}, Open]]}, Visible -> 
  False, FrontEndVersion -> 
  "13.2 for Mac OS X ARM (64-bit) (November 18, 2022)", StyleDefinitions -> 
  "Default.nb"],
ExpressionUUID->"4cffb6f1-7ffb-4a55-95e6-ac88b53ab619"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 178, 3, 94, "Input",ExpressionUUID->"991451c9-66bf-4e3b-9ab7-e20e8820c206"],
Cell[739, 25, 127, 4, 47, "Author",ExpressionUUID->"de87c8b1-40e8-48d2-9069-9da24dce453d"],
Cell[869, 31, 994, 16, 291, "Abstract",ExpressionUUID->"51ccd2c4-5dff-44d8-84d6-44196ea4edca"],
Cell[1866, 49, 337, 9, 74, "Input",ExpressionUUID->"41604f82-f27f-4bd1-82a5-a36c03fc395a",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2228, 62, 115, 0, 57, "Section",ExpressionUUID->"bb6e45b8-054e-4141-aa09-18b2b0bb166d"],
Cell[CellGroupData[{
Cell[2368, 66, 105, 0, 42, "Subsubsection",ExpressionUUID->"8b89d48c-4384-4d70-ba0a-d27337c818be"],
Cell[2476, 68, 789, 22, 187, "Text",ExpressionUUID->"24b585b0-f15a-4d24-bcab-2349d79ce175"],
Cell[3268, 92, 458, 11, 65, "Text",ExpressionUUID->"63ad11b8-7b2e-4e9f-b0b1-ea9e44e85895"],
Cell[3729, 105, 457, 13, 74, "Input",ExpressionUUID->"a8326331-4a97-497d-9987-bcae87c1822b"],
Cell[CellGroupData[{
Cell[4211, 122, 250, 7, 26, "Input",ExpressionUUID->"4cfcf8f5-b61e-46b4-b05b-bc18e82dfd5a"],
Cell[4464, 131, 751, 22, 46, "Output",ExpressionUUID->"17dedae5-ebdd-4316-a2fd-3941364c2328"]
}, Open  ]],
Cell[5230, 156, 398, 11, 47, "Text",ExpressionUUID->"b9fb7291-89e8-48aa-be6a-9935b645f73a"],
Cell[CellGroupData[{
Cell[5653, 171, 276, 7, 26, "Input",ExpressionUUID->"b727c650-ca55-4259-9999-c32f120bf86c"],
Cell[5932, 180, 502, 16, 51, "Output",ExpressionUUID->"540f96dc-87d2-4619-8037-2fc86ea09c5b"]
}, Open  ]],
Cell[6449, 199, 345, 6, 47, "Text",ExpressionUUID->"29cacb3a-016f-4cfc-a9fc-5185edbe8fdb"],
Cell[6797, 207, 728, 15, 207, "Text",ExpressionUUID->"ad073865-e380-4266-94c0-ba81532025a1"],
Cell[7528, 224, 1633, 54, 200, "Text",ExpressionUUID->"6af588ef-464c-4597-a160-f40216324887"],
Cell[9164, 280, 441, 9, 65, "Text",ExpressionUUID->"e90a9735-626e-4f2f-9ae6-a8f4d64b40e2"],
Cell[CellGroupData[{
Cell[9630, 293, 502, 18, 26, "Input",ExpressionUUID->"e26f98f6-b428-4937-b6b4-5d93d89fed0c"],
Cell[10135, 313, 228, 7, 26, "Output",ExpressionUUID->"386082f6-a239-4999-9e0e-e0a8d09ad2c5"]
}, Open  ]],
Cell[10378, 323, 594, 12, 83, "Text",ExpressionUUID->"a4898d1c-f8ce-4905-8ded-4ae72dc633a3"],
Cell[CellGroupData[{
Cell[10997, 339, 611, 22, 26, "Input",ExpressionUUID->"365bd9af-248c-493a-97cb-cd1d8841cbc4"],
Cell[11611, 363, 1931, 75, 112, "Output",ExpressionUUID->"da83fae7-559d-4e53-b51a-997ec11cc9fe"]
}, Open  ]],
Cell[13557, 441, 659, 14, 125, "Text",ExpressionUUID->"136eac25-851e-4354-a9cf-286b196d616d"],
Cell[14219, 457, 1149, 28, 209, "Text",ExpressionUUID->"876478c3-f0c1-46ea-8e45-5ff78d64ca9d"],
Cell[15371, 487, 101, 5, 65, "Text",ExpressionUUID->"66f9d8bd-2538-4d03-beb8-521cf5f57746"],
Cell[15475, 494, 533, 12, 65, "Text",ExpressionUUID->"2f0debd7-7f71-4c6b-ae8a-023a65d87b5d"]
}, Closed]],
Cell[CellGroupData[{
Cell[16045, 511, 175, 3, 28, "Subsubsection",ExpressionUUID->"da457a7d-6e0c-4bc4-b98d-f7b7e0a7bb4f"],
Cell[16223, 516, 240, 4, 52, "Text",ExpressionUUID->"bd94091e-50c5-4759-99f4-a765e399057b"],
Cell[16466, 522, 298, 7, 27, "Input",ExpressionUUID->"81ee6f5b-3f97-464b-8ae5-7d1619b8d7ec"],
Cell[16767, 531, 907, 16, 204, "Text",ExpressionUUID->"7046ef4c-c0ed-4ca0-bd80-28f3499a9f02"]
}, Closed]],
Cell[CellGroupData[{
Cell[17711, 552, 106, 0, 28, "Subsubsection",ExpressionUUID->"345f024f-84ff-4288-aaba-fde60a58d886"],
Cell[17820, 554, 177, 5, 33, "Text",ExpressionUUID->"f08259f4-9481-4f2a-bbba-d7544ce729ae"],
Cell[18000, 561, 282, 8, 52, "Text",ExpressionUUID->"7150fe72-99b6-4a0d-8045-c8a1d676d122"],
Cell[CellGroupData[{
Cell[18307, 573, 240, 5, 27, "Input",ExpressionUUID->"36ca5f5f-2e2f-42ea-a7b1-c5ce7fb205c2"],
Cell[18550, 580, 86, 0, 27, "Output",ExpressionUUID->"7c59333b-83b3-424d-ae43-11bc1e361d4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18673, 585, 274, 6, 27, "Input",ExpressionUUID->"58f1d76c-2cb8-4cd9-9e1d-cc2af58b5b46"],
Cell[18950, 593, 83, 0, 27, "Output",ExpressionUUID->"53e414d5-52a5-41a6-ada4-8889a0a4064d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19070, 598, 295, 7, 27, "Input",ExpressionUUID->"711c2c0b-0caf-4124-8804-71882f72558f"],
Cell[19368, 607, 108, 0, 43, "Output",ExpressionUUID->"6288e067-fa65-42c0-953f-31a553363877"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19513, 612, 395, 9, 27, "Input",ExpressionUUID->"cc31d225-49d3-4df4-ab20-9eb6976d3b9a"],
Cell[19911, 623, 131, 2, 27, "Output",ExpressionUUID->"10c41073-d93b-4b9d-9426-246a5ef3519a"]
}, Open  ]],
Cell[20057, 628, 456, 11, 71, "Text",ExpressionUUID->"734a0e78-cf5d-4772-b3c8-f8407d563d6c"],
Cell[20516, 641, 171, 3, 33, "Text",ExpressionUUID->"b7bbec51-bdf8-434c-9192-b977c5af011a"],
Cell[20690, 646, 275, 7, 27, "Input",ExpressionUUID->"3ab5a874-99fd-4590-bd1b-4ab3b010ff17"],
Cell[CellGroupData[{
Cell[20990, 657, 263, 6, 27, "Input",ExpressionUUID->"c1a146fa-3869-4d2c-8adc-0c9dcb389a1b"],
Cell[21256, 665, 183, 3, 27, "Output",ExpressionUUID->"e82c0064-a8a2-47d6-b060-e02319565559"]
}, Open  ]],
Cell[21454, 671, 292, 9, 33, "Text",ExpressionUUID->"f42d843f-4310-4ca4-b000-9eb98d173544"],
Cell[CellGroupData[{
Cell[21771, 684, 221, 5, 27, "Input",ExpressionUUID->"cb33366d-4abc-431b-bf2c-7e4e58ac043e"],
Cell[21995, 691, 274, 6, 39, "Message",ExpressionUUID->"422b3eb7-f37b-4879-bc9c-98e98ba3e0cf"],
Cell[22272, 699, 274, 6, 39, "Message",ExpressionUUID->"b29e6e4e-ed97-415b-900e-8ee3336ac6dc"],
Cell[22549, 707, 274, 6, 39, "Message",ExpressionUUID->"c5759ffa-2300-43d7-b25e-791fde416cda"],
Cell[22826, 715, 273, 6, 39, "Message",ExpressionUUID->"d92eefc6-9391-4f2a-aa22-2847b832e83b"],
Cell[23102, 723, 248, 6, 27, "Output",ExpressionUUID->"dda9423f-5aa9-4a36-862e-9a5f29097f06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[23387, 734, 269, 6, 27, "Input",ExpressionUUID->"f2bd5098-f6be-4cbd-8265-17db057b3336"],
Cell[23659, 742, 173, 2, 39, "Print",ExpressionUUID->"3a26cbc4-9785-4df3-94d9-bbd298f941af"],
Cell[23835, 746, 763, 22, 59, "Print",ExpressionUUID->"98471eb0-45ef-42a4-9792-ec629145d7e4"],
Cell[24601, 770, 195, 2, 39, "Print",ExpressionUUID->"b9158f38-5bcf-4cbe-bb26-d027add3b04a"],
Cell[24799, 774, 566, 15, 23, "Print",ExpressionUUID->"150bc301-588c-439d-932b-d4ed4b357885"]
}, Open  ]],
Cell[25380, 792, 986, 29, 219, "Text",ExpressionUUID->"54df2cb3-173f-40b1-b70e-79732acdc238"],
Cell[CellGroupData[{
Cell[26391, 825, 465, 11, 75, "Input",ExpressionUUID->"a33ba315-09af-4594-8642-ecb7a7079195"],
Cell[26859, 838, 137, 3, 27, "Output",ExpressionUUID->"6d284d30-afc1-46ba-bd38-ae1c74402157"]
}, Open  ]],
Cell[27011, 844, 459, 10, 71, "Text",ExpressionUUID->"7bc3ff62-d6d6-4e34-ab0d-c5ad17d998f8"],
Cell[27473, 856, 363, 8, 43, "Input",ExpressionUUID->"470467ab-228f-4bdd-bb1a-06a5f8439af0"],
Cell[CellGroupData[{
Cell[27861, 868, 112, 1, 27, "Input",ExpressionUUID->"98aa969b-3c13-4c0b-b584-4b8d07938732"],
Cell[27976, 871, 173, 2, 39, "Print",ExpressionUUID->"fc9b406a-8e21-4627-97df-de7973b08458"],
Cell[28152, 875, 763, 22, 59, "Print",ExpressionUUID->"5318ed22-bab9-4652-b0c3-048405f41cd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28952, 902, 211, 4, 27, "Input",ExpressionUUID->"aaddb259-50d0-43eb-8c23-03b47325f935"],
Cell[29166, 908, 811, 23, 75, "Output",ExpressionUUID->"9cfef1ef-8106-4f4d-94bc-12cab867554d"]
}, Open  ]],
Cell[29992, 934, 148, 2, 33, "Text",ExpressionUUID->"0d8fe710-f85f-4513-a68d-ebbd26fc3697"],
Cell[CellGroupData[{
Cell[30165, 940, 338, 8, 43, "Input",ExpressionUUID->"2517efa6-4326-45d8-a81d-f8c1028c81b0"],
Cell[30506, 950, 1858, 55, 189, "Output",ExpressionUUID->"c311e382-102c-4e21-b8d9-c1b6cbe6ab42"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[32413, 1011, 227, 5, 28, "Subsubsection",ExpressionUUID->"b31d52a9-8301-48ca-8b7e-a1463dbcfcc0"],
Cell[32643, 1018, 1183, 28, 207, "Text",ExpressionUUID->"ff6d4703-c2bb-458d-b4ea-784e0b3297fe"],
Cell[33829, 1048, 203, 5, 29, "Text",ExpressionUUID->"7c60d6f5-4a50-4c41-b1b3-feda8c1e9910"],
Cell[CellGroupData[{
Cell[34057, 1057, 298, 7, 26, "Input",ExpressionUUID->"a3d9e15a-a282-4e1a-b499-e42cf2afc323"],
Cell[34358, 1066, 86, 0, 25, "Output",ExpressionUUID->"d68778f3-7188-4cac-b173-73265ae15247"]
}, Open  ]],
Cell[34459, 1069, 254, 8, 29, "Text",ExpressionUUID->"b0e228a1-d9b3-462f-ba01-e0b78f96e327"],
Cell[CellGroupData[{
Cell[34738, 1081, 291, 7, 26, "Input",ExpressionUUID->"7c493b7c-af3d-4f24-87fb-097295294bb8"],
Cell[35032, 1090, 86, 0, 25, "Output",ExpressionUUID->"a7906af3-c3c1-4fc9-88cc-0b12c4c18d8a"]
}, Open  ]],
Cell[35133, 1093, 570, 13, 101, "Text",ExpressionUUID->"7aa53ab3-fbf4-4a14-bd97-f9fc9441a1c0"],
Cell[CellGroupData[{
Cell[35728, 1110, 221, 5, 26, "Input",ExpressionUUID->"d96e4300-12fa-4a43-b75d-01b1553db091"],
Cell[35952, 1117, 201, 5, 44, "Output",ExpressionUUID->"73171013-fc7f-4cae-96c1-8221f807de77"]
}, Open  ]],
Cell[36168, 1125, 284, 6, 47, "Text",ExpressionUUID->"5b38cf79-ac39-4cfc-8273-f924646cd33f"],
Cell[CellGroupData[{
Cell[36477, 1135, 198, 5, 26, "Input",ExpressionUUID->"a7d77ef8-05c5-49c0-af6b-33a463aaa697"],
Cell[36678, 1142, 195, 5, 28, "Output",ExpressionUUID->"7245c1e2-58ff-412a-91cd-1d708eeac2f6"]
}, Open  ]],
Cell[36888, 1150, 117, 0, 29, "Text",ExpressionUUID->"8a3d7202-e3da-4b08-9c48-e032cadea9a5"],
Cell[CellGroupData[{
Cell[37030, 1154, 213, 5, 26, "Input",ExpressionUUID->"8ac96c4e-0cd0-4efa-82c6-0ce517bf8296"],
Cell[37246, 1161, 199, 5, 26, "Output",ExpressionUUID->"224a6026-301a-40fd-bd2d-0e470a442a29"]
}, Open  ]],
Cell[37460, 1169, 208, 5, 29, "Text",ExpressionUUID->"a91b99b3-1639-4102-b88a-39ac3ad69cc0"],
Cell[37671, 1176, 685, 18, 155, "Text",ExpressionUUID->"f74026f2-0d7a-48d8-bc1e-8eabd2d74f40"],
Cell[38359, 1196, 415, 14, 52, "Text",ExpressionUUID->"66621435-b95d-4171-b5c3-39bdc48704ed"],
Cell[CellGroupData[{
Cell[38799, 1214, 190, 3, 27, "Input",ExpressionUUID->"28ca6e1e-e9b8-4435-8652-fabcb4450994"],
Cell[38992, 1219, 144, 3, 23, "Print",ExpressionUUID->"f11f29ff-451e-4071-ab32-71b393258a60"]
}, Open  ]],
Cell[39151, 1225, 229, 3, 52, "Text",ExpressionUUID->"395b336c-06d0-453b-b213-faa3e11c98f4"],
Cell[CellGroupData[{
Cell[39405, 1232, 435, 14, 27, "Input",ExpressionUUID->"620434c3-0b19-4505-a4f8-b4b60db2d0d5"],
Cell[39843, 1248, 93, 0, 27, "Output",ExpressionUUID->"4d827fe0-c0a7-473b-b034-14c70f831f05"]
}, Open  ]],
Cell[39951, 1251, 532, 15, 109, "Text",ExpressionUUID->"bdbeec7d-a948-41d8-a290-1443fe92df6b"],
Cell[40486, 1268, 394, 7, 71, "Text",ExpressionUUID->"231520c6-d01c-40e1-ad19-8e434da094fd"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[40929, 1281, 101, 0, 57, "Section",ExpressionUUID->"a04cba3f-84d9-4542-9b3f-fa0046854e02"],
Cell[CellGroupData[{
Cell[41055, 1285, 90, 0, 47, "Subsection",ExpressionUUID->"6054bafb-cc12-4c1c-8d35-623c944d2f4e"],
Cell[CellGroupData[{
Cell[41170, 1289, 152, 2, 42, "Subsubsection",ExpressionUUID->"b68b17d6-790c-46c7-84a7-ce129151e0ef"],
Cell[41325, 1293, 1478, 37, 295, "Text",ExpressionUUID->"f64ea6f1-083c-4661-ae5d-7aecbdc7c213"],
Cell[42806, 1332, 309, 9, 52, "Text",ExpressionUUID->"0d8875b3-5e71-43c6-afd7-26a08ad7e7e1"],
Cell[43118, 1343, 320, 8, 27, "Input",ExpressionUUID->"b4a32a5e-47ce-4cfc-bf0e-dcaa045ccd86"],
Cell[CellGroupData[{
Cell[43463, 1355, 363, 9, 27, "Input",ExpressionUUID->"4d5db8e5-8cd4-4578-911a-f1407874b851"],
Cell[43829, 1366, 149, 3, 27, "Output",ExpressionUUID->"475ca23c-6950-46fd-9e13-8b619c613a47"]
}, Open  ]],
Cell[43993, 1372, 351, 7, 71, "Text",ExpressionUUID->"2f99c7f2-9e93-4fa7-8ec8-2090716273dc"],
Cell[44347, 1381, 116, 0, 33, "Text",ExpressionUUID->"e24cd9fe-6f0e-4b43-9e48-5c1e751bf475"],
Cell[44466, 1383, 597, 14, 43, "Input",ExpressionUUID->"aee37c16-66ab-411a-81f2-57e7c7e1a320"],
Cell[45066, 1399, 909, 24, 238, "Text",ExpressionUUID->"ef4803e2-5575-4ee4-ac37-01dbf467a960"],
Cell[CellGroupData[{
Cell[46000, 1427, 1085, 25, 139, "Input",ExpressionUUID->"575112eb-b2f9-4590-98f4-5cd7404363ed"],
Cell[47088, 1454, 624, 19, 45, "Output",ExpressionUUID->"497bdb55-c438-4f9d-9c2e-fed65cbb6e74"]
}, Open  ]],
Cell[47727, 1476, 186, 3, 52, "Text",ExpressionUUID->"2d94cd4f-505f-4c8c-bbb0-e16e9bf6b575"],
Cell[CellGroupData[{
Cell[47938, 1483, 676, 16, 75, "Input",ExpressionUUID->"cec3d519-f01d-4675-bf00-a0669d493557"],
Cell[48617, 1501, 150, 3, 27, "Output",ExpressionUUID->"b092c57f-47e6-4532-83a9-0644cdd61909"]
}, Open  ]],
Cell[48782, 1507, 245, 6, 52, "Text",ExpressionUUID->"c8f1d3b0-e628-446a-b14a-17360f2d9400"],
Cell[CellGroupData[{
Cell[49052, 1517, 680, 16, 75, "Input",ExpressionUUID->"a27a3ea1-51ba-4932-b401-98c2d87d108b"],
Cell[49735, 1535, 188, 5, 27, "Output",ExpressionUUID->"fbadcaa4-2724-4db7-a4c5-f1a03851abf8"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[49972, 1546, 256, 4, 45, "Subsubsection",ExpressionUUID->"673ef000-0908-4f7f-a9f0-504e8ec21e0f"],
Cell[CellGroupData[{
Cell[50253, 1554, 663, 17, 75, "Input",ExpressionUUID->"671790c4-7195-4f2a-9d37-e4ee304104a4"],
Cell[50919, 1573, 359, 10, 29, "Output",ExpressionUUID->"7aeb534e-eee5-43e6-b7ed-d5fde835b737"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51315, 1588, 723, 18, 75, "Input",ExpressionUUID->"ed77f6bf-6e2f-4702-9f09-b35a357b7780"],
Cell[52041, 1608, 150, 3, 27, "Output",ExpressionUUID->"8448358d-cdf2-4329-928d-93aeefec1bd8"]
}, Open  ]],
Cell[52206, 1614, 552, 11, 71, "Text",ExpressionUUID->"672fee72-bd88-448f-92cc-2a9a4d2d1f23"],
Cell[52761, 1627, 156, 3, 27, "Input",ExpressionUUID->"260bd783-4c8d-4440-92e0-eb24d6605182"],
Cell[CellGroupData[{
Cell[52942, 1634, 163, 3, 27, "Input",ExpressionUUID->"47f78c76-6199-4704-b056-70d7dbfccc98"],
Cell[53108, 1639, 407, 13, 27, "Output",ExpressionUUID->"972fce68-4dfa-4371-b1d3-18b7cef75984"]
}, Open  ]],
Cell[53530, 1655, 359, 11, 52, "Text",ExpressionUUID->"636090fb-32e9-4f72-bb64-2e6d782337c1"],
Cell[CellGroupData[{
Cell[53914, 1670, 203, 4, 27, "Input",ExpressionUUID->"b23c1c75-88ad-456f-9304-3a4bf2b82998"],
Cell[54120, 1676, 449, 14, 27, "Output",ExpressionUUID->"dde092c1-e9ee-4f02-a860-f268664bfc8b"]
}, Open  ]],
Cell[54584, 1693, 309, 8, 33, "Text",ExpressionUUID->"f57a638f-53c9-4569-887d-c29156d7250b"],
Cell[CellGroupData[{
Cell[54918, 1705, 376, 8, 75, "Input",ExpressionUUID->"3f7f96a9-b2ac-48b3-b9f1-5be7148e1377"],
Cell[55297, 1715, 324, 9, 29, "Output",ExpressionUUID->"736969d1-f8de-49d8-bc33-5c487146d6e2"]
}, Open  ]],
Cell[55636, 1727, 205, 5, 33, "Text",ExpressionUUID->"d39b6919-70d1-4e1d-aaa4-5929100f38b5"],
Cell[CellGroupData[{
Cell[55866, 1736, 428, 10, 59, "Input",ExpressionUUID->"b401bbae-255d-460e-998e-f8e039523380"],
Cell[56297, 1748, 694, 14, 43, "Output",ExpressionUUID->"1c78afe2-fe10-42ff-91b0-f2281d83e9c3"]
}, Open  ]],
Cell[57006, 1765, 275, 5, 52, "Text",ExpressionUUID->"34daebf3-a73a-4297-9e11-e2f6b3d00989"],
Cell[CellGroupData[{
Cell[57306, 1774, 119, 1, 27, "Input",ExpressionUUID->"f1c598f3-e4e2-4e45-9a92-97414bebbf95"],
Cell[57428, 1777, 290, 9, 29, "Output",ExpressionUUID->"e2ef4a8a-ba7b-4fbc-a870-0b5f2e938be2"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[57767, 1792, 164, 2, 28, "Subsubsection",ExpressionUUID->"737bff85-7904-4837-8cb7-06413610d897"],
Cell[57934, 1796, 343, 9, 52, "Text",ExpressionUUID->"b9059ae7-2005-4f0a-baf4-568f2a1c1aeb"],
Cell[CellGroupData[{
Cell[58302, 1809, 582, 15, 59, "Input",ExpressionUUID->"9309891b-670c-4bad-a508-05a7c076d390"],
Cell[58887, 1826, 183, 6, 29, "Output",ExpressionUUID->"6aa08da5-a3af-4c1e-9bf6-dcfbd1bbb9db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59107, 1837, 505, 14, 43, "Input",ExpressionUUID->"a40866d9-8c45-4c4c-9fb1-1276e5eff12e"],
Cell[59615, 1853, 183, 6, 29, "Output",ExpressionUUID->"b5b8e35a-ec52-4bcd-9460-7680076fa558"]
}, Open  ]],
Cell[59813, 1862, 1622, 49, 350, "Text",ExpressionUUID->"c96826e5-6848-4859-96f4-1797d881b923"],
Cell[CellGroupData[{
Cell[61460, 1915, 776, 22, 91, "Input",ExpressionUUID->"4dea7681-f660-4187-ab14-1fc2adee5bf4"],
Cell[62239, 1939, 182, 6, 29, "Output",ExpressionUUID->"a03c99e3-ee39-4dd3-8b18-02777c6c22bb"]
}, Open  ]],
Cell[62436, 1948, 335, 9, 52, "Text",ExpressionUUID->"5856d893-35f1-446a-b2e4-da1f795a7225"],
Cell[62774, 1959, 80, 3, 52, "Text",ExpressionUUID->"acb91725-3f43-4b80-b279-0332403ee987"],
Cell[62857, 1964, 282, 6, 52, "Text",ExpressionUUID->"03525342-4e60-484a-8993-1dd845bdf81d"],
Cell[CellGroupData[{
Cell[63164, 1974, 692, 20, 91, "Input",ExpressionUUID->"1f81685d-7921-42a1-a79e-0b59d67910c9"],
Cell[63859, 1996, 128, 2, 27, "Output",ExpressionUUID->"fe54af95-a58a-4263-80ab-a076b1d56312"]
}, Open  ]],
Cell[64002, 2001, 445, 6, 90, "Text",ExpressionUUID->"d7c6bcd5-46d6-48bd-82b0-1e89662a3eb8"],
Cell[64450, 2009, 80, 3, 52, "Text",ExpressionUUID->"a4b0c6b8-d812-455d-ac72-949d849897cf"],
Cell[64533, 2014, 2633, 87, 337, "Text",ExpressionUUID->"2cf24acc-568e-4313-81c7-1ae98aa318e5"],
Cell[CellGroupData[{
Cell[67191, 2105, 734, 21, 155, "Input",ExpressionUUID->"07470e79-05fd-4872-ba33-87b20906d2a0"],
Cell[67928, 2128, 109, 1, 23, "Print",ExpressionUUID->"f4ed4dad-9857-4cc6-a432-a40e20e36a36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68074, 2134, 227, 6, 27, "Input",ExpressionUUID->"b8368dd7-5fa5-408e-8f24-3070f9944730"],
Cell[68304, 2142, 83, 0, 27, "Output",ExpressionUUID->"39469507-d6d2-45cc-a83e-47f1e7a7a0e3"],
Cell[68390, 2144, 109, 1, 23, "Print",ExpressionUUID->"f11c75cd-0be5-42d1-a7a1-8629d7422d7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[68536, 2150, 202, 5, 27, "Input",ExpressionUUID->"482d5fed-f5a7-4a92-b390-86124494b24e"],
Cell[68741, 2157, 83, 0, 27, "Output",ExpressionUUID->"c3fc671e-98f5-4f4e-8fad-d3d273f20c0a"],
Cell[68827, 2159, 109, 1, 23, "Print",ExpressionUUID->"07371c0b-d76e-4a37-84d0-f015194ff7ca"]
}, Open  ]],
Cell[68951, 2163, 157, 3, 27, "Input",ExpressionUUID->"8502158c-f81b-46c1-8f84-68cd1a951d04"],
Cell[CellGroupData[{
Cell[69133, 2170, 433, 11, 59, "Input",ExpressionUUID->"5c89108d-2973-421c-9f9d-bd7dbf4fa16e"],
Cell[69569, 2183, 83, 0, 27, "Output",ExpressionUUID->"db764dcc-d17c-47c1-87a5-6e2a7d5a08b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69689, 2188, 104, 1, 27, "Input",ExpressionUUID->"a11c7d1d-ebaf-47ba-b302-2a5bb28552a5"],
Cell[69796, 2191, 97, 0, 23, "Print",ExpressionUUID->"ccc2c99a-822d-4ba1-b994-7c28c80322da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[69930, 2196, 343, 9, 27, "Input",ExpressionUUID->"085fca0f-32ba-4d61-93cd-d144f6e0f1a3"],
Cell[70276, 2207, 239, 9, 27, "Output",ExpressionUUID->"73bd6bec-b5ba-4559-a019-61247e52fa75"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[70564, 2222, 161, 2, 28, "Subsubsection",ExpressionUUID->"90d337a1-af5d-4754-ad73-bac774f5a698"],
Cell[70728, 2226, 1948, 36, 639, "Text",ExpressionUUID->"7c698f05-bb95-4755-b9c7-90241a474ede"],
Cell[72679, 2264, 275, 7, 27, "Input",ExpressionUUID->"25bec8d3-4591-4eab-81ba-8d57796eccce"],
Cell[72957, 2273, 158, 3, 33, "Text",ExpressionUUID->"973923ea-1897-4181-8aa4-5c4b7822a3b7"],
Cell[CellGroupData[{
Cell[73140, 2280, 574, 17, 27, "Input",ExpressionUUID->"b068fbcc-3469-46eb-bc56-45b2632b238c"],
Cell[73717, 2299, 388, 12, 27, "Output",ExpressionUUID->"26ffb4e0-8aef-43c1-bbf1-15c89a2276f4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74142, 2316, 359, 9, 27, "Input",ExpressionUUID->"bd881e92-2ec4-44f1-85b6-a0c24eabd75d"],
Cell[74504, 2327, 148, 3, 27, "Output",ExpressionUUID->"d508ddc5-dddd-4215-b5b8-c843edb5a592"]
}, Open  ]],
Cell[CellGroupData[{
Cell[74689, 2335, 350, 8, 27, "Input",ExpressionUUID->"e67ff924-2312-467a-aef6-ec434801c83e"],
Cell[75042, 2345, 172, 4, 27, "Output",ExpressionUUID->"c0373494-45e0-44a5-a9c4-925ef55fc35c"]
}, Open  ]],
Cell[75229, 2352, 437, 6, 90, "Text",ExpressionUUID->"12625c6c-094e-4556-81af-fe424a534306"],
Cell[CellGroupData[{
Cell[75691, 2362, 697, 17, 59, "Input",ExpressionUUID->"2116f8b5-ee57-4061-b40a-5e7fa1c254cd"],
Cell[76391, 2381, 671, 20, 43, "Output",ExpressionUUID->"081337d3-a8f0-4aa0-82e6-c2ed2c783e33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77099, 2406, 119, 1, 27, "Input",ExpressionUUID->"7a85e18e-82bd-4f61-8181-d75c23f1c2c9"],
Cell[77221, 2409, 83, 0, 27, "Output",ExpressionUUID->"f8cd8215-14e7-438f-93cb-0d5b0f6ba1c6"]
}, Open  ]],
Cell[77319, 2412, 182, 3, 33, "Text",ExpressionUUID->"2a1aa000-cbaa-4716-bbe0-d3c1a4b539a5"],
Cell[CellGroupData[{
Cell[77526, 2419, 501, 13, 27, "Input",ExpressionUUID->"39d6de43-c121-4907-a80b-7dd73662e030"],
Cell[78030, 2434, 259, 6, 23, "Message",ExpressionUUID->"7c339177-34f3-460d-935b-d4b00e34fd5b"],
Cell[78292, 2442, 471, 14, 43, "Output",ExpressionUUID->"2adffc63-be57-4428-a552-b67cb027e4f1"]
}, Open  ]],
Cell[78778, 2459, 115, 0, 33, "Text",ExpressionUUID->"48bfe184-46ea-4516-9e06-7d0d7a713f23"],
Cell[78896, 2461, 2086, 55, 267, "Input",ExpressionUUID->"d2b7b0c4-f152-47f5-95bd-a57d70b50609"],
Cell[80985, 2518, 165, 3, 33, "Text",ExpressionUUID->"8bd3bdb8-12b3-4553-b77f-3ec5966b89bb"],
Cell[CellGroupData[{
Cell[81175, 2525, 353, 9, 27, "Input",ExpressionUUID->"39e1efed-1fc3-4c7c-af64-dd04b1b6c579"],
Cell[81531, 2536, 149, 3, 27, "Output",ExpressionUUID->"d3e7524c-6ffd-41d2-aade-0033f40b72b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[81717, 2544, 1063, 40, 27, "Input",ExpressionUUID->"76cdf1d5-96a8-46c6-b757-b05c3389ac76"],
Cell[82783, 2586, 83, 0, 27, "Output",ExpressionUUID->"af4e6dc5-d07c-4a48-9c92-384046cec0ad"]
}, Open  ]],
Cell[82881, 2589, 186, 3, 27, "Input",ExpressionUUID->"e440340a-dc2e-412c-8062-727edbfd7092"]
}, Closed]],
Cell[CellGroupData[{
Cell[83104, 2597, 114, 0, 28, "Subsubsection",ExpressionUUID->"4fea30fb-2461-4bfc-9687-dde1e97eb100"],
Cell[83221, 2599, 300, 4, 71, "Text",ExpressionUUID->"0ec0958a-8a52-41af-af37-9c90d7ac8789"],
Cell[83524, 2605, 289, 8, 52, "Text",ExpressionUUID->"68e9338b-b044-4d8f-b807-acac185fd5a1"],
Cell[CellGroupData[{
Cell[83838, 2617, 231, 6, 27, "Input",ExpressionUUID->"50164a2e-683c-4b06-939d-3351fec65ee2"],
Cell[84072, 2625, 139, 3, 27, "Output",ExpressionUUID->"4bbd3570-cd55-4824-945c-4ed28f28486c"]
}, Open  ]],
Cell[84226, 2631, 88, 0, 33, "Text",ExpressionUUID->"7db13a79-bb06-4194-a70d-d30d07af4fe4"],
Cell[CellGroupData[{
Cell[84339, 2635, 371, 10, 27, "Input",ExpressionUUID->"b307d96d-cc90-472b-966b-97256ee58bce"],
Cell[84713, 2647, 305, 8, 44, "Output",ExpressionUUID->"110289ad-a490-429a-9b81-928b9a8602e4"]
}, Open  ]],
Cell[85033, 2658, 217, 5, 33, "Text",ExpressionUUID->"953b0f76-f9cb-4691-9844-bcbcaa291840"],
Cell[CellGroupData[{
Cell[85275, 2667, 364, 9, 27, "Input",ExpressionUUID->"a3c6b543-7b30-49fe-a6f5-f85b9106356f"],
Cell[85642, 2678, 295, 8, 44, "Output",ExpressionUUID->"b5f8ff20-0a4f-44f9-a7cb-d5999e2429c4"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[85986, 2692, 180, 3, 28, "Subsubsection",ExpressionUUID->"55464ecf-6d46-490e-8cac-45843ccf4b41"],
Cell[86169, 2697, 472, 7, 90, "Text",ExpressionUUID->"2c07a196-d98a-49cd-823f-b09494c93c26"],
Cell[CellGroupData[{
Cell[86666, 2708, 481, 12, 43, "Input",ExpressionUUID->"6a314458-0aae-4ba4-acf2-9bf80e9fbe15"],
Cell[87150, 2722, 611, 29, 27, "Output",ExpressionUUID->"5e3f7b68-0269-4abb-932e-3c627ac2b69a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87798, 2756, 192, 4, 27, "Input",ExpressionUUID->"b84f9873-7f61-4090-9ba4-3ac544156f2b"],
Cell[87993, 2762, 535, 25, 27, "Output",ExpressionUUID->"87f890cf-da7c-4e3b-86e3-c212f8017193"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88565, 2792, 235, 5, 27, "Input",ExpressionUUID->"c624b493-3afb-4106-bf5d-d3f36b62e115"],
Cell[88803, 2799, 534, 25, 27, "Output",ExpressionUUID->"41ed1f46-e19e-4109-b6d5-9fa71f25fc3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89374, 2829, 119, 1, 27, "Input",ExpressionUUID->"76be655d-d592-4d44-9fe1-4bb446768837"],
Cell[89496, 2832, 84, 0, 27, "Output",ExpressionUUID->"395d475f-c60d-4bda-b6d9-525ca7f42e35"]
}, Open  ]],
Cell[89595, 2835, 409, 6, 90, "Text",ExpressionUUID->"3e0100ff-12a7-4fd1-ab3c-554c774a169f"],
Cell[90007, 2843, 1200, 31, 155, "Input",ExpressionUUID->"b96e15f4-86e2-4654-9517-a821d8872c91"],
Cell[CellGroupData[{
Cell[91232, 2878, 486, 12, 43, "Input",ExpressionUUID->"b9b2d69b-2119-4d6d-a78f-7c9f86ffb65a"],
Cell[91721, 2892, 825, 39, 32, "Output",ExpressionUUID->"65024c15-0158-4a0c-8c69-dffe9588eb00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92583, 2936, 197, 4, 27, "Input",ExpressionUUID->"f6174c39-e07e-4889-9685-456b608265d9"],
Cell[92783, 2942, 728, 34, 32, "Output",ExpressionUUID->"707676f6-1eb3-4fb7-8d71-747b1857a6eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93548, 2981, 245, 5, 27, "Input",ExpressionUUID->"ee9eb726-ca78-477f-8218-edcba68f60e6"],
Cell[93796, 2988, 727, 34, 32, "Output",ExpressionUUID->"0412bf0b-ac5a-4445-b947-a1b16ea88ce1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94560, 3027, 272, 6, 27, "Input",ExpressionUUID->"197de956-af9c-4691-b8a8-c4973062356f"],
Cell[94835, 3035, 84, 0, 27, "Output",ExpressionUUID->"aa364313-8ad4-48d3-ace9-5d31efbef179"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[94968, 3041, 131, 0, 28, "Subsubsection",ExpressionUUID->"9268360e-54cd-44d2-b8b3-1f23b355d0e7"],
Cell[95102, 3043, 412, 8, 71, "Text",ExpressionUUID->"fc1e2c11-4596-4a79-a276-cfc4ae15bc61"],
Cell[CellGroupData[{
Cell[95539, 3055, 488, 12, 43, "Input",ExpressionUUID->"021f01dc-c6b9-4b50-8d45-7abd6e4f06fd"],
Cell[96030, 3069, 331, 9, 27, "Output",ExpressionUUID->"2157f76f-1b7c-467f-8359-b9ff74ca9093"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96398, 3083, 158, 3, 27, "Input",ExpressionUUID->"80da0330-eaf7-4aed-87e4-e3ab76ba7e53"],
Cell[96559, 3088, 281, 7, 27, "Output",ExpressionUUID->"751b2cfb-2df3-4d00-9d0d-9f1f7a5a8305"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96877, 3100, 167, 3, 27, "Input",ExpressionUUID->"b6e12b43-8a00-406d-8fff-ac71bbb33df8"],
Cell[97047, 3105, 280, 7, 27, "Output",ExpressionUUID->"ee7ab15b-d280-40e2-9bcb-8a460aeae079"]
}, Open  ]],
Cell[CellGroupData[{
Cell[97364, 3117, 269, 6, 27, "Input",ExpressionUUID->"d9b679ac-4479-49e6-8378-91384f71f00c"],
Cell[97636, 3125, 84, 0, 27, "Output",ExpressionUUID->"feff3264-27ce-4e78-af0f-e81e705074f8"]
}, Open  ]],
Cell[97735, 3128, 359, 5, 71, "Text",ExpressionUUID->"d21101f4-ca30-4d96-a408-d7273eb7278f"],
Cell[98097, 3135, 507, 15, 106, "Text",ExpressionUUID->"90b9709b-c7ca-4c81-8ab7-4b0fc322f926"],
Cell[CellGroupData[{
Cell[98629, 3154, 1212, 29, 123, "Input",ExpressionUUID->"00754b24-6ea3-4ec0-9206-e6dd424add47"],
Cell[99844, 3185, 84, 0, 27, "Output",ExpressionUUID->"aec2140a-bda6-482a-aade-c175efdee550"]
}, Open  ]],
Cell[99943, 3188, 80, 3, 52, "Text",ExpressionUUID->"a1303df7-70f3-4fe8-b822-9ad7610a115f"],
Cell[100026, 3193, 1224, 32, 185, "Text",ExpressionUUID->"5ba313a2-cf4a-4f24-9b4c-151d8b82511b"],
Cell[101253, 3227, 2110, 53, 200, "Input",ExpressionUUID->"a7a5d0a7-6f25-4bcd-977c-7315353eb9de"],
Cell[CellGroupData[{
Cell[103388, 3284, 956, 24, 120, "Input",ExpressionUUID->"13940c9d-bce6-4483-aea8-7daa11febf89"],
Cell[104347, 3310, 84, 0, 40, "Output",ExpressionUUID->"c52375d9-52c1-40b6-8ffa-de3658772777"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[104480, 3316, 155, 2, 28, "Subsubsection",ExpressionUUID->"0abdacc8-4bac-479b-9a05-f2245ae03067"],
Cell[104638, 3320, 588, 12, 128, "Text",ExpressionUUID->"30ada782-5f09-483f-be04-728f1fa10cb8"],
Cell[105229, 3334, 100, 0, 33, "Text",ExpressionUUID->"bf380607-1ba3-4f10-a453-ceb39d4795cc"],
Cell[105332, 3336, 143, 3, 27, "Input",ExpressionUUID->"3cec13df-785c-4c63-ae9b-b69f9eb1feb7"],
Cell[CellGroupData[{
Cell[105500, 3343, 233, 6, 27, "Input",ExpressionUUID->"afa9ba30-31a7-44a0-bb03-a7a26e6259f7"],
Cell[105736, 3351, 201, 6, 44, "Output",ExpressionUUID->"98c0cc36-8b97-48aa-81a8-0b7ff95a7064"]
}, Open  ]],
Cell[105952, 3360, 228, 3, 52, "Text",ExpressionUUID->"0a0f1bc7-92be-4546-af99-c65c9845782e"],
Cell[106183, 3365, 343, 10, 27, "Input",ExpressionUUID->"20710b93-d460-4871-bfc9-99d76b6cb1e0"],
Cell[CellGroupData[{
Cell[106551, 3379, 367, 10, 31, "Input",ExpressionUUID->"0f3d9439-1322-4be7-8b37-70d36e1fbe87"],
Cell[106921, 3391, 376, 12, 46, "Output",ExpressionUUID->"32872074-e800-43ca-beae-766a2951950e"]
}, Open  ]],
Cell[107312, 3406, 227, 5, 33, "Text",ExpressionUUID->"e44e72c5-2eab-421c-af34-cf65252f02b8"],
Cell[CellGroupData[{
Cell[107564, 3415, 642, 16, 91, "Input",ExpressionUUID->"baac8e4e-6e2c-42bf-9380-9f446250308d"],
Cell[108209, 3433, 376, 12, 46, "Output",ExpressionUUID->"c56ccb3d-519f-4f5e-9e36-218e2e34af47"]
}, Open  ]],
Cell[108600, 3448, 268, 6, 52, "Text",ExpressionUUID->"52c8dda9-2c33-4a8f-a732-899622d2d5e8"],
Cell[CellGroupData[{
Cell[108893, 3458, 760, 19, 107, "Input",ExpressionUUID->"fe86e4ec-43c3-4b6c-abf9-2e66a85998a9"],
Cell[109656, 3479, 547, 15, 25, "Print",ExpressionUUID->"9f27ceb6-cd98-41ab-98d6-7d9f6f086054"],
Cell[110206, 3496, 376, 12, 46, "Output",ExpressionUUID->"049e3709-6295-4455-9d45-f33f70e66be8"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[110643, 3515, 110, 0, 47, "Subsection",ExpressionUUID->"2739c6df-4e90-4f62-9bc2-b6dc00a31e19"],
Cell[CellGroupData[{
Cell[110778, 3519, 213, 3, 59, "Subsubsection",ExpressionUUID->"e1574946-32c5-4db6-a192-da4efca056f9"],
Cell[110994, 3524, 768, 20, 147, "Text",ExpressionUUID->"a6503062-63fb-4fcc-827e-fa4217beaff7"],
Cell[CellGroupData[{
Cell[111787, 3548, 335, 9, 43, "Input",ExpressionUUID->"22973568-d4c1-41de-9d8a-307e993e57fe"],
Cell[112125, 3559, 390, 15, 40, "Output",ExpressionUUID->"682d4b93-8b43-43dd-98ef-a4ec4eb3e8af"]
}, Open  ]],
Cell[CellGroupData[{
Cell[112552, 3579, 387, 10, 43, "Input",ExpressionUUID->"dde0c2a0-1c84-44f5-9570-137ce60d33d3"],
Cell[112942, 3591, 648, 24, 34, "Output",ExpressionUUID->"46c4bf6b-6262-4d7d-b761-25c119275bb1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113627, 3620, 630, 15, 91, "Input",ExpressionUUID->"6936f1de-0b06-4f40-a79a-2dbcb3f0e240"],
Cell[114260, 3637, 374, 14, 40, "Output",ExpressionUUID->"f98134ec-5a02-43d7-87e9-7108d98e46bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114671, 3656, 160, 3, 27, "Input",ExpressionUUID->"ccd0888a-43d8-4720-aec8-dde78f98ea18"],
Cell[114834, 3661, 87, 0, 27, "Output",ExpressionUUID->"d115db7b-065c-46ed-af8c-75ca51aa473c"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[114970, 3667, 175, 3, 28, "Subsubsection",ExpressionUUID->"b1328295-e5c1-4205-87fc-d3ddc2b7df41"],
Cell[115148, 3672, 560, 12, 128, "Text",ExpressionUUID->"fe81cd8a-34f9-418e-b9f0-c383cc0176f3"],
Cell[115711, 3686, 425, 11, 59, "Input",ExpressionUUID->"99ae6ce8-39f2-4102-9091-d92f454d4772"],
Cell[116139, 3699, 157, 2, 33, "Text",ExpressionUUID->"15e0a0ef-a3df-4a6c-80b7-509a923eedb4"],
Cell[CellGroupData[{
Cell[116321, 3705, 153, 3, 27, "Input",ExpressionUUID->"56a1b20d-98b8-4ec4-88ad-d6c859af61f9"],
Cell[116477, 3710, 379, 13, 27, "Output",ExpressionUUID->"c2a786e1-4a9a-4a29-863e-0c9fce80f691"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116893, 3728, 143, 3, 27, "Input",ExpressionUUID->"97337969-ef71-4b0a-8d6a-da5ac86cf94d"],
Cell[117039, 3733, 380, 13, 27, "Output",ExpressionUUID->"48748c21-5d27-4119-8c24-e7b74ae55bb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117456, 3751, 177, 4, 27, "Input",ExpressionUUID->"6ae8342f-9038-43a2-b2e0-ddf823800ed6"],
Cell[117636, 3757, 460, 15, 27, "Output",ExpressionUUID->"dc884104-aa3b-43e5-8630-4cdddc0b3329"]
}, Open  ]],
Cell[118111, 3775, 295, 9, 52, "Text",ExpressionUUID->"3b7ff5cd-2797-4db9-92f6-c2439968d4a5"]
}, Closed]],
Cell[CellGroupData[{
Cell[118443, 3789, 137, 1, 28, "Subsubsection",ExpressionUUID->"9c689c08-64fd-4ac0-88fd-42bbd33506b9"],
Cell[118583, 3792, 473, 10, 71, "Text",ExpressionUUID->"d2e947df-985a-4d99-8602-79ba153bd98a"],
Cell[CellGroupData[{
Cell[119081, 3806, 372, 10, 27, "Input",ExpressionUUID->"0252985e-250a-4eb3-a1bc-36be52ad7116"],
Cell[119456, 3818, 214, 6, 27, "Output",ExpressionUUID->"a3feec6b-d65e-4012-8448-7062428cfa15"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119707, 3829, 437, 12, 27, "Input",ExpressionUUID->"85da29f6-f269-48dd-862f-19ef95a0b735"],
Cell[120147, 3843, 274, 8, 27, "Output",ExpressionUUID->"790a1bf8-261e-4256-988f-c67eec6d070b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[120458, 3856, 413, 12, 27, "Input",ExpressionUUID->"5d942ff7-3d1a-4225-a1eb-52f953d4bc84"],
Cell[120874, 3870, 237, 7, 27, "Output",ExpressionUUID->"b9fecd20-5000-437f-9d01-5cb1606cd879"]
}, Open  ]],
Cell[121126, 3880, 275, 6, 52, "Text",ExpressionUUID->"209df422-a624-4f02-9efd-e9e5ad008ca6"],
Cell[CellGroupData[{
Cell[121426, 3890, 435, 12, 27, "Input",ExpressionUUID->"fa2582c0-fac9-42b1-a6e9-e1bfd619cfae"],
Cell[121864, 3904, 268, 8, 27, "Output",ExpressionUUID->"63e09e4c-4129-4c12-8013-55b8e8690175"]
}, Open  ]],
Cell[122147, 3915, 150, 2, 33, "Text",ExpressionUUID->"0f3fd98c-9678-4e9c-a8ac-7b20d64cb760"],
Cell[CellGroupData[{
Cell[122322, 3921, 435, 12, 27, "Input",ExpressionUUID->"edbf3f6c-bb69-4e08-998b-d2470f681bc9"],
Cell[122760, 3935, 264, 8, 27, "Output",ExpressionUUID->"71995843-7e1d-4b7c-8903-a87ad73a63e6"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[123097, 3951, 104, 0, 57, "Section",ExpressionUUID->"7870c115-eedf-4773-8f8b-a1ebef880aea"],
Cell[CellGroupData[{
Cell[123226, 3955, 169, 3, 47, "Subsection",ExpressionUUID->"1fd14a81-e5c1-45b6-8a13-3148f3ea8c59"],
Cell[CellGroupData[{
Cell[123420, 3962, 87, 0, 42, "Subsubsection",ExpressionUUID->"83c9e7e2-ece8-4a01-aa33-c2118abe77f3"],
Cell[123510, 3964, 153, 5, 33, "Text",ExpressionUUID->"c2602c1a-35dc-4cd4-a0b8-25d32c4b29a9"],
Cell[123666, 3971, 908, 24, 155, "Input",ExpressionUUID->"61beb190-c003-4fb2-8fcf-12e99ec2fbc2"],
Cell[CellGroupData[{
Cell[124599, 3999, 623, 16, 27, "Input",ExpressionUUID->"e72cd6e0-10aa-40de-b5e2-d5e53d93e6af"],
Cell[125225, 4017, 456, 13, 27, "Output",ExpressionUUID->"3dde21c3-32d7-4363-a9d0-77ce19a7fe21"]
}, Open  ]],
Cell[125696, 4033, 195, 3, 52, "Text",ExpressionUUID->"fbbe9341-b9e9-4b8e-ae96-45837410cb0a"],
Cell[125894, 4038, 1005, 29, 171, "Input",ExpressionUUID->"08cfe30a-193c-4883-a0f5-3a3dbc6ae3c8"],
Cell[CellGroupData[{
Cell[126924, 4071, 409, 11, 27, "Input",ExpressionUUID->"0b024a58-a208-4a62-9709-0c5ab5cfda93"],
Cell[127336, 4084, 202, 4, 27, "Output",ExpressionUUID->"21e2abc0-c57b-4418-951a-6d5411ff1172"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127575, 4093, 109, 1, 27, "Input",ExpressionUUID->"1cda8eff-159f-441b-8891-88e8543fa614"],
Cell[127687, 4096, 83, 0, 27, "Output",ExpressionUUID->"b1e714ce-74fc-474a-9002-d077b2d010e5"]
}, Open  ]],
Cell[127785, 4099, 317, 8, 52, "Text",ExpressionUUID->"f9393a12-059e-47ca-8345-3c14cde81f89"],
Cell[128105, 4109, 604, 17, 123, "Input",ExpressionUUID->"e7cd04da-4e73-423d-8446-d574ecabf018"],
Cell[CellGroupData[{
Cell[128734, 4130, 409, 11, 27, "Input",ExpressionUUID->"17264fc8-7362-40b3-b74c-cb3a82109ddd"],
Cell[129146, 4143, 228, 5, 23, "Message",ExpressionUUID->"6ab3b00c-743e-424b-b51b-de6f61056d16"],
Cell[129377, 4150, 236, 6, 27, "Output",ExpressionUUID->"3ace586c-a23d-44a6-81b1-9ada80bb9235"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129650, 4161, 109, 1, 27, "Input",ExpressionUUID->"3bb9859d-6dbe-4099-8a42-73a191c7d580"],
Cell[129762, 4164, 228, 5, 23, "Message",ExpressionUUID->"945bd263-f966-488c-b33c-1a7a5836774c"],
Cell[129993, 4171, 143, 3, 27, "Output",ExpressionUUID->"e9d95143-11d9-43e9-a216-2b59df4dfa92"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[130185, 4180, 86, 0, 28, "Subsubsection",ExpressionUUID->"c52425d6-536b-4094-9778-1b717057e2b4"],
Cell[130274, 4182, 261, 4, 52, "Text",ExpressionUUID->"20834520-3a00-4815-aba5-13688d7d43db"],
Cell[130538, 4188, 271, 6, 27, "Input",ExpressionUUID->"e8212e22-bb63-4acd-863f-02a4b0f0032d"],
Cell[130812, 4196, 348, 9, 27, "Input",ExpressionUUID->"ff26ebfc-e812-482d-aabd-7de29d607c65"],
Cell[131163, 4207, 375, 11, 52, "Text",ExpressionUUID->"86541bf7-99c5-42c2-8738-2cd7db798726"],
Cell[131541, 4220, 281, 7, 27, "Input",ExpressionUUID->"bd8c6b56-edc5-4046-9786-1343e286f0d0"],
Cell[131825, 4229, 323, 7, 52, "Text",ExpressionUUID->"a3537d8f-b120-4036-918f-d2c966bf93a9"],
Cell[132151, 4238, 432, 11, 27, "Input",ExpressionUUID->"32dc3fc9-d1e0-4bc6-87d0-057467e60792"],
Cell[132586, 4251, 509, 14, 27, "Input",ExpressionUUID->"aa22e646-e0a5-4347-9663-4ada1f7864bf"],
Cell[133098, 4267, 180, 5, 33, "Text",ExpressionUUID->"219662e8-b983-4299-af47-f132cd0f6268"],
Cell[133281, 4274, 361, 10, 27, "Input",ExpressionUUID->"39c3d40c-8a11-4ec1-9693-5ac9f52d5d8f"],
Cell[133645, 4286, 129, 0, 33, "Text",ExpressionUUID->"c07e69bb-76c3-4427-a1c7-208c0114ba06"],
Cell[133777, 4288, 442, 12, 145, "Program",ExpressionUUID->"9b296688-dae2-4716-8061-7975da354c4e"],
Cell[134222, 4302, 296, 8, 52, "Text",ExpressionUUID->"e593b8cf-0420-47e1-bbff-4e2fb04efae4"],
Cell[134521, 4312, 425, 9, 91, "Input",ExpressionUUID->"9baa0e57-6a41-4820-80bd-5f094917f048"],
Cell[134949, 4323, 423, 11, 71, "Text",ExpressionUUID->"b7a641b4-d33c-4dd5-80b6-cb539e812fc6"],
Cell[135375, 4336, 607, 17, 43, "Input",ExpressionUUID->"4c215a26-6170-4895-ae15-781ee3a2ac72"],
Cell[135985, 4355, 362, 11, 52, "Text",ExpressionUUID->"f943d373-61fe-414d-9a8a-c71656e5e6b4"],
Cell[136350, 4368, 487, 13, 43, "Input",ExpressionUUID->"1478496e-47e4-46ad-8c0f-29a949ad0a8b"],
Cell[136840, 4383, 536, 14, 75, "Input",ExpressionUUID->"f3b4a474-a625-4876-9afd-f2daec41295d"],
Cell[137379, 4399, 251, 8, 33, "Text",ExpressionUUID->"bff970cd-3a2d-421e-b7f3-2c9235711473"]
}, Closed]],
Cell[CellGroupData[{
Cell[137667, 4412, 141, 1, 28, "Subsubsection",ExpressionUUID->"27097c5a-7398-4f6c-a37a-bf40de3d7002"],
Cell[137811, 4415, 482, 12, 71, "Text",ExpressionUUID->"3c300eb3-cbca-4c27-a541-148444185352"],
Cell[138296, 4429, 447, 10, 71, "Text",ExpressionUUID->"1db7da12-f86a-49b5-b7ba-e2e6ff9a98c0"],
Cell[138746, 4441, 467, 13, 43, "Input",ExpressionUUID->"ba2f075b-5f28-4fcf-9f4e-5d7bb13f7716"],
Cell[139216, 4456, 267, 5, 52, "Text",ExpressionUUID->"768b36bc-b7b3-4e02-9294-82472e44a6ba"]
}, Closed]],
Cell[CellGroupData[{
Cell[139520, 4466, 169, 3, 28, "Subsubsection",ExpressionUUID->"077538ba-6edb-4c78-b150-d706fb837b40"],
Cell[139692, 4471, 185, 5, 33, "Text",ExpressionUUID->"9a30cb63-d483-4137-96cf-8a8d50d222b9"],
Cell[139880, 4478, 404, 12, 52, "Text",ExpressionUUID->"9d2cf0e4-1952-4914-940e-78154c8d2c37"],
Cell[140287, 4492, 1028, 30, 128, "Text",ExpressionUUID->"3054d844-ca56-4829-9ddd-34061406c0fe"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[141364, 4528, 108, 0, 47, "Subsection",ExpressionUUID->"254ae12d-1cef-40f1-a575-3c868c0741a0"],
Cell[CellGroupData[{
Cell[141497, 4532, 329, 9, 59, "Subsubsection",ExpressionUUID->"000d0389-f8a5-48ea-8e26-6d237235b1c7"],
Cell[141829, 4543, 1281, 41, 204, "Text",ExpressionUUID->"2327e732-2e47-46d4-9c17-97445255b00e"],
Cell[143113, 4586, 134, 2, 27, "Input",ExpressionUUID->"e3e35af6-aca0-43ba-89ca-b5c9fc62aa4a"],
Cell[CellGroupData[{
Cell[143272, 4592, 115, 1, 27, "Input",ExpressionUUID->"20224cdf-0b17-4298-8c1c-80ff0f960531"],
Cell[143390, 4595, 97, 0, 27, "Output",ExpressionUUID->"fcd98af8-1d20-4ffd-9f48-6931017b0614"]
}, Open  ]],
Cell[143502, 4598, 186, 4, 27, "Input",ExpressionUUID->"3bf6e059-0d8b-48b9-a376-d1792241d6d1"],
Cell[CellGroupData[{
Cell[143713, 4606, 115, 1, 27, "Input",ExpressionUUID->"b5c311bc-9d15-42c9-b078-f794c77cf79d"],
Cell[143831, 4609, 275, 6, 39, "Message",ExpressionUUID->"f2d15e91-4e07-402b-a778-b3460c5a5e12"],
Cell[144109, 4617, 118, 1, 27, "Output",ExpressionUUID->"4cc2f6d2-21e6-4822-83ca-29450db5d931"]
}, Open  ]],
Cell[144242, 4621, 184, 4, 27, "Input",ExpressionUUID->"cf70d8fa-577f-4471-a8f4-d0c1ebbe6a71"],
Cell[144429, 4627, 778, 22, 109, "Text",ExpressionUUID->"8795bf1a-cedb-48a1-b7b3-be95227f7f2d"],
Cell[145210, 4651, 213, 7, 33, "Text",ExpressionUUID->"b1646c1c-9c26-40cf-b1db-d61b3408d372"],
Cell[CellGroupData[{
Cell[145448, 4662, 121, 1, 27, "Input",ExpressionUUID->"373152e9-9c2d-4bc2-b588-d8ba989a554d"],
Cell[145572, 4665, 144, 3, 27, "Output",ExpressionUUID->"de1ac9a8-fb9e-4dd1-897f-b6d0c17a919f"]
}, Open  ]],
Cell[145731, 4671, 221, 8, 33, "Text",ExpressionUUID->"e796d1fa-8201-4d4b-96e1-03ab71f27665"],
Cell[CellGroupData[{
Cell[145977, 4683, 314, 8, 27, "Input",ExpressionUUID->"bddcb24a-a539-428e-9413-31b46c4ed0d2"],
Cell[146294, 4693, 181, 4, 27, "Output",ExpressionUUID->"21d7d1ee-1466-430b-8b93-4d366a296b13"]
}, Open  ]],
Cell[146490, 4700, 179, 4, 33, "Text",ExpressionUUID->"7da6da81-ae92-4a84-a47b-68817a8f49ef"],
Cell[CellGroupData[{
Cell[146694, 4708, 322, 8, 27, "Input",ExpressionUUID->"fd78e90c-6eab-4f69-9353-4ce5cc28ccd9"],
Cell[147019, 4718, 303, 8, 27, "Output",ExpressionUUID->"b9f732b5-4cb2-4fd3-9140-8997e5a4813b"]
}, Open  ]],
Cell[147337, 4729, 458, 10, 71, "Text",ExpressionUUID->"c7362c67-c49c-4cd0-b893-4481b69e0b95"],
Cell[147798, 4741, 310, 7, 52, "Text",ExpressionUUID->"5a2344e4-31ad-47b9-93cf-4d5056a168d8"]
}, Closed]],
Cell[CellGroupData[{
Cell[148145, 4753, 343, 9, 45, "Subsubsection",ExpressionUUID->"c84d85d3-0ac0-4411-9ab4-35468589d99e"],
Cell[148491, 4764, 564, 18, 71, "Text",ExpressionUUID->"28d2866b-5e1c-4112-9535-bd420693f202"],
Cell[149058, 4784, 323, 7, 43, "Input",ExpressionUUID->"69eb121f-ffce-43a7-8710-3a10ea64a0a3"],
Cell[149384, 4793, 454, 10, 71, "Text",ExpressionUUID->"57f71dc4-ac2d-4094-8acd-b6fd31377564"],
Cell[149841, 4805, 541, 16, 71, "Text",ExpressionUUID->"740a8d7e-6635-4fc7-9192-85b612e81f4a"],
Cell[150385, 4823, 3192, 136, 432, "Text",ExpressionUUID->"e5251fbe-f678-488c-ae05-b50f4a6b56f9"],
Cell[153580, 4961, 125, 1, 33, "Text",ExpressionUUID->"4c40aeff-30d0-42a1-b3c0-0e44cefaf8e3"],
Cell[153708, 4964, 398, 7, 109, "Text",ExpressionUUID->"ece41e48-7a8c-4a35-9271-e0fbccbabd8e"],
Cell[154109, 4973, 267, 10, 33, "Text",ExpressionUUID->"64e1d4d3-096d-4245-b3cd-416d4635d631"],
Cell[CellGroupData[{
Cell[154401, 4987, 572, 14, 91, "Input",ExpressionUUID->"2bf1ca41-a519-4f27-a1f2-c310ecde7c46"],
Cell[154976, 5003, 83, 0, 27, "Output",ExpressionUUID->"17b812cb-2b00-45f0-b2c6-01efcf66161f"]
}, Open  ]],
Cell[155074, 5006, 255, 8, 33, "Text",ExpressionUUID->"7ec28547-6b9d-43b9-b6e8-83c0377ac8f8"],
Cell[CellGroupData[{
Cell[155354, 5018, 579, 15, 91, "Input",ExpressionUUID->"b5945d3d-472b-4176-96d9-1d7ef873eb58"],
Cell[155936, 5035, 82, 0, 23, "Print",ExpressionUUID->"2ac2c10b-9111-4079-a34a-f62343018a44"],
Cell[156021, 5037, 83, 0, 27, "Output",ExpressionUUID->"25f99a19-4c89-4837-874c-ac7bd28755f2"]
}, Open  ]],
Cell[156119, 5040, 318, 6, 52, "Text",ExpressionUUID->"0a2c8d69-bcb1-40ec-8976-3f25b5620352"],
Cell[156440, 5048, 221, 3, 52, "Text",ExpressionUUID->"9be1f392-596b-4191-b68c-c4a7263dca2e"],
Cell[CellGroupData[{
Cell[156686, 5055, 429, 10, 59, "Input",ExpressionUUID->"369d98bf-e5e9-49f9-a41e-972cdfad2037"],
Cell[157118, 5067, 139, 3, 29, "Output",ExpressionUUID->"673119b0-fc46-4eb0-b125-f85f464cd3ca"]
}, Open  ]],
Cell[157272, 5073, 318, 9, 52, "Text",ExpressionUUID->"73e20efc-8be2-401d-bd1b-cb0d39c62a73"],
Cell[CellGroupData[{
Cell[157615, 5086, 331, 9, 59, "Input",ExpressionUUID->"7c1d8ea4-cb72-45f8-9c59-7fec03a55b6e"],
Cell[157949, 5097, 83, 0, 27, "Output",ExpressionUUID->"e2c327d3-89d4-4399-9611-182e8a66877e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158069, 5102, 350, 9, 59, "Input",ExpressionUUID->"8d1d0800-078e-474c-9db3-86744385f974"],
Cell[158422, 5113, 83, 0, 27, "Output",ExpressionUUID->"bd19e6ef-2253-4052-be1d-d585a9daacd0"]
}, Open  ]],
Cell[158520, 5116, 167, 5, 33, "Text",ExpressionUUID->"652d0bf6-c735-4467-a3f3-26f59c7a6bc2"],
Cell[CellGroupData[{
Cell[158712, 5125, 608, 17, 59, "Input",ExpressionUUID->"285ba514-0bb1-4010-8b97-2f3043138e2f"],
Cell[159323, 5144, 351, 11, 23, "Print",ExpressionUUID->"572a5cff-b252-494e-88ff-fbdbfb45c4cc"]
}, Open  ]],
Cell[159689, 5158, 704, 19, 90, "Text",ExpressionUUID->"67752ca8-f489-4dd9-be01-b12c07d10f58"],
Cell[160396, 5179, 100, 0, 33, "Text",ExpressionUUID->"b3da43b7-0527-4be4-bfdf-85a55ef6ba22"],
Cell[CellGroupData[{
Cell[160521, 5183, 395, 11, 27, "Input",ExpressionUUID->"ac65dd54-9c71-43d8-8304-12a5025eecd6"],
Cell[160919, 5196, 222, 6, 27, "Output",ExpressionUUID->"fa8f6389-e0c7-4fd4-aeb1-f2a22fcf21ee"]
}, Open  ]],
Cell[161156, 5205, 198, 5, 33, "Text",ExpressionUUID->"460de899-40ca-4e1d-ab4b-2931dcd2ce88"],
Cell[CellGroupData[{
Cell[161379, 5214, 594, 15, 91, "Input",ExpressionUUID->"f715c6a2-ceb0-4386-b8ce-ce1dd570475e"],
Cell[161976, 5231, 197, 5, 23, "Print",ExpressionUUID->"becea96d-df73-4d25-b2be-de6b56c78d0c"]
}, Open  ]],
Cell[162188, 5239, 365, 9, 90, "Text",ExpressionUUID->"324f45b9-0368-4cec-ad2c-43067953a65a"],
Cell[162556, 5250, 181, 4, 37, "Text",ExpressionUUID->"f26a5a87-6857-4a9f-9dc6-6dfaf51ad60a"],
Cell[162740, 5256, 404, 10, 71, "Text",ExpressionUUID->"3224bda2-0098-4199-90e5-aea784400aab"],
Cell[CellGroupData[{
Cell[163169, 5270, 298, 8, 27, "Input",ExpressionUUID->"a9e678bc-6b95-48a2-b361-da6f47b47a62"],
Cell[163470, 5280, 151, 4, 37, "Print",ExpressionUUID->"ce709899-933c-43a3-b6f3-9321b785966c"]
}, Open  ]],
Cell[163636, 5287, 98, 0, 33, "Text",ExpressionUUID->"7b90eb64-f150-43da-b567-8fe03fbdd316"],
Cell[CellGroupData[{
Cell[163759, 5291, 343, 9, 27, "Input",ExpressionUUID->"4312769c-9e4e-4bca-a1cd-9e773509086d"],
Cell[164105, 5302, 296, 10, 23, "Print",ExpressionUUID->"7bd00c9c-ad21-433a-ba05-baf6e7d3a910"]
}, Open  ]],
Cell[164416, 5315, 452, 13, 71, "Text",ExpressionUUID->"75996213-c140-4370-95dd-d397a2705052"],
Cell[164871, 5330, 225, 5, 33, "Text",ExpressionUUID->"08beaa69-8e86-4aa4-bded-6a89dbeb3565"],
Cell[CellGroupData[{
Cell[165121, 5339, 201, 5, 27, "Input",ExpressionUUID->"c8e23014-f1e9-4775-bf2e-cda5285fe02b"],
Cell[165325, 5346, 260, 6, 36, "Message",ExpressionUUID->"59d4f7da-4f22-4b30-9b61-1c9f4c5fd791"],
Cell[165588, 5354, 142, 3, 27, "Output",ExpressionUUID->"bd050558-f7f8-438f-812c-b1bf6116d056"]
}, Open  ]],
Cell[165745, 5360, 155, 4, 33, "Text",ExpressionUUID->"b6f49d99-cbae-4e22-9cd2-fead79f9ab47"],
Cell[CellGroupData[{
Cell[165925, 5368, 197, 5, 27, "Input",ExpressionUUID->"4ec87d83-7596-4748-93a7-698f847585e4"],
Cell[166125, 5375, 142, 3, 27, "Output",ExpressionUUID->"3de37d37-ab4f-4ee5-a400-453d1c58bf2b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[166316, 5384, 130, 0, 28, "Subsubsection",ExpressionUUID->"2278f3be-0ace-4093-8460-eccb250fec81"],
Cell[166449, 5386, 1713, 45, 372, "Text",ExpressionUUID->"8689ef0b-4d4f-4692-9c26-8763ac04f994"]
}, Closed]],
Cell[CellGroupData[{
Cell[168199, 5436, 134, 0, 28, "Subsubsection",ExpressionUUID->"433c5216-07cf-4b9a-94f7-097d6f977b3c"],
Cell[168336, 5438, 847, 23, 242, "Text",ExpressionUUID->"888ed45e-89fd-4830-b186-7c84c209197f"],
Cell[169186, 5463, 170, 5, 71, "Text",ExpressionUUID->"56c79b40-7f9d-4257-a9c1-6446a58c22e5"],
Cell[169359, 5470, 197, 5, 33, "Text",ExpressionUUID->"94c5f4b3-bfa8-4f91-80e0-554179d22d12"],
Cell[169559, 5477, 475, 12, 71, "Text",ExpressionUUID->"b28fef48-7ec6-47e9-9154-16d6d948fa52"],
Cell[170037, 5491, 1171, 26, 261, "Text",ExpressionUUID->"4fcd5ce2-d0f8-4eb9-8c3f-ac3bd79f13fa"],
Cell[171211, 5519, 164, 3, 33, "Text",ExpressionUUID->"0a5dda47-0297-4375-b366-f4d397fd6ac6"],
Cell[171378, 5524, 661, 20, 128, "Text",ExpressionUUID->"1dd48cdf-1446-4496-b651-aa5ff7d28f52"],
Cell[172042, 5546, 673, 23, 90, "Text",ExpressionUUID->"a53dfbea-7a7a-47f2-bf0d-a2bf8efac652"],
Cell[172718, 5571, 186, 5, 33, "Text",ExpressionUUID->"c91e6f18-53bc-44bb-ac90-25dadd7514c0"],
Cell[CellGroupData[{
Cell[172929, 5580, 394, 10, 43, "Input",ExpressionUUID->"d77471f9-c019-468e-9ad1-5695837be153"],
Cell[173326, 5592, 264, 5, 27, "Output",ExpressionUUID->"d42b6932-8ab5-4241-ac24-d3765cecfb8f"]
}, Open  ]],
Cell[173605, 5600, 741, 24, 90, "Text",ExpressionUUID->"b9b7e714-45b4-41de-8546-b5fc13ee6688"],
Cell[174349, 5626, 288, 6, 52, "Text",ExpressionUUID->"d49c90b6-c755-41c3-a224-44f37e7aaa9d"],
Cell[174640, 5634, 175, 5, 33, "Text",ExpressionUUID->"6558c423-c120-4183-ad8a-15a06ca6eba2"],
Cell[CellGroupData[{
Cell[174840, 5643, 391, 10, 43, "Input",ExpressionUUID->"63a95e49-ad39-4e27-863e-05efa115eaa8"],
Cell[175234, 5655, 345, 6, 43, "Output",ExpressionUUID->"eefc662d-58e3-47e8-80ae-fd1390036839"]
}, Open  ]],
Cell[175594, 5664, 983, 30, 128, "Text",ExpressionUUID->"f433438d-996e-4a69-8817-c1850b43bd2a"]
}, Closed]],
Cell[CellGroupData[{
Cell[176614, 5699, 314, 4, 62, "Subsubsection",ExpressionUUID->"f3dffcad-5794-47fc-84f7-beeffda5d076"],
Cell[176931, 5705, 931, 26, 223, "Text",ExpressionUUID->"cf33be7d-8d11-4ed8-be8a-fd4eecb0cbf7"],
Cell[177865, 5733, 386, 9, 63, "Text",ExpressionUUID->"5a538b2d-e577-41a7-ac94-6671182af896"]
}, Closed]],
Cell[CellGroupData[{
Cell[178288, 5747, 198, 3, 45, "Subsubsection",ExpressionUUID->"09728b04-90e0-4320-9e6a-f51439b313c5"],
Cell[178489, 5752, 497, 13, 71, "Text",ExpressionUUID->"ecf5c401-c71b-4888-b63e-2faac82f236b"],
Cell[CellGroupData[{
Cell[179011, 5769, 328, 9, 27, "Input",ExpressionUUID->"07e5f5b4-bf00-479b-a4cc-a1df3ae845ba"],
Cell[179342, 5780, 137, 2, 27, "Output",ExpressionUUID->"97e306a6-c12c-4c37-978d-9c0f6672b4dc"]
}, Open  ]],
Cell[179494, 5785, 309, 8, 52, "Text",ExpressionUUID->"f999bfdb-b44a-489c-83a3-7e6e4439ab43"],
Cell[179806, 5795, 323, 7, 52, "Text",ExpressionUUID->"2d100ab2-6f9b-46c4-a612-53d26c9479e7"],
Cell[180132, 5804, 199, 5, 27, "Input",ExpressionUUID->"fc411ead-3fea-4893-a332-f5e009a454e1"],
Cell[180334, 5811, 176, 4, 27, "Input",ExpressionUUID->"f585e251-76c7-4564-bc57-79082e19de08"],
Cell[180513, 5817, 159, 3, 27, "Input",ExpressionUUID->"e419ff05-e2f9-4d06-be6c-5a3bbe405ec7"]
}, Closed]],
Cell[CellGroupData[{
Cell[180709, 5825, 193, 3, 45, "Subsubsection",ExpressionUUID->"794ab795-0686-41e9-b3c9-c36c71a565fa"],
Cell[180905, 5830, 392, 9, 43, "Input",ExpressionUUID->"3b49a615-9564-455c-a52e-2aa8bd2f4dd1"],
Cell[181300, 5841, 185, 4, 27, "Input",ExpressionUUID->"c88b44e8-cadb-4bba-bf33-f60c2ea789b1"],
Cell[CellGroupData[{
Cell[181510, 5849, 109, 1, 27, "Input",ExpressionUUID->"7aa343cb-780e-4575-b2ce-6bbdc59c341f"],
Cell[181622, 5852, 96, 0, 23, "Print",ExpressionUUID->"1e8a0d5e-1c56-48e9-9f27-a11000888001"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181755, 5857, 149, 3, 27, "Input",ExpressionUUID->"e6f93966-538c-488b-abd2-7c0717d4872a"],
Cell[181907, 5862, 96, 0, 23, "Print",ExpressionUUID->"31051439-7f52-4230-9197-352c0190142c"]
}, Open  ]],
Cell[182018, 5865, 307, 9, 52, "Text",ExpressionUUID->"86a59114-9599-4436-ac26-d27bd5556fc3"],
Cell[182328, 5876, 155, 2, 33, "Text",ExpressionUUID->"8aa0e3b9-8494-4b89-8f27-89edc2069b5c"],
Cell[CellGroupData[{
Cell[182508, 5882, 105, 1, 27, "Input",ExpressionUUID->"cd1983ab-f9bb-41bf-825c-d74db46759d1"],
Cell[182616, 5885, 96, 0, 23, "Print",ExpressionUUID->"784ddeb3-d1e8-419d-876a-098f462ee525"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182749, 5890, 132, 2, 27, "Input",ExpressionUUID->"31a841e9-4448-4ba6-a38f-138b1ff1d16c"],
Cell[182884, 5894, 96, 0, 23, "Print",ExpressionUUID->"d240cb15-c94c-4e84-8028-9be2493a8348"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183017, 5899, 104, 1, 27, "Input",ExpressionUUID->"2163664a-f723-4325-a8ad-51d3b2ed6bea"],
Cell[183124, 5902, 96, 0, 23, "Print",ExpressionUUID->"e176499f-3221-41b8-b066-709743696680"],
Cell[183223, 5904, 97, 0, 23, "Print",ExpressionUUID->"0f9b18e8-33a6-4f2e-995d-160350782c04"],
Cell[183323, 5906, 728, 20, 23, "Print",ExpressionUUID->"1aef2d1d-ec31-498d-adff-b5ac72259e0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184088, 5931, 416, 9, 75, "Input",ExpressionUUID->"a881cff1-f63d-4fc6-97b2-026b0a0b4094"],
Cell[184507, 5942, 96, 0, 23, "Print",ExpressionUUID->"b91daa2b-708b-4879-b507-5ee6cfba2f9e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184640, 5947, 105, 1, 27, "Input",ExpressionUUID->"71d0d5ac-6a77-4205-ba20-e89046686edc"],
Cell[184748, 5950, 96, 0, 23, "Print",ExpressionUUID->"f1a19359-838e-4a66-aa4c-7c60035ca5ea"],
Cell[184847, 5952, 97, 0, 23, "Print",ExpressionUUID->"6c665557-5747-48fd-a0c4-7cc7b468aadb"],
Cell[184947, 5954, 728, 20, 23, "Print",ExpressionUUID->"ee12e8d9-b8a0-40f5-9cb6-ea26d97430e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185712, 5979, 198, 4, 27, "Input",ExpressionUUID->"466f35bb-af2b-4b42-a057-5a9a3abcb02d"],
Cell[185913, 5985, 83, 0, 27, "Output",ExpressionUUID->"adf5308b-1d13-4185-a831-efcbd6cf30fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186033, 5990, 104, 1, 27, "Input",ExpressionUUID->"9a2f8275-d294-4480-85d0-eda04dc90aa5"],
Cell[186140, 5993, 96, 0, 23, "Print",ExpressionUUID->"2966e0cd-2797-4947-a240-a084cbb108ed"],
Cell[186239, 5995, 97, 0, 23, "Print",ExpressionUUID->"8dfa7f5a-e4c1-4486-9244-d8acc1f67ae3"],
Cell[186339, 5997, 1102, 31, 59, "Print",ExpressionUUID->"97644285-9968-48cd-ac01-643a2ceddd85"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187478, 6033, 201, 4, 27, "Input",ExpressionUUID->"c2f383eb-1a6c-4e44-ae6b-9abad0307eff"],
Cell[187682, 6039, 728, 20, 23, "Print",ExpressionUUID->"047946ec-5602-4e4e-8b6f-0ea31b46bdfb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188447, 6064, 205, 4, 27, "Input",ExpressionUUID->"c2cae13a-9dc2-4744-bb86-166a2dc534b0"],
Cell[188655, 6070, 913, 24, 23, "Print",ExpressionUUID->"f0a04940-8286-4d27-9eb6-a1f53ebeb4e7"]
}, Open  ]],
Cell[189583, 6097, 103, 0, 33, "Text",ExpressionUUID->"488cfc1a-b83e-4d79-9b4d-28cb54b7d44a"]
}, Closed]],
Cell[CellGroupData[{
Cell[189723, 6102, 153, 2, 28, "Subsubsection",ExpressionUUID->"5cbb04c2-9ce0-48da-8d77-4d91699a2062"],
Cell[189879, 6106, 145, 2, 37, "Text",ExpressionUUID->"4a245b10-1c74-408f-8697-13148f75dddf"],
Cell[190027, 6110, 130, 0, 33, "Text",ExpressionUUID->"ea30150c-8308-4cfc-9598-bfcd62e4ceed"],
Cell[190160, 6112, 1328, 47, 147, "Text",ExpressionUUID->"aafcec47-6083-4485-8537-ddd2cc24de13"],
Cell[191491, 6161, 206, 5, 27, "Input",ExpressionUUID->"7ef84525-e3c1-42f8-8d52-bfe9c18c0cd7"],
Cell[191700, 6168, 157, 2, 33, "Text",ExpressionUUID->"8705a4d0-a04c-4fe8-87d9-438caa94a53e"],
Cell[191860, 6172, 288, 6, 27, "Input",ExpressionUUID->"522ca49d-0f17-4200-8540-03c916955cd8"],
Cell[192151, 6180, 1121, 46, 109, "Text",ExpressionUUID->"5c276517-70bd-4150-80d8-17dd843db9bf"],
Cell[193275, 6228, 848, 28, 109, "Text",ExpressionUUID->"1ddb3a88-e91d-4af6-8aed-e6f9a4ba52ac"],
Cell[CellGroupData[{
Cell[194148, 6260, 463, 8, 91, "Input",ExpressionUUID->"a0072099-6ce3-4b55-9245-927f2914ff96"],
Cell[194614, 6270, 96, 0, 23, "Print",ExpressionUUID->"1ddd38c0-c990-47cf-8b7a-029b44567811"]
}, Open  ]],
Cell[194725, 6273, 1094, 26, 223, "Text",ExpressionUUID->"acb108ac-b807-4118-88d6-7562dfb1f646"],
Cell[195822, 6301, 587, 16, 147, "Text",ExpressionUUID->"cf75650b-c707-4d1f-b0ad-c00db278a504"],
Cell[196412, 6319, 82, 5, 90, "Text",ExpressionUUID->"39571a1a-0147-4055-be84-09e448379c04"],
Cell[196497, 6326, 423, 7, 109, "Text",ExpressionUUID->"fb222d4f-00db-456e-be9f-1e58ddb7a280"],
Cell[196923, 6335, 357, 8, 59, "Input",ExpressionUUID->"a5274c66-631c-4eb1-a0dd-3a12a8a462cf"],
Cell[197283, 6345, 685, 15, 166, "Text",ExpressionUUID->"4237b567-ca8e-4386-95d5-e3bd505c6e70"],
Cell[197971, 6362, 1113, 23, 223, "Text",ExpressionUUID->"c9bb2b5f-ffa8-47af-97d6-acfeccfd14e2"],
Cell[199087, 6387, 161, 2, 37, "Text",ExpressionUUID->"90856fec-a658-4820-8a16-0ac52f8b3efe"],
Cell[199251, 6391, 1583, 43, 155, "Input",ExpressionUUID->"8a79cc2e-f867-4197-9278-f92fb2da638e"],
Cell[CellGroupData[{
Cell[200859, 6438, 90, 0, 27, "Input",ExpressionUUID->"617ff86f-1ec0-4b7e-9c1c-3e9c916149ac"],
Cell[200952, 6440, 268, 5, 43, "Output",ExpressionUUID->"69285675-b8f9-4b28-ad3e-ccb5bd3e154e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201257, 6450, 607, 14, 59, "Input",ExpressionUUID->"26393a05-9854-4466-b11a-323cec94b6cd"],
Cell[201867, 6466, 2406, 35, 315, "Output",ExpressionUUID->"e1a63d7c-2ceb-44d2-be6d-b6000219b6a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204310, 6506, 528, 13, 43, "Input",ExpressionUUID->"b84404fc-bb1f-4085-b880-34f0998b530a"],
Cell[204841, 6521, 444, 8, 59, "Output",ExpressionUUID->"de2ebd6f-fbbf-4077-9306-717b9f62025c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205322, 6534, 487, 13, 59, "Input",ExpressionUUID->"1b89820f-3127-4f8a-a72a-55eff7216bcc"],
Cell[205812, 6549, 581, 10, 59, "Output",ExpressionUUID->"eae07c47-aa69-4205-830b-a2f083b5a3b8"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[206442, 6565, 279, 5, 62, "Subsubsection",ExpressionUUID->"e1d4ee6b-82c8-4a1a-9f5b-b373a8d6d0c5"],
Cell[206724, 6572, 174, 3, 33, "Text",ExpressionUUID->"6cd161cb-9f6b-491f-b5cd-f33740517840"],
Cell[206901, 6577, 598, 15, 91, "Input",ExpressionUUID->"4b77165b-30f4-4635-96cc-f8a900e20726"],
Cell[207502, 6594, 878, 23, 147, "Text",ExpressionUUID->"94d732b5-31ad-4810-9cf3-4c2f1b6d6754"],
Cell[208383, 6619, 244, 4, 52, "Text",ExpressionUUID->"e5faf058-add5-49f4-af69-224d92f7330c"],
Cell[208630, 6625, 596, 16, 75, "Input",ExpressionUUID->"72508cb2-23e4-4855-b34f-9f3432a7f7c1"],
Cell[209229, 6643, 111, 0, 33, "Text",ExpressionUUID->"41369503-efb6-4563-a0c0-cceacc1b8d59"],
Cell[CellGroupData[{
Cell[209365, 6647, 219, 5, 27, "Input",ExpressionUUID->"de9b5731-38a9-40a5-92e7-c2b85c21a0eb"],
Cell[209587, 6654, 160, 3, 27, "Output",ExpressionUUID->"94199df8-8d9e-4f7a-86a4-b5ce08171664"]
}, Open  ]],
Cell[209762, 6660, 101, 0, 33, "Text",ExpressionUUID->"695a3c55-323a-4c1c-91cb-ff0cb75afc33"],
Cell[CellGroupData[{
Cell[209888, 6664, 304, 7, 27, "Input",ExpressionUUID->"138b5c89-d11c-474b-81b4-39d1b46838fc"],
Cell[210195, 6673, 82, 0, 23, "Print",ExpressionUUID->"fce1b954-5ac8-4603-a6d3-e7ba7a954e31"],
Cell[210280, 6675, 175, 3, 27, "Output",ExpressionUUID->"276e48ee-4753-45f7-8a09-7ed577cc926a"]
}, Open  ]],
Cell[210470, 6681, 172, 3, 33, "Text",ExpressionUUID->"a5107ee5-3083-4c91-af6d-c0aac934882c"],
Cell[210645, 6686, 556, 14, 59, "Input",ExpressionUUID->"ed9ccd12-e221-47ff-947b-bceab29602f2"],
Cell[CellGroupData[{
Cell[211226, 6704, 304, 7, 27, "Input",ExpressionUUID->"49da2ebf-e656-4cf9-8998-9e4c1c560372"],
Cell[211533, 6713, 234, 5, 27, "Output",ExpressionUUID->"9f41d8c2-3ef7-4715-ac57-8f24d36e5c0f"]
}, Open  ]],
Cell[211782, 6721, 150, 2, 33, "Text",ExpressionUUID->"2d0f7aea-f4f2-458a-bb06-b99ecafe0bca"],
Cell[CellGroupData[{
Cell[211957, 6727, 247, 6, 27, "Input",ExpressionUUID->"d83a3ba3-210a-49ec-a3e8-1a002483e247"],
Cell[212207, 6735, 84, 0, 27, "Output",ExpressionUUID->"b5f466ef-1a60-4cab-88f6-75f7f6036c73"]
}, Open  ]],
Cell[212306, 6738, 394, 14, 52, "Text",ExpressionUUID->"e18adeb4-7e41-4664-8808-1f2d06bfff62"],
Cell[212703, 6754, 274, 9, 33, "Text",ExpressionUUID->"b1119ecc-3b64-440d-92f3-811d6be175c9"],
Cell[212980, 6765, 749, 18, 107, "Input",ExpressionUUID->"c48f8abc-b826-4284-bdb4-4d7cf43a64a4"],
Cell[CellGroupData[{
Cell[213754, 6787, 247, 6, 27, "Input",ExpressionUUID->"dbcbab34-4858-41a1-a3aa-4eb09ee25a13"],
Cell[214004, 6795, 130, 2, 29, "Output",ExpressionUUID->"0afcb31a-a9d8-4410-95d4-9bffc3b8e2b5"]
}, Open  ]],
Cell[214149, 6800, 397, 11, 63, "Text",ExpressionUUID->"199e389f-ee48-4df6-b106-70d69b6711a3"],
Cell[214549, 6813, 334, 5, 71, "Text",ExpressionUUID->"211fe469-b793-4b0b-a30a-3a413ff2968c"],
Cell[214886, 6820, 333, 7, 71, "Text",ExpressionUUID->"2ef58661-294f-4aa2-a9b9-92785047605b"],
Cell[215222, 6829, 577, 10, 147, "Text",ExpressionUUID->"e75c1d45-6c6e-4ade-8c5a-e106869cd9ca"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[215848, 6845, 129, 0, 47, "Subsection",ExpressionUUID->"a19aceb4-9e4a-40b4-ad7f-bf8f3a7a27d3"],
Cell[CellGroupData[{
Cell[216002, 6849, 169, 5, 93, "Subsubsection",ExpressionUUID->"c14699ae-6310-4efb-aabe-17bbf1e69a40"],
Cell[216174, 6856, 109, 0, 33, "Text",ExpressionUUID->"073a2490-0447-4630-a882-fd7eba1cf92c"],
Cell[216286, 6858, 404, 16, 52, "Text",ExpressionUUID->"81a9575d-3daf-4131-a5f1-34c76aac0755"],
Cell[216693, 6876, 79, 0, 33, "Text",ExpressionUUID->"229781ba-26b6-4b20-8758-7d853c312806"],
Cell[216775, 6878, 90, 0, 27, "Input",ExpressionUUID->"1402f5f9-1758-4d93-9405-ad448e67c845"],
Cell[216868, 6880, 147, 3, 27, "Input",ExpressionUUID->"cd27fc79-5c7a-408d-a86c-0fb0f7c27a54"],
Cell[217018, 6885, 153, 3, 27, "Input",ExpressionUUID->"5741ba02-e19b-48f9-adf9-73cf1922816e"],
Cell[217174, 6890, 156, 2, 27, "Input",ExpressionUUID->"eb3b9646-e7ab-487b-b803-0795d4f1919c"],
Cell[217333, 6894, 227, 6, 27, "Input",ExpressionUUID->"5c55877f-d0bc-47e2-817c-a729eded632e"],
Cell[217563, 6902, 387, 17, 52, "Text",ExpressionUUID->"e3ae9263-9601-42d6-8f87-5c847507f76d"],
Cell[217953, 6921, 80, 0, 33, "Text",ExpressionUUID->"ce0fc2c1-4d8e-4ce3-a32a-f6191d96ddf2"],
Cell[218036, 6923, 213, 6, 27, "Input",ExpressionUUID->"fbd241af-15dc-4c77-8dd1-c63d56d19a4a"],
Cell[218252, 6931, 210, 6, 27, "Input",ExpressionUUID->"399cb105-faab-47a2-9fa1-576e7d521e5f"],
Cell[218465, 6939, 1287, 36, 204, "Text",ExpressionUUID->"7a832495-a08a-4bbe-a22c-68d5e2dd5bb0"],
Cell[219755, 6977, 409, 11, 52, "Text",ExpressionUUID->"76b083b3-810f-47d4-bece-bd7d3da2cab9"],
Cell[220167, 6990, 688, 16, 91, "Input",ExpressionUUID->"e1455ff1-bcc2-4117-866f-f11abbd17059"],
Cell[220858, 7008, 150, 4, 30, "Input",ExpressionUUID->"b4e65a08-8989-4c6e-975a-c9466f125d9c"],
Cell[221011, 7014, 1465, 47, 204, "Text",ExpressionUUID->"25a11ae1-cbd2-4b5f-9fe2-fd48d2d2f586"],
Cell[222479, 7063, 276, 7, 52, "Text",ExpressionUUID->"1bd553bb-fbc0-4044-b0dc-3dd45ef8c59a"],
Cell[222758, 7072, 653, 17, 91, "Input",ExpressionUUID->"6618a821-d66f-40cb-a49f-655120f697dd"],
Cell[223414, 7091, 601, 16, 91, "Input",ExpressionUUID->"c1ad2934-5c99-4e3c-b692-48b353391cf9"],
Cell[224018, 7109, 755, 21, 91, "Input",ExpressionUUID->"4661d68d-5a0d-4f77-8ddb-2d7a954e5879"],
Cell[224776, 7132, 368, 11, 52, "Text",ExpressionUUID->"7c0e2585-b99b-4e74-a725-763d55c36ae6"],
Cell[225147, 7145, 115, 1, 27, "Input",ExpressionUUID->"976da89d-1199-40f1-8411-b1bb4b1455b0"],
Cell[225265, 7148, 236, 6, 52, "Text",ExpressionUUID->"558f21c3-23b0-47bc-9c51-0a9af2dfd370"],
Cell[225504, 7156, 1061, 28, 337, "Text",ExpressionUUID->"1ef596fa-5e45-45cb-a06b-df63d139bcd2"],
Cell[226568, 7186, 119, 0, 33, "Text",ExpressionUUID->"2d5866f1-bcdd-47fa-a238-98a9fe7a91a4"],
Cell[226690, 7188, 413, 14, 27, "Input",ExpressionUUID->"76c3742c-dfdc-45d9-b58c-1e2d2267699e"],
Cell[227106, 7204, 500, 24, 34, "Text",ExpressionUUID->"437d83f7-c2d6-4bdb-a4a8-ba69f6b4b543"],
Cell[227609, 7230, 752, 22, 128, "Text",ExpressionUUID->"a0a698bd-d0d8-48a9-b32c-5dc383dc8a64"],
Cell[228364, 7254, 295, 7, 27, "Input",ExpressionUUID->"b48ee8b7-dee1-496c-8e8b-c166bbf55200"],
Cell[228662, 7263, 219, 5, 27, "Input",ExpressionUUID->"b5bbacce-0eb3-487f-a792-861739a448f0"],
Cell[228884, 7270, 292, 7, 27, "Input",ExpressionUUID->"eb87a440-e3f7-4620-a3c4-932c1dda3b3e"],
Cell[229179, 7279, 312, 9, 52, "Text",ExpressionUUID->"51fc6774-5571-40ae-a6d3-cc75165eef22"],
Cell[229494, 7290, 677, 18, 75, "Input",ExpressionUUID->"0314d95e-aef0-41e7-a33c-1cb824c72d23"],
Cell[230174, 7310, 510, 13, 43, "Input",ExpressionUUID->"60380f60-4506-42af-991a-87ef2c8f3eab"],
Cell[CellGroupData[{
Cell[230709, 7327, 167, 3, 27, "Input",ExpressionUUID->"09597432-b460-4e48-a4bc-35a292b408ab"],
Cell[230879, 7332, 86, 0, 27, "Output",ExpressionUUID->"287084ea-e33f-4790-8c2c-e40cc79be52f"]
}, Open  ]],
Cell[230980, 7335, 144, 2, 33, "Text",ExpressionUUID->"0afcaf11-a5d4-4f23-ad1a-46a1474827d8"],
Cell[CellGroupData[{
Cell[231149, 7341, 390, 10, 27, "Input",ExpressionUUID->"76bde653-05ee-473a-8f04-ddcb7e8e9da5"],
Cell[231542, 7353, 2640, 54, 235, "Output",ExpressionUUID->"006b9ef9-a838-4b97-a68b-6a36773053e8"]
}, Open  ]],
Cell[234197, 7410, 286, 6, 52, "Text",ExpressionUUID->"ce47c7b0-170a-4a39-819a-0d729caca264"],
Cell[CellGroupData[{
Cell[234508, 7420, 243, 5, 27, "Input",ExpressionUUID->"c0f42f8f-3459-4fd3-b9fd-5599f054d779"],
Cell[234754, 7427, 1329, 35, 123, "Output",ExpressionUUID->"a4a7dd98-af54-45cb-8987-47dc47872d50"]
}, Open  ]],
Cell[236098, 7465, 80, 3, 52, "Text",ExpressionUUID->"e9015c68-c95d-40f0-bd0f-580f58414e89"],
Cell[236181, 7470, 373, 10, 71, "Text",ExpressionUUID->"d597bc8b-da68-40e9-94f4-2165a92b7bf4"],
Cell[236557, 7482, 802, 26, 27, "Input",ExpressionUUID->"a5b5889c-e847-4ca6-a2b8-e61bc920905d"],
Cell[237362, 7510, 804, 17, 120, "Text",ExpressionUUID->"128fb0af-0937-4e20-8fef-3ab4103865de"],
Cell[CellGroupData[{
Cell[238191, 7531, 122, 1, 27, "Input",ExpressionUUID->"d9d71bdf-1338-4afd-bcaf-f85944f80485"],
Cell[238316, 7534, 83, 0, 27, "Output",ExpressionUUID->"ce10a1da-f60d-4063-a9fd-0e96a43911e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238436, 7539, 232, 6, 27, "Input",ExpressionUUID->"9bfed172-1b74-4a97-ab87-f128bae1778e"],
Cell[238671, 7547, 281, 9, 27, "Output",ExpressionUUID->"c523c083-36b5-41a3-ba71-1b08ad5b6ce0"]
}, Open  ]],
Cell[238967, 7559, 891, 21, 128, "Text",ExpressionUUID->"d4c0721e-f468-4f33-96d0-a7700b00a70a"],
Cell[CellGroupData[{
Cell[239883, 7584, 149, 3, 27, "Input",ExpressionUUID->"1ed19f22-785a-42f5-94fb-bd79a727733b"],
Cell[240035, 7589, 83, 0, 27, "Output",ExpressionUUID->"6679be6b-6db4-4a65-87ef-562db07ad46b"]
}, Open  ]],
Cell[240133, 7592, 127, 1, 27, "Input",ExpressionUUID->"69b5d771-5cab-4a7a-8f75-c7fcb2e0ef47"],
Cell[CellGroupData[{
Cell[240285, 7597, 82, 0, 27, "Input",ExpressionUUID->"84f89c6c-1f87-4e35-ae0b-9d4eb2c6a4e7"],
Cell[240370, 7599, 170, 5, 27, "Output",ExpressionUUID->"f7788f5d-d9a7-4b56-a0a2-eaa1cfebb6dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240577, 7609, 232, 6, 27, "Input",ExpressionUUID->"dc0f7756-5ab6-4421-9f6a-7aed9ff4b26c"],
Cell[240812, 7617, 382, 13, 27, "Output",ExpressionUUID->"bb645bd9-9a50-4f96-85d5-3208649dad68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241231, 7635, 330, 9, 59, "Input",ExpressionUUID->"6f51156c-f58d-40d7-9cd6-8f262e2a3cba"],
Cell[241564, 7646, 86, 0, 27, "Output",ExpressionUUID->"6b190866-1c89-498f-b489-37911d35f275"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241687, 7651, 153, 3, 27, "Input",ExpressionUUID->"3340c95d-8866-40cd-b394-2fd65912a579"],
Cell[241843, 7656, 85, 0, 27, "Output",ExpressionUUID->"4e0a76f1-e855-497f-b1b9-70ac6bc51343"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241965, 7661, 235, 5, 27, "Input",ExpressionUUID->"45f6d35a-7758-4f8f-8a86-3a6780f98bea"],
Cell[242203, 7668, 102, 0, 23, "Print",ExpressionUUID->"0aa4c7ba-bed4-4a62-a5bb-5d4bb5014e5a"],
Cell[242308, 7670, 674, 20, 23, "Print",ExpressionUUID->"99b2ca71-1a4c-4cdc-844b-22b945f8c62b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243019, 7695, 231, 5, 27, "Input",ExpressionUUID->"4bf6efcf-07b8-4201-b06e-22283fff4c71"],
Cell[243253, 7702, 97, 0, 27, "Output",ExpressionUUID->"956b3bf0-f8a2-4ea6-b263-bdb7a093986f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243387, 7707, 158, 3, 27, "Input",ExpressionUUID->"b6240ea7-29a4-4628-aab1-ab6f7e49b4ef"],
Cell[243548, 7712, 378, 10, 27, "Output",ExpressionUUID->"9a8ecaa1-9b41-4b4c-9263-00d08f88da4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243963, 7727, 132, 1, 27, "Input",ExpressionUUID->"a5fc39a1-1990-4616-9b3d-4ee81ba4d542"],
Cell[244098, 7730, 100, 1, 27, "Output",ExpressionUUID->"9e8d9e82-9d93-4e55-b1ea-8f7f19821a52"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244235, 7736, 128, 1, 27, "Input",ExpressionUUID->"55528585-9987-4808-a7b8-b0625ec9afe2"],
Cell[244366, 7739, 172, 3, 27, "Output",ExpressionUUID->"60abf905-01f5-4a18-a9fb-4b2bb600f56f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244575, 7747, 277, 7, 27, "Input",ExpressionUUID->"f82262ba-f001-48cc-bb7b-dc2b66e8662c"],
Cell[244855, 7756, 100, 1, 27, "Output",ExpressionUUID->"e3c040ba-c205-4823-89b9-7b442ad5a324"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[245004, 7763, 128, 0, 28, "Subsubsection",ExpressionUUID->"3a1c3fa4-1df3-446d-9e8b-74ff2a46c62a"],
Cell[245135, 7765, 345, 6, 90, "Text",ExpressionUUID->"d762fd78-379a-422f-baad-6b9459ebe067"],
Cell[245483, 7773, 264, 4, 52, "Text",ExpressionUUID->"2e767201-034f-4e11-ba8f-ef36b704281b"],
Cell[245750, 7779, 144, 3, 27, "Input",ExpressionUUID->"4c16648f-1860-41e9-976d-fd82b44116c1"],
Cell[CellGroupData[{
Cell[245919, 7786, 834, 23, 43, "Input",ExpressionUUID->"2e9230aa-e60a-4208-a5a0-a995c29ee1e4"],
Cell[246756, 7811, 1042, 32, 43, "Output",ExpressionUUID->"7f61e1d4-7f04-44ee-8174-87bafc1a9cdd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247835, 7848, 269, 6, 27, "Input",ExpressionUUID->"4a8a6d5b-2ff1-4ea1-9a80-724967b4adf7"],
Cell[248107, 7856, 1082, 32, 43, "Output",ExpressionUUID->"8e735acc-4989-44c6-aae7-b464bb478ea4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249226, 7893, 257, 6, 27, "Input",ExpressionUUID->"57feb45a-579b-4367-a1d3-a78d45a9a1f6"],
Cell[249486, 7901, 786, 21, 43, "Output",ExpressionUUID->"379bfa4b-1cc1-46cb-a5ce-462fc17c038a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250309, 7927, 347, 8, 27, "Input",ExpressionUUID->"1dbb7203-4b41-4b5b-b37c-57dcaafc9766"],
Cell[250659, 7937, 404, 10, 27, "Output",ExpressionUUID->"80886dc9-b006-44a6-811a-c1900973e715"]
}, Open  ]],
Cell[251078, 7950, 415, 12, 52, "Text",ExpressionUUID->"b1805b5d-cbaf-40db-b489-2b5984c37323"]
}, Closed]],
Cell[CellGroupData[{
Cell[251530, 7967, 137, 1, 28, "Subsubsection",ExpressionUUID->"e06d200f-75e8-4aeb-b9a8-9f5fdaac1bac"],
Cell[251670, 7970, 113, 0, 33, "Text",ExpressionUUID->"04a38771-0be3-498a-aa2a-a7c75edd7f77"],
Cell[251786, 7972, 952, 28, 187, "Input",ExpressionUUID->"34ef34ae-f083-4034-891f-dfe99e5640d9"],
Cell[252741, 8002, 312, 6, 52, "Text",ExpressionUUID->"ebd497d5-0acd-48d8-ab69-b68710090ecb"],
Cell[253056, 8010, 818, 21, 123, "Input",ExpressionUUID->"d51bc378-78e6-4bb8-901b-605dfbf96091"],
Cell[253877, 8033, 347, 9, 52, "Text",ExpressionUUID->"b7e0e4b1-e5e4-4679-a622-aef828d038ca"],
Cell[254227, 8044, 241, 6, 27, "Input",ExpressionUUID->"d4882019-e6aa-48d5-bf90-dce0f39b9203"],
Cell[254471, 8052, 81, 4, 71, "Text",ExpressionUUID->"ea5e0f07-5f31-4f02-bbce-3ae339893386"],
Cell[254555, 8058, 177, 3, 33, "Text",ExpressionUUID->"0f5f7db1-52f6-4f1d-a9cb-1f1e65a5a481"],
Cell[254735, 8063, 213, 3, 52, "Text",ExpressionUUID->"8ef3f877-f048-432b-9149-a65b14873566"],
Cell[254951, 8068, 351, 6, 109, "Text",ExpressionUUID->"b4f89909-9761-49c1-b32c-d57683b399a8"]
}, Closed]],
Cell[CellGroupData[{
Cell[255339, 8079, 142, 1, 28, "Subsubsection",ExpressionUUID->"87648446-4de8-494c-a8f3-2fc6479d7f9b"],
Cell[255484, 8082, 352, 9, 52, "Text",ExpressionUUID->"af0c5913-44b1-424b-813b-2ffa120d7045"],
Cell[255839, 8093, 358, 9, 59, "Input",ExpressionUUID->"1eb7909e-32c7-4555-a8a9-691d0d9d0b07"],
Cell[CellGroupData[{
Cell[256222, 8106, 244, 6, 27, "Input",ExpressionUUID->"0778638d-bb02-4e4c-880c-7f09747deed6"],
Cell[256469, 8114, 473, 15, 27, "Output",ExpressionUUID->"682482cd-0931-45c5-8bc6-2b8341e08c48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256979, 8134, 263, 6, 27, "Input",ExpressionUUID->"900b73d5-1af4-46a0-bdb7-2cdf0e72f582"],
Cell[257245, 8142, 907, 28, 43, "Output",ExpressionUUID->"80f74a9e-cbba-4ebf-aca6-7d7bccaa5b71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[258189, 8175, 154, 3, 27, "Input",ExpressionUUID->"20c66ac7-abde-4a56-ac66-5cec46aebf25"],
Cell[258346, 8180, 2311, 76, 65, "Output",ExpressionUUID->"522a70b5-c181-469b-a29e-f649d391e360"]
}, Open  ]],
Cell[260672, 8259, 655, 16, 109, "Text",ExpressionUUID->"75ddde9a-261f-40ff-ae00-b4c8cb79a415"]
}, Closed]],
Cell[CellGroupData[{
Cell[261364, 8280, 157, 2, 28, "Subsubsection",ExpressionUUID->"91e86c73-4c6d-4980-9ba6-4cd3daf25f47"],
Cell[261524, 8284, 146, 2, 33, "Text",ExpressionUUID->"8f3870e5-e644-4f03-8d63-04f3bd0c20ba"],
Cell[261673, 8288, 507, 13, 59, "Input",ExpressionUUID->"54edf7ee-903b-4688-843d-7ddbd1e5ffa0"],
Cell[CellGroupData[{
Cell[262205, 8305, 277, 7, 27, "Input",ExpressionUUID->"2d885d99-fd9d-4253-8c4f-fb68e55077e7"],
Cell[262485, 8314, 201, 5, 23, "Print",ExpressionUUID->"aeacb541-f066-4a91-b865-a01a305d32d8"],
Cell[262689, 8321, 203, 5, 23, "Print",ExpressionUUID->"1a4b71e0-adcc-4110-826f-5e48886aaf19"],
Cell[262895, 8328, 263, 7, 27, "Output",ExpressionUUID->"b6719c9e-3db8-44e3-917e-ab26347e16a7"]
}, Open  ]],
Cell[263173, 8338, 323, 5, 71, "Text",ExpressionUUID->"d2fbd5eb-20f0-49ab-a999-9bfe741ac70b"],
Cell[263499, 8345, 593, 15, 59, "Input",ExpressionUUID->"453bf63d-2c8d-4be5-9e5d-0236ce86e8a3"],
Cell[CellGroupData[{
Cell[264117, 8364, 277, 7, 27, "Input",ExpressionUUID->"0fd08f20-73fb-4ec5-bacf-5fe39d5a1687"],
Cell[264397, 8373, 229, 6, 23, "Print",ExpressionUUID->"f8310828-8b80-4b52-aeff-80afeac33624"],
Cell[264629, 8381, 227, 6, 23, "Print",ExpressionUUID->"59012f92-fa8a-4388-afe9-4ff2d937c997"],
Cell[264859, 8389, 263, 7, 27, "Output",ExpressionUUID->"9c61306d-1906-4809-9ffa-9b9960069cfc"]
}, Open  ]],
Cell[265137, 8399, 702, 23, 90, "Text",ExpressionUUID->"38449700-cdeb-42d6-b7b2-21a7601e38fa"]
}, Closed]],
Cell[CellGroupData[{
Cell[265876, 8427, 265, 4, 62, "Subsubsection",ExpressionUUID->"a6c98784-55b2-4c02-8c08-51e05bb55187"],
Cell[266144, 8433, 652, 21, 71, "Text",ExpressionUUID->"38283797-e149-433e-a5b6-d2346544d27b"],
Cell[266799, 8456, 98, 0, 33, "Text",ExpressionUUID->"9b203ceb-6543-48a1-9b8a-fad3080162eb"],
Cell[266900, 8458, 176, 4, 27, "Input",ExpressionUUID->"c8f5c334-7bdb-42a1-88cb-5854f76e9173"],
Cell[267079, 8464, 152, 3, 27, "Input",ExpressionUUID->"a6ebe319-54b3-4bea-af41-917d3cb24dc7"],
Cell[267234, 8469, 298, 7, 59, "Input",ExpressionUUID->"a5884e86-981c-4d6e-9706-7a72d7099319"],
Cell[267535, 8478, 519, 15, 71, "Text",ExpressionUUID->"64271d89-e496-420d-bbe2-4f1e36344f0d"],
Cell[268057, 8495, 257, 5, 59, "Input",ExpressionUUID->"e44749fd-225d-4324-b2a3-c2d14235ad3a"],
Cell[268317, 8502, 684, 25, 71, "Text",ExpressionUUID->"36445a8b-39f4-42ff-a01d-c702a433dcd3"],
Cell[269004, 8529, 419, 11, 27, "Input",ExpressionUUID->"971fdf62-8955-4f36-87e2-c4eda8fc5524"],
Cell[269426, 8542, 158, 3, 33, "Text",ExpressionUUID->"8434325b-2cb9-4eff-b1d3-4d4965f3ca71"],
Cell[269587, 8547, 350, 9, 59, "Input",ExpressionUUID->"c330e387-c944-4cac-a89c-629553f36296"],
Cell[269940, 8558, 198, 4, 27, "Input",ExpressionUUID->"44cce7ea-6a89-4f45-a40a-62fc925dd4c3"],
Cell[270141, 8564, 361, 9, 27, "Input",ExpressionUUID->"9030ce94-6a16-43ed-aa0e-21586cbaae73"],
Cell[270505, 8575, 475, 13, 43, "Input",ExpressionUUID->"e1441eb2-8210-4699-a119-aaeb85857d86"]
}, Closed]],
Cell[CellGroupData[{
Cell[271017, 8593, 159, 2, 28, "Subsubsection",ExpressionUUID->"f6b5d7a0-82ca-4e6c-b583-5e6275aefe81"],
Cell[271179, 8597, 365, 7, 109, "Text",ExpressionUUID->"625edeb6-d429-4667-a42f-1b9eed67974b"]
}, Closed]],
Cell[CellGroupData[{
Cell[271581, 8609, 181, 3, 45, "Subsubsection",ExpressionUUID->"b4eab2a9-f541-40e0-a89a-19b79051be9a"],
Cell[271765, 8614, 631, 13, 128, "Text",ExpressionUUID->"90f2b814-e6ef-470f-9e65-474721ceef7d"]
}, Closed]],
Cell[CellGroupData[{
Cell[272433, 8632, 310, 4, 62, "Subsubsection",ExpressionUUID->"d3ac8bbb-f7ec-4c2d-a31f-688af1e03001"],
Cell[272746, 8638, 506, 9, 90, "Text",ExpressionUUID->"2cf85b9a-4824-403e-bc59-be0a62366b5a"],
Cell[273255, 8649, 880, 24, 91, "Input",ExpressionUUID->"0fa0c98a-4ec3-4230-9324-f13ca2339c3f"],
Cell[274138, 8675, 120, 0, 33, "Text",ExpressionUUID->"948ab250-778d-4306-b59b-3ecf62455c60"],
Cell[274261, 8677, 392, 8, 43, "Input",ExpressionUUID->"fb6b1ce3-02fb-497c-b678-fe3cb94e5584"],
Cell[CellGroupData[{
Cell[274678, 8689, 122, 1, 27, "Input",ExpressionUUID->"4df75dd6-358a-41b0-9e27-847d0f58d9ea"],
Cell[274803, 8692, 425, 13, 27, "Output",ExpressionUUID->"694324f8-75af-4550-8c76-4a0964bdf9d0"]
}, Open  ]],
Cell[275243, 8708, 253, 6, 52, "Text",ExpressionUUID->"26c45ebe-a647-43ab-8253-47311eb7b8ab"],
Cell[CellGroupData[{
Cell[275521, 8718, 182, 4, 27, "Input",ExpressionUUID->"a105fbda-fd22-413f-beb1-63afc19d9d93"],
Cell[275706, 8724, 83, 0, 27, "Output",ExpressionUUID->"11c9056f-786f-426b-bbee-7b06d6e50752"]
}, Open  ]],
Cell[275804, 8727, 106, 0, 33, "Text",ExpressionUUID->"1f4be520-ca10-4f17-881f-325ccc2f8bff"],
Cell[CellGroupData[{
Cell[275935, 8731, 117, 1, 27, "Input",ExpressionUUID->"ff44028e-13be-4ef2-89a6-f0431b68e7ce"],
Cell[276055, 8734, 84, 0, 27, "Output",ExpressionUUID->"9351864b-a402-4dc0-8c0d-90ee1c5f5982"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[276212, 8742, 87, 0, 57, "Section",ExpressionUUID->"5308e65c-a81d-415d-a80a-520fd235c8b7"],
Cell[276302, 8744, 172, 3, 29, "Text",ExpressionUUID->"4606893d-d2e0-4d70-9a44-88ecdf66b753"],
Cell[CellGroupData[{
Cell[276499, 8751, 182, 3, 59, "Subsubsection",ExpressionUUID->"65bbf838-56df-48d0-8baf-2bcbb7a86f76"],
Cell[276684, 8756, 143, 2, 33, "Text",ExpressionUUID->"1e2ac483-4713-4687-a4a8-0843eec419b0"],
Cell[276830, 8760, 274, 6, 27, "Input",ExpressionUUID->"16ea0e29-282c-47a3-afe0-4917397073a6"]
}, Closed]],
Cell[CellGroupData[{
Cell[277141, 8771, 177, 3, 45, "Subsubsection",ExpressionUUID->"8137581d-ab90-46be-bb1a-3d6abc8a0211"],
Cell[277321, 8776, 628, 20, 128, "Text",ExpressionUUID->"f11a7d26-44b0-4c68-9752-307577cf493c"],
Cell[CellGroupData[{
Cell[277974, 8800, 412, 10, 59, "Input",ExpressionUUID->"404e7c0c-c70f-44e7-bf44-e9132e4cc0d0"],
Cell[278389, 8812, 97, 0, 27, "Output",ExpressionUUID->"3d64a2d2-535b-44b1-bfec-65f0d5d7dd0e"]
}, Open  ]],
Cell[278501, 8815, 405, 12, 52, "Text",ExpressionUUID->"b6dce7f4-84c9-4061-b5d6-ceec4df7e426"],
Cell[CellGroupData[{
Cell[278931, 8831, 307, 8, 27, "Input",ExpressionUUID->"87662be6-cd2d-45c3-92a2-aa391f2f59b3"],
Cell[279241, 8841, 288, 8, 27, "Output",ExpressionUUID->"0d2a7a9a-d491-4248-aa10-0aaa25145ab8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[279566, 8854, 345, 9, 27, "Input",ExpressionUUID->"df6febb4-655a-406e-9fa9-e39c3d8630e7"],
Cell[279914, 8865, 321, 9, 27, "Output",ExpressionUUID->"7a3fa676-013e-4dd1-8a1f-901be8116d89"]
}, Open  ]],
Cell[280250, 8877, 290, 6, 52, "Text",ExpressionUUID->"2700b50a-dfe8-4800-ba00-8773519d2347"],
Cell[280543, 8885, 281, 6, 27, "Input",ExpressionUUID->"adc3800e-80da-4912-88f4-12f7a1c9cc16"],
Cell[CellGroupData[{
Cell[280849, 8895, 120, 1, 27, "Input",ExpressionUUID->"c8d2d88e-42c3-4ca2-be94-d37f04863282"],
Cell[280972, 8898, 112, 0, 23, "Print",ExpressionUUID->"ee147898-de4d-4bf3-a1f9-7bf92ad5f0f6"],
Cell[281087, 8900, 1215, 33, 112, "Print",ExpressionUUID->"749bb877-1d3f-4169-abf8-e5ffef134eff"]
}, Open  ]],
Cell[282317, 8936, 546, 17, 71, "Text",ExpressionUUID->"e8e50cf9-3886-47b2-81ec-4ca7ea8f4b22"],
Cell[CellGroupData[{
Cell[282888, 8957, 291, 7, 27, "Input",ExpressionUUID->"a6006999-0ca2-4d84-883d-b2c7a75d2293"],
Cell[283182, 8966, 272, 7, 27, "Output",ExpressionUUID->"c8953860-566b-4639-9e70-ed047a85fb3b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283491, 8978, 363, 9, 27, "Input",ExpressionUUID->"ee3033ba-71cd-466b-919e-3cf4edb9300c"],
Cell[283857, 8989, 489, 19, 27, "Output",ExpressionUUID->"85501a06-7690-4268-95f4-a2418206d89c"]
}, Open  ]],
Cell[284361, 9011, 532, 15, 52, "Text",ExpressionUUID->"f3a5088f-d177-43d0-9587-10a5845c3a5b"],
Cell[284896, 9028, 391, 9, 43, "Input",ExpressionUUID->"d57597b1-8c17-479e-8fa0-8abd0da897d7"],
Cell[285290, 9039, 420, 10, 43, "Input",ExpressionUUID->"bdff235c-b3c5-4db9-9f37-910b73f79cd2"],
Cell[285713, 9051, 559, 13, 90, "Text",ExpressionUUID->"1bd429cf-29a6-4009-8d2b-a54771e3f478"]
}, Closed]],
Cell[CellGroupData[{
Cell[286309, 9069, 120, 0, 28, "Subsubsection",ExpressionUUID->"42474221-7f79-495b-87c4-bd2b37f8b9d3"],
Cell[286432, 9071, 415, 11, 90, "Text",ExpressionUUID->"65563ff2-b73b-4441-be38-059d5a4cad06"],
Cell[286850, 9084, 147, 2, 33, "Text",ExpressionUUID->"9247ac6c-eb62-452d-8445-2afdb921e462"]
}, Closed]],
Cell[CellGroupData[{
Cell[287034, 9091, 155, 2, 28, "Subsubsection",ExpressionUUID->"f35b4723-10d5-4445-b73e-c3ad97e3f809"],
Cell[287192, 9095, 199, 3, 52, "Text",ExpressionUUID->"f9a4d09e-e8e9-489f-8984-5d29087a0313"],
Cell[287394, 9100, 833, 22, 123, "Input",ExpressionUUID->"060604b8-4457-481a-b7e9-1ae8cc69fb98"],
Cell[288230, 9124, 217, 3, 52, "Text",ExpressionUUID->"a75f0884-5346-41b8-9f4f-da5a32879293"]
}, Closed]]
}, Open  ]]
}
]
*)

